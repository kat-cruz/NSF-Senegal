matches("^hh_13_[0-9]+$"),
matches("^living_01_[0-9]+$"),
matches("^living_03_[0-9]+$"),
matches("^living_04_[0-9]+$"),
matches("^living_05_[0-9]+$"),
matches("^enum_03_[0-9]+$"),
matches("^enum_04_[0-9]+$"),
matches("^enum_05_[0-9]+$")
) %>%
colnames()
household_id <- "hhid"
# Create new variables in the original dataframe by scaling to household-level means
balance_df <- balance_df %>%
group_by(!!sym(scaled_vars)) %>%
mutate(across(
all_of(scaled_vars),
~ mean(.x, na.rm = TRUE),
.names = "{.col}mean"
)) %>%
ungroup()
head(scaled_vars)
view(scaled_vars)
# Specify the individual-level variables to scale
scaled_vars <- balance_df %>%
select(
starts_with("hh_education_year_achieve_"),
starts_with("hh_14_"),
starts_with("hh_16_"),
agri_income_05,
hh_numero,
starts_with("hh_03_"),
starts_with("hh_10_"),
matches("^hh_education_skills_[0-9]+$"),
matches("^hh_education_level_[0-9]+$"),
matches("^hh_11_[0-9]+$"),
matches("^hh_15_[0-9]+$"),
matches("^hh_13_[0-9]+$"),
matches("^living_01_[0-9]+$"),
matches("^living_03_[0-9]+$"),
matches("^living_04_[0-9]+$"),
matches("^living_05_[0-9]+$"),
matches("^enum_03_[0-9]+$"),
matches("^enum_04_[0-9]+$"),
matches("^enum_05_[0-9]+$")
) %>%
colnames()
view(scaled_vars)
# Filter rows to keep only 1s and 0s in the specified variables
# bin_vars <- c("hh_03_", "health_5_2_", "health_5_5_", "health_5_6_", "health_5_7_"  )
#
# balance_df <- balance_df %>%
#   filter(across(all_of(bin_vars), ~ . %in% c(0, 1)))
###create binaries from categorical variables
#hh_education_level, hh_11, hh_12, hh_15, species living_05 enum_03 enum_04 enum_05
# #create binary variables
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 0, 1, 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_2 = if_else(hh_education_level_ == 2, 1, 0),
hh_education_level_3 = if_else(hh_education_level_ == 3, 1, 0),
hh_education_level_4 = if_else(hh_education_level_ == 4, 1, 0),
hh_education_level_99 = if_else(hh_education_level_ == 99, 1, 0),
hh_11_1 = if_else(hh_11_ == 1, 1, 0),
hh_11_2 = if_else(hh_11_ == 2, 1, 0),
hh_11_3 = if_else(hh_11_ == 3, 1, 0),
hh_11_4 = if_else(hh_11_ == 4, 1, 0),
hh_11_99 = if_else(hh_11_ == 99, 1, 0),
hh_15_1 = if_else(hh_15_ == 1, 1, 0),
hh_15_2 = if_else(hh_15_ == 2, 1, 0),
hh_15_3 = if_else(hh_15_ == 3, 1, 0),
hh_15_4 = if_else(hh_15_ == 4, 1, 0),
hh_15_5 = if_else(hh_15_ == 5, 1, 0),
hh_15_99 = if_else(hh_15_ == 99, 1, 0),
living_01_1 = if_else(living_01 == 1, 1, 0),
living_01_2 = if_else(living_01 == 2, 1, 0),
living_01_3 = if_else(living_01 == 3, 1, 0),
living_01_4 = if_else(living_01 == 4, 1, 0),
living_01_5 = if_else(living_01 == 5, 1, 0),
living_01_6 = if_else(living_01 == 6, 1, 0),
living_01_7 = if_else(living_01 == 7, 1, 0),
living_01_8 = if_else(living_01 == 8, 1, 0),
living_01_9 = if_else(living_01 == 9, 1, 0),
living_01_10 = if_else(living_01 == 10, 1, 0),
living_01_99 = if_else(living_01 == 99, 1, 0),
living_03_1 = if_else(living_03 == 1, 1, 0),
living_03_2 = if_else(living_03 == 2, 1, 0),
living_03_3 = if_else(living_03 == 3, 1, 0),
living_03_99 = if_else(living_03 == 99, 1, 0),
living_04_1 = if_else(living_04 == 1, 1, 0),
living_04_2 = if_else(living_04 == 2, 1, 0),
living_04_3 = if_else(living_04 == 3, 1, 0),
living_04_4 = if_else(living_04 == 4, 1, 0),
living_04_5 = if_else(living_04 == 5, 1, 0),
living_04_6 = if_else(living_04 == 6, 1, 0),
living_04_7 = if_else(living_04 == 7, 1, 0),
living_04_99 = if_else(living_04 == 99, 1, 0),
living_05_1 = if_else(living_05 == 1, 1, 0),
living_05_2 = if_else(living_05 == 2, 1, 0),
living_05_3 = if_else(living_05 == 3, 1, 0),
living_05_4 = if_else(living_05 == 4, 1, 0),
living_05_5 = if_else(living_05 == 5, 1, 0),
living_05_6 = if_else(living_05 == 6, 1, 0),
living_05_7 = if_else(living_05 == 7, 1, 0),
living_05_99 = if_else(living_05 == 99, 1, 0),
enum_03_1 = if_else(enum_03 == 1, 1, 0),
enum_03_2 = if_else(enum_03 == 2, 1, 0),
enum_03_3 = if_else(enum_03 == 3, 1, 0),
enum_03_4 = if_else(enum_03 == 4, 1, 0),
enum_03_99 = if_else(enum_03 == 99, 1, 0),
enum_04_1 = if_else(enum_04 == 1, 1, 0),
enum_04_2 = if_else(enum_04 == 2, 1, 0),
enum_04_3 = if_else(enum_04 == 3, 1, 0),
enum_04_4 = if_else(enum_04 == 4, 1, 0),
enum_04_5 = if_else(enum_04 == 5, 1, 0),
enum_04_6 = if_else(enum_04 == 6, 1, 0),
enum_04_99 = if_else(enum_04 == 99, 1, 0),
enum_05_1 = if_else(enum_05 == 1, 1, 0),
enum_05_2 = if_else(enum_05 == 2, 1, 0),
enum_05_3 = if_else(enum_05 == 3, 1, 0),
enum_05_4 = if_else(enum_05 == 4, 1, 0),
enum_05_5 = if_else(enum_05 == 5, 1, 0),
enum_05_99 = if_else(enum_05 == 99, 1, 0),
) %>%
mutate(hh_gender_ = recode(hh_gender_, `2` = 0, .default = hh_gender_))
# Specify the individual-level variables to scale
scaled_vars <- balance_df %>%
select(
starts_with("hh_education_year_achieve_"),
starts_with("hh_14_"),
starts_with("hh_16_"),
agri_income_05,
hh_numero,
starts_with("hh_03_"),
starts_with("hh_10_"),
matches("^hh_education_skills_[0-9]+$"),
matches("^hh_education_level_[0-9]+$"),
matches("^hh_11_[0-9]+$"),
matches("^hh_15_[0-9]+$"),
matches("^hh_13_[0-9]+$"),
matches("^living_01_[0-9]+$"),
matches("^living_03_[0-9]+$"),
matches("^living_04_[0-9]+$"),
matches("^living_05_[0-9]+$"),
matches("^enum_03_[0-9]+$"),
matches("^enum_04_[0-9]+$"),
matches("^enum_05_[0-9]+$")
) %>%
colnames()
view(scaled_vars)
# Create new variables in the original dataframe by scaling to household-level means
balance_df <- balance_df %>%
group_by(!!sym(scaled_vars)) %>%
mutate(across(
all_of(scaled_vars),
~ mean(.x, na.rm = TRUE),
.names = "{.col}mean"
)) %>%
ungroup()
scaled_vars <- balance_df %>%
select(
starts_with("hh_education_year_achieve_"),
starts_with("hh_14_"),
starts_with("hh_16_"),
agri_income_05,
hh_numero,
starts_with("hh_03_"),
starts_with("hh_10_"),
matches("^hh_education_skills_[0-9]+$"),
matches("^hh_education_level_[0-9]+$"),
matches("^hh_11_[0-9]+$"),
matches("^hh_15_[0-9]+$"),
matches("^hh_13_[0-9]+$"),
matches("^living_01_[0-9]+$"),
matches("^living_03_[0-9]+$"),
matches("^living_04_[0-9]+$"),
matches("^living_05_[0-9]+$"),
matches("^enum_03_[0-9]+$"),
matches("^enum_04_[0-9]+$"),
matches("^enum_05_[0-9]+$")
)
view(scaled_vars)
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 0, 1, 0, missing = 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0, missing = 0),
hh_education_level_2 = if_else(hh_education_level_ == 2, 1, 0, missing = 0),
hh_education_level_3 = if_else(hh_education_level_ == 3, 1, 0, missing = 0),
hh_education_level_4 = if_else(hh_education_level_ == 4, 1, 0, missing = 0),
hh_education_level_99 = if_else(hh_education_level_ == 99, 1, 0, missing = 0),
hh_11_1 = if_else(hh_11_ == 1, 1, 0, missing = 0),
hh_11_2 = if_else(hh_11_ == 2, 1, 0, missing = 0),
hh_11_3 = if_else(hh_11_ == 3, 1, 0, missing = 0),
hh_11_4 = if_else(hh_11_ == 4, 1, 0, missing = 0),
hh_11_99 = if_else(hh_11_ == 99, 1, 0, missing = 0),
hh_15_1 = if_else(hh_15_ == 1, 1, 0, missing = 0),
hh_15_2 = if_else(hh_15_ == 2, 1, 0, missing = 0),
hh_15_3 = if_else(hh_15_ == 3, 1, 0, missing = 0),
hh_15_4 = if_else(hh_15_ == 4, 1, 0, missing = 0),
hh_15_5 = if_else(hh_15_ == 5, 1, 0, missing = 0),
hh_15_99 = if_else(hh_15_ == 99, 1, 0, missing = 0),
living_01_1 = if_else(living_01 == 1, 1, 0, missing = 0),
living_01_2 = if_else(living_01 == 2, 1, 0, missing = 0),
living_01_3 = if_else(living_01 == 3, 1, 0, missing = 0),
living_01_4 = if_else(living_01 == 4, 1, 0, missing = 0),
living_01_5 = if_else(living_01 == 5, 1, 0, missing = 0),
living_01_6 = if_else(living_01 == 6, 1, 0, missing = 0),
living_01_7 = if_else(living_01 == 7, 1, 0, missing = 0),
living_01_8 = if_else(living_01 == 8, 1, 0, missing = 0),
living_01_9 = if_else(living_01 == 9, 1, 0, missing = 0),
living_01_10 = if_else(living_01 == 10, 1, 0, missing = 0),
living_01_99 = if_else(living_01 == 99, 1, 0, missing = 0)
) %>%
mutate(across(starts_with("living_03"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("living_04"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("living_05"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_03"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_04"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_05"), ~ replace_na(.x, 0))) %>%
mutate(hh_gender_ = recode(hh_gender_, `2` = 0, .default = hh_gender_))
view(balance_df)
# Adding indicator variables for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Add indicator variables based on the group value
control = if_else(group %in% c("0A", "0B"), 1, 0),
public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
) %>%
# Drop the 'group' column if it's not needed
select(-group)
# Filter rows to keep only 1s and 0s in the specified variables
# bin_vars <- c("hh_03_", "health_5_2_", "health_5_5_", "health_5_6_", "health_5_7_"  )
#
# balance_df <- balance_df %>%
#   filter(across(all_of(bin_vars), ~ . %in% c(0, 1)))
###create binaries from categorical variables
#hh_education_level, hh_11, hh_12, hh_15, species living_05 enum_03 enum_04 enum_05
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 0, 1, 0, missing = 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0, missing = 0),
hh_education_level_2 = if_else(hh_education_level_ == 2, 1, 0, missing = 0),
hh_education_level_3 = if_else(hh_education_level_ == 3, 1, 0, missing = 0),
hh_education_level_4 = if_else(hh_education_level_ == 4, 1, 0, missing = 0),
hh_education_level_99 = if_else(hh_education_level_ == 99, 1, 0, missing = 0),
hh_11_1 = if_else(hh_11_ == 1, 1, 0, missing = 0),
hh_11_2 = if_else(hh_11_ == 2, 1, 0, missing = 0),
hh_11_3 = if_else(hh_11_ == 3, 1, 0, missing = 0),
hh_11_4 = if_else(hh_11_ == 4, 1, 0, missing = 0),
hh_11_99 = if_else(hh_11_ == 99, 1, 0, missing = 0),
hh_15_1 = if_else(hh_15_ == 1, 1, 0, missing = 0),
hh_15_2 = if_else(hh_15_ == 2, 1, 0, missing = 0),
hh_15_3 = if_else(hh_15_ == 3, 1, 0, missing = 0),
hh_15_4 = if_else(hh_15_ == 4, 1, 0, missing = 0),
hh_15_5 = if_else(hh_15_ == 5, 1, 0, missing = 0),
hh_15_99 = if_else(hh_15_ == 99, 1, 0, missing = 0),
living_01_1 = if_else(living_01 == 1, 1, 0, missing = 0),
living_01_2 = if_else(living_01 == 2, 1, 0, missing = 0),
living_01_3 = if_else(living_01 == 3, 1, 0, missing = 0),
living_01_4 = if_else(living_01 == 4, 1, 0, missing = 0),
living_01_5 = if_else(living_01 == 5, 1, 0, missing = 0),
living_01_6 = if_else(living_01 == 6, 1, 0, missing = 0),
living_01_7 = if_else(living_01 == 7, 1, 0, missing = 0),
living_01_8 = if_else(living_01 == 8, 1, 0, missing = 0),
living_01_9 = if_else(living_01 == 9, 1, 0, missing = 0),
living_01_10 = if_else(living_01 == 10, 1, 0, missing = 0),
living_01_99 = if_else(living_01 == 99, 1, 0, missing = 0)
) %>%
mutate(across(starts_with("living_03"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("living_04"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("living_05"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_03"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_04"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_05"), ~ replace_na(.x, 0))) %>%
mutate(hh_gender_ = recode(hh_gender_, `2` = 0, .default = hh_gender_))
# Take care of NA's
view(balance_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
#remotes::install_github("kwb-r/kwb.utils")
#options(repos = c(
#  kwbr = 'https://kwb-r.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
# Download and install kwb.utils in R
#install.packages('kwb.utils')
# install.packages(officer)
# install.packages(r2rtf)
# install.packages(dplyr)
# install.packages(ggplot2)
# install.packages(kwb.utils)
# install.packages(haven)
# install.packages(data.table)
# install.packages(rtf)
# install.packages(tidyverse)
# install.packages(estimatr)
# install.packages(broom)
#install.packages(reshape2)
#library(reshape2)
library(officer)
library(r2rtf)
library(dplyr)
library(ggplot2)
library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
# Adding indicator variables for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Add indicator variables based on the group value
control = if_else(group %in% c("0A", "0B"), 1, 0),
public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
) %>%
# Drop the 'group' column if it's not needed
select(-group)
view(balance_df)
# Filter rows to keep only 1s and 0s in the specified variables
# bin_vars <- c("hh_03_", "health_5_2_", "health_5_5_", "health_5_6_", "health_5_7_"  )
#
# balance_df <- balance_df %>%
#   filter(across(all_of(bin_vars), ~ . %in% c(0, 1)))
###create binaries from categorical variables
#hh_education_level, hh_11, hh_12, hh_15, species living_05 enum_03 enum_04 enum_05
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 0, 1, 0, missing = 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0, missing = 0),
hh_education_level_2 = if_else(hh_education_level_ == 2, 1, 0, missing = 0),
hh_education_level_3 = if_else(hh_education_level_ == 3, 1, 0, missing = 0),
hh_education_level_4 = if_else(hh_education_level_ == 4, 1, 0, missing = 0),
hh_education_level_99 = if_else(hh_education_level_ == 99, 1, 0, missing = 0),
hh_11_1 = if_else(hh_11_ == 1, 1, 0, missing = 0),
hh_11_2 = if_else(hh_11_ == 2, 1, 0, missing = 0),
hh_11_3 = if_else(hh_11_ == 3, 1, 0, missing = 0),
hh_11_4 = if_else(hh_11_ == 4, 1, 0, missing = 0),
hh_11_99 = if_else(hh_11_ == 99, 1, 0, missing = 0),
hh_15_1 = if_else(hh_15_ == 1, 1, 0, missing = 0),
hh_15_2 = if_else(hh_15_ == 2, 1, 0, missing = 0),
hh_15_3 = if_else(hh_15_ == 3, 1, 0, missing = 0),
hh_15_4 = if_else(hh_15_ == 4, 1, 0, missing = 0),
hh_15_5 = if_else(hh_15_ == 5, 1, 0, missing = 0),
hh_15_99 = if_else(hh_15_ == 99, 1, 0, missing = 0),
living_01_1 = if_else(living_01 == 1, 1, 0, missing = 0),
living_01_2 = if_else(living_01 == 2, 1, 0, missing = 0),
living_01_3 = if_else(living_01 == 3, 1, 0, missing = 0),
living_01_4 = if_else(living_01 == 4, 1, 0, missing = 0),
living_01_5 = if_else(living_01 == 5, 1, 0, missing = 0),
living_01_6 = if_else(living_01 == 6, 1, 0, missing = 0),
living_01_7 = if_else(living_01 == 7, 1, 0, missing = 0),
living_01_8 = if_else(living_01 == 8, 1, 0, missing = 0),
living_01_9 = if_else(living_01 == 9, 1, 0, missing = 0),
living_01_10 = if_else(living_01 == 10, 1, 0, missing = 0),
living_01_99 = if_else(living_01 == 99, 1, 0, missing = 0)
) %>%
mutate(across(starts_with("living_03"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("living_04"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("living_05"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_03"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_04"), ~ replace_na(.x, 0))) %>%
mutate(across(starts_with("enum_05"), ~ replace_na(.x, 0))) %>%
mutate(hh_gender_ = recode(hh_gender_, `2` = 0, .default = hh_gender_))
# Take care of NA's
view(balance_df)
view(balance_df)
# Filter rows to keep only 1s and 0s in the specified variables
# bin_vars <- c("hh_03_", "health_5_2_", "health_5_5_", "health_5_6_", "health_5_7_"  )
#
# balance_df <- balance_df %>%
#   filter(across(all_of(bin_vars), ~ . %in% c(0, 1)))
###create binaries from categorical variables
#hh_education_level, hh_11, hh_12, hh_15, species living_05 enum_03 enum_04 enum_05
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 0, 1, 0, missing = 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0, missing = 0),
hh_education_level_2 = if_else(hh_education_level_ == 2, 1, 0, missing = 0),
hh_education_level_3 = if_else(hh_education_level_ == 3, 1, 0, missing = 0),
hh_education_level_4 = if_else(hh_education_level_ == 4, 1, 0, missing = 0),
hh_education_level_99 = if_else(hh_education_level_ == 99, 1, 0, missing = 0),
hh_11_1 = if_else(hh_11_ == 1, 1, 0, missing = 0),
hh_11_2 = if_else(hh_11_ == 2, 1, 0, missing = 0),
hh_11_3 = if_else(hh_11_ == 3, 1, 0, missing = 0),
hh_11_4 = if_else(hh_11_ == 4, 1, 0, missing = 0),
hh_11_99 = if_else(hh_11_ == 99, 1, 0, missing = 0),
hh_15_1 = if_else(hh_15_ == 1, 1, 0, missing = 0),
hh_15_2 = if_else(hh_15_ == 2, 1, 0, missing = 0),
hh_15_3 = if_else(hh_15_ == 3, 1, 0, missing = 0),
hh_15_4 = if_else(hh_15_ == 4, 1, 0, missing = 0),
hh_15_5 = if_else(hh_15_ == 5, 1, 0, missing = 0),
hh_15_99 = if_else(hh_15_ == 99, 1, 0, missing = 0),
living_01_1 = if_else(living_01 == 1, 1, 0, missing = 0),
living_01_2 = if_else(living_01 == 2, 1, 0, missing = 0),
living_01_3 = if_else(living_01 == 3, 1, 0, missing = 0),
living_01_4 = if_else(living_01 == 4, 1, 0, missing = 0),
living_01_5 = if_else(living_01 == 5, 1, 0, missing = 0),
living_01_6 = if_else(living_01 == 6, 1, 0, missing = 0),
living_01_7 = if_else(living_01 == 7, 1, 0, missing = 0),
living_01_8 = if_else(living_01 == 8, 1, 0, missing = 0),
living_01_9 = if_else(living_01 == 9, 1, 0, missing = 0),
living_01_10 = if_else(living_01 == 10, 1, 0, missing = 0),
living_01_99 = if_else(living_01 == 99, 1, 0, missing = 0),
living_03_1 = if_else(living_03 == 1, 1, 0, missing = 0),
living_03_2 = if_else(living_03 == 2, 1, 0, missing = 0),
living_03_3 = if_else(living_03 == 3, 1, 0, missing = 0),
living_03_99 = if_else(living_03 == 99, 1, 0, missing = 0),
living_04_1 = if_else(living_04 == 1, 1, 0, missing = 0),
living_04_2 = if_else(living_04 == 2, 1, 0, missing = 0),
living_04_3 = if_else(living_04 == 3, 1, 0, missing = 0),
living_04_4 = if_else(living_04 == 4, 1, 0, missing = 0),
living_04_5 = if_else(living_04 == 5, 1, 0, missing = 0),
living_04_6 = if_else(living_04 == 6, 1, 0, missing = 0),
living_04_7 = if_else(living_04 == 7, 1, 0, missing = 0),
living_04_99 = if_else(living_04 == 99, 1, 0, missing = 0),
living_05_1 = if_else(living_05 == 1, 1, 0, missing = 0),
living_05_2 = if_else(living_05 == 2, 1, 0, missing = 0),
living_05_3 = if_else(living_05 == 3, 1, 0, missing = 0),
living_05_4 = if_else(living_05 == 4, 1, 0, missing = 0),
living_05_5 = if_else(living_05 == 5, 1, 0, missing = 0),
living_05_6 = if_else(living_05 == 6, 1, 0, missing = 0),
living_05_7 = if_else(living_05 == 7, 1, 0, missing = 0),
living_05_99 = if_else(living_05 == 99, 1, 0, missing = 0),
enum_03_1 = if_else(enum_03 == 1, 1, 0, missing = 0),
enum_03_2 = if_else(enum_03 == 2, 1, 0, missing = 0),
enum_03_3 = if_else(enum_03 == 3, 1, 0, missing = 0),
enum_03_4 = if_else(enum_03 == 4, 1, 0, missing = 0),
enum_03_99 = if_else(enum_03 == 99, 1, 0, missing = 0),
enum_04_1 = if_else(enum_04 == 1, 1, 0, missing = 0),
enum_04_2 = if_else(enum_04 == 2, 1, 0, missing = 0),
enum_04_3 = if_else(enum_04 == 3, 1, 0, missing = 0),
enum_04_4 = if_else(enum_04 == 4, 1, 0, missing = 0),
enum_04_5 = if_else(enum_04 == 5, 1, 0, missing = 0),
enum_04_6 = if_else(enum_04 == 6, 1, 0, missing = 0),
enum_04_99 = if_else(enum_04 == 99, 1, 0, missing = 0),
enum_05_1 = if_else(enum_05 == 1, 1, 0, missing = 0),
enum_05_2 = if_else(enum_05 == 2, 1, 0, missing = 0),
enum_05_3 = if_else(enum_05 == 3, 1, 0, missing = 0),
enum_05_4 = if_else(enum_05 == 4, 1, 0, missing = 0),
enum_05_5 = if_else(enum_05 == 5, 1, 0, missing = 0),
enum_05_99 = if_else(enum_05 == 99, 1, 0, missing = 0)) %>%
mutate(hh_gender_ = recode(hh_gender_, `2` = 0, .default = hh_gender_))
# Take care of NA's
view(balance_df)
scaled_vars <- balance_df %>%
select(
starts_with("hh_education_year_achieve_"),
starts_with("hh_14_"),
starts_with("hh_16_"),
agri_income_05,
hh_numero,
starts_with("hh_03_"),
starts_with("hh_10_"),
matches("^hh_education_skills_[0-9]+$"),
matches("^hh_education_level_[0-9]+$"),
matches("^hh_11_[0-9]+$"),
matches("^hh_15_[0-9]+$"),
matches("^hh_13_[0-9]+$"),
matches("^living_01_[0-9]+$"),
matches("^living_03_[0-9]+$"),
matches("^living_04_[0-9]+$"),
matches("^living_05_[0-9]+$"),
matches("^enum_03_[0-9]+$"),
matches("^enum_04_[0-9]+$"),
matches("^enum_05_[0-9]+$")
)
view(scaled_vars)
