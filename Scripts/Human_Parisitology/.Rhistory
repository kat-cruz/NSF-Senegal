sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
matched_only_df <- matched_only_df %>%
mutate(
total_time = ifelse(is.na(total_time), 0, total_time),
scaled = ifelse(is.na(scaled), 0, scaled))
# Function to calculate summary statistics for a single numeric vector
numerical_summary_func_l <- function(value) {
# Calculate summary statistics for numeric variables
numerical_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),
Min = round(min(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
Mean = round(mean(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
Max = sprintf("%.2f", max(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
SD = round(sd(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
prop_na = round(sum(value == -9 | is.na(value)) / length(value), 2)
)
return(numerical_stats_l)
}
# Function to summarize multiple sets of numeric variables by prefix
numerical_summary_l <- function(baseline_data, prefixes) {
# Loop over each prefix
summaries_numerical_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
numerical_data_l <- baseline_data %>%
select(starts_with(prefix))
# Pull the column values and pass to numerical_summary_func_l
value <- numerical_data_l[[1]]
numerical_summary_stats <- numerical_summary_func_l(value)
# Add the prefix (variable name) to the summary
numerical_summary_stats$Variable <- prefix
numerical_summary_stats <- numerical_summary_stats %>%
select(Variable, everything())
return(numerical_summary_stats)
})
# Combine the summaries into a single data frame
numerical_sum_set_l <- bind_rows(summaries_numerical_l)
return(numerical_sum_set_l)
}
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
view(matched_only_df)
prefixes_numerical <- c("hh_age_", "hh_age_resp", "wealthindex", "health_5_4_")
output_num <- numerical_summary_l(matched_only_df, prefixes_numerical)
prefixes_numerical <- c("hh_age_", "wealthindex", "health_5_4_")
output_num <- numerical_summary_l(matched_only_df, prefixes_numerical)
names(merged_df)
view(merged_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Clean Data"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Clean Data"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
# Define possible paths
path1 <- "C:\\Users\\kateri\\Box\\NSF Senegal\\Data Management\\_PartnerData\\Child infection dataframe\\Clean Data"
path2 <- "C:/Users/km978\\Box\\NSF Senegal\\Data Management\\_PartnerData\\Child infection dataframe\\Clean Data"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
# Filter df
matched_only_df <- infection_df %>%
filter(match_score != "")
#turn NAs into zeros
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = as.integer(hh_19_),
hh_30_ = as.integer(hh_30_),
hh_31_ = as.integer(hh_31_),
hh_33_ = as.integer(hh_33_),
living_03 = as.integer(living_03),
hh_31_ = as.integer(hh_31_),
hh_12_1_ = as.integer(hh_12_1_),
hh_12_2_ = as.integer(hh_12_2_),
hh_12_3_ = as.integer(hh_12_3_),
hh_12_4_ = as.integer(hh_12_4_),
hh_12_5_ = as.integer(hh_12_5_),
hh_12_6_ = as.integer(hh_12_6_),
hh_12_7_ = as.integer(hh_12_7_),
hh_12_8_ = as.integer(hh_12_8_)
)
#Clean based off skip patterns
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_10_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
#living_04 = 0,  # No condition provided
hh_12_1_ = if_else(hh_10_ == 0, 0, hh_12_1_),
hh_12_2_ = if_else(hh_10_ == 0, 0, hh_12_2_),
hh_12_3_ = if_else(hh_10_ == 0, 0, hh_12_3_),
hh_12_4_ = if_else(hh_10_ == 0, 0, hh_12_4_),
hh_12_5_ = if_else(hh_10_ == 0, 0, hh_12_5_),
hh_12_6_ = if_else(hh_10_ == 0, 0, hh_12_6_),
hh_12_7_ = if_else(hh_10_ == 0, 0, hh_12_7_),
hh_12_8_ = if_else(hh_10_ == 0, 0, hh_12_8_)
)
#There's a lot of NAs present. Correcting for those by changing them to zero since the conditional fix didn't work
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(is.na(hh_19_), 0, hh_19_),
hh_31_ = if_else(is.na(hh_31_), 0, hh_31_),
hh_33_ = if_else(is.na(hh_33_), 0, hh_33_),
living_03 = if_else(is.na(living_03), 0, living_03),
living_04 = if_else(is.na(living_04), 0, living_04),
hh_12_1_ = if_else(is.na(hh_12_1_), 0, hh_12_1_),
hh_12_1_ = if_else(is.na(hh_12_1_), 0, hh_12_1_),
hh_12_2_ = if_else(is.na(hh_12_2_), 0, hh_12_2_),
hh_12_3_ = if_else(is.na(hh_12_3_), 0, hh_12_3_),
hh_12_4_ = if_else(is.na(hh_12_4_), 0, hh_12_4_),
hh_12_5_ = if_else(is.na(hh_12_5_), 0, hh_12_5_),
hh_12_6_ = if_else(is.na(hh_12_6_), 0, hh_12_6_),
hh_12_7_ = if_else(is.na(hh_12_7_), 0, hh_12_7_),
hh_12_8_ = if_else(is.na(hh_12_8_), 0, hh_12_8_)
)
#view(matched_only_df)
names(matched_only_df)
#write_dta(matched_only_df, "Matched_Only_Features.dta")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
matched_only_df <- matched_only_df %>%
mutate(
total_time = ifelse(is.na(total_time), 0, total_time),
scaled = ifelse(is.na(scaled), 0, scaled))
# Function to calculate summary statistics for a single numeric vector
numerical_summary_func_l <- function(value) {
# Calculate summary statistics for numeric variables
numerical_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),
Min = round(min(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
Mean = round(mean(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
Max = sprintf("%.2f", max(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
SD = round(sd(ifelse(value == -9, NA, as.numeric(value)), na.rm = TRUE), 2),
prop_na = round(sum(value == -9 | is.na(value)) / length(value), 2)
)
return(numerical_stats_l)
}
# Function to summarize multiple sets of numeric variables by prefix
numerical_summary_l <- function(baseline_data, prefixes) {
# Loop over each prefix
summaries_numerical_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
numerical_data_l <- baseline_data %>%
select(starts_with(prefix))
# Pull the column values and pass to numerical_summary_func_l
value <- numerical_data_l[[1]]
numerical_summary_stats <- numerical_summary_func_l(value)
# Add the prefix (variable name) to the summary
numerical_summary_stats$Variable <- prefix
numerical_summary_stats <- numerical_summary_stats %>%
select(Variable, everything())
return(numerical_summary_stats)
})
# Combine the summaries into a single data frame
numerical_sum_set_l <- bind_rows(summaries_numerical_l)
return(numerical_sum_set_l)
}
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
view(matched_only_df)
prefixes_numerical <- c("hh_age_", "wealthindex", "health_5_4_")
output_num <- numerical_summary_l(matched_only_df, prefixes_numerical)
view(merged_df)
output_num <- output_num %>%
mutate(
Survey_Question = case_when(
str_detect(Variable, "^wealthindex") ~ "Wealth index",
str_detect(Variable, "^hh_age_") ~ "What is the age of the household head?",
str_detect(Variable, "hh_age_resp") ~ "Age of respondent",
str_detect(Variable, "^health_5_4_") ~ "How many days did he/she miss work/school due to illness or injury in the past month?",
TRUE ~ as.character(Variable)  # Keeps other values as they are
)
) %>%
relocate(Survey_Question, .before = Variable)
output_num <- output_num %>%
select(-prop_na)
# Create the gt table
output_num_gt <- gt(output_num) %>%
tab_header(
title = "Continuous Variable Summary Statistics"
)
gtsave(output_num_gt, "continuous_summary_stats.tex")
output_num_gt
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Repo/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Repo/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
view(matched_only_df)
prefixes_numerical <- c("hh_age_", "hh_age_resp","wealthindex", "health_5_4_")
output_num <- numerical_summary_l(matched_only_df, prefixes_numerical)
view(merged_df)
output_num <- output_num %>%
mutate(
Survey_Question = case_when(
str_detect(Variable, "^wealthindex") ~ "Wealth index",
str_detect(Variable, "^hh_age_") ~ "What is the age of the household head?",
str_detect(Variable, "hh_age_resp") ~ "Age of respondent",
str_detect(Variable, "^health_5_4_") ~ "How many days did he/she miss work/school due to illness or injury in the past month?",
TRUE ~ as.character(Variable)  # Keeps other values as they are
)
) %>%
relocate(Survey_Question, .before = Variable)
output_num <- output_num %>%
select(-prop_na)
# Create the gt table
output_num_gt <- gt(output_num) %>%
tab_header(
title = "Continuous Variable Summary Statistics"
)
gtsave(output_num_gt, "continuous_summary_stats.tex")
output_num_gt
############################ Bivariate Logistic Regression #####################################
# Define possible paths
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Repo/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Repo/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
model_01_data <- matched_only_df %>%
select(total_egg, sm_inf, sh_inf, health_5_3_2_,health_5_4_, hh_gender_, hh_age_, hh_29_, q_23, q_24, q_49, Cerratophyllummassg, schisto_indicator, scaled, Humanwatercontact, InfectedBulinus, InfectedBiomphalaria)
model_01_data <- model_01_data[complete.cases(model_01_data), ]
#(model_01_data)
## Selected covariates at the village level:
#view(matched_only_df)
# Specify the formula for logistic regression
formula_01_h <- sh_inf ~ health_5_3_2_ + health_5_4_ + hh_gender_ + hh_age_ +  hh_29_ + q_23 + q_24 + q_49 + Cerratophyllummassg + schisto_indicator + scaled + Humanwatercontact + InfectedBulinus + InfectedBiomphalaria
formula_01_m <- sm_inf ~ health_5_3_2_ + health_5_4_ + hh_gender_ + hh_age_ +  hh_29_ + q_23 + q_24 + q_49 + Cerratophyllummassg + schisto_indicator + scaled + Humanwatercontact + InfectedBulinus + InfectedBiomphalaria
formula_01_t <- total_egg ~ health_5_3_2_ + health_5_4_ + hh_gender_ + hh_age_ +  hh_29_ + q_23 + q_24 + q_49 + Cerratophyllummassg + schisto_indicator + scaled + Humanwatercontact + InfectedBulinus + InfectedBiomphalaria
# Run logistic regressions for S. haematobium and S. mansoni
logit_model_01_h <- glm(formula_01_h, data = model_01_data, family = binomial)
logit_model_01_m <- glm(formula_01_m, data = model_01_data, family = binomial)
# Run OLS regression for Total Egg Count
ols_model_01_t <- lm(formula_01_t, data = model_01_data)
# Calculate McFadden's Pseudo R^2 for the logistic models
pseudo_r2_h_01 <- pR2(logit_model_01_h)["McFadden"]
pseudo_r2_h_01 <- ifelse(is.null(pseudo_r2_h_01) || is.na(pseudo_r2_h_01), "N/A", round(as.numeric(pseudo_r2_h_01), 4))
pseudo_r2_m_01 <- pR2(logit_model_01_m)["McFadden"]
pseudo_r2_m_01 <- ifelse(is.null(pseudo_r2_m_01) || is.na(pseudo_r2_m_01), "N/A", round(as.numeric(pseudo_r2_m_01), 4))
# Calculate BIC for both logistic models
bic_value_h_01 <- BIC(logit_model_01_h)
bic_value_m_01 <- BIC(logit_model_01_m)
# Calculate robust standard errors for the logistic models
robust_se_h_01 <- sqrt(diag(vcovHC(logit_model_01_h, type = "HC1")))
robust_se_m_01 <- sqrt(diag(vcovHC(logit_model_01_m, type = "HC1")))
# Calculate R-squared, Adjusted R-squared, and RMSE for the OLS model (total_egg)
r_squared_t_01 <- summary(ols_model_01_t)$r.squared
adj_r_squared_t_01 <- summary(ols_model_01_t)$adj.r.squared
rmse_t_01 <- sqrt(mean(residuals(ols_model_01_t)^2))
# Calculate BIC for the OLS model
bic_value_t_01 <- BIC(ols_model_01_t)
# Calculate robust standard errors for the OLS model
robust_se_t_01 <- sqrt(diag(vcovHC(ols_model_01_t, type = "HC1")))
# Display summary of both logistic models and the OLS model using stargazer
logit_models_done_01 <- stargazer(logit_model_01_h, logit_model_01_m, ols_model_01_t,
covariate.labels = c("Percieved infection", "Missed school days", "Sex", "Age", "Education level"),
title = "Regression Models 01: S.mansoni & S. haematobium Infections",
type = "latex",
digit.separator = "",
no.space = TRUE,
column.sep.width = "3pt",
dep.var.labels = c("S. h",
"S. m",
"\\makecell{{S.h + S.m} \\\\ \\ {egg count}}"),
omit = c("q_23", "q_24", "q_49", "Cerratophyllummassg", "schisto_indicator",
"scaled", "Humanwatercontact", "InfectedBulinus", "InfectedBiomphalaria"),
se = list(robust_se_h_01, robust_se_m_01, robust_se_t_01),
omit.stat = c("f", "adj.rsq", "rsq", "ll", "aic", "ser"),
add.lines = list(
c("Pseudo $R^2$", pseudo_r2_h, pseudo_r2_m, "N/A"),  # For OLS (not applicable)
c("BIC", round(bic_value_h_01, 2), round(bic_value_m_01, 2), round(bic_value_t_01, 2)),
c("$R^2$", "", "", round(r_squared_t_01, 4)),
c("Adjusted $R^2$", "", "", round(adj_r_squared_t_01, 4)),
c("RMSE", "", "", round(rmse_t_01, 4))),
notes = "Note: the following Variables are included as village-level covariates: Has running water, Has tap water system, Distance to nearest water point, Cerato mass, Snails actually have schisto, Scaled time spent in water, Human water contact, Infected bulinus snails, and infected Biomphalaria snails."
)
# q_24, q_49, Cerratophyllummassg, schisto_indicator, scaled, Humanwatercontact, InfectedBulinus, and InfectedBiomphalaria are included as village-level covariates.
cat(logit_models_done_01, sep = '\n', file = 'logit_modeles_01_table.tex')
# Load necessary libraries
library(dplyr)
library(tidyr)
library(ggplot2)
library(haven)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Rice_Asset_Analysis"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Rice_Asset_Analysis"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features_rice.dta")
infection_df <- read_dta(file_path_infection_df)
View(infection_df)
# Split data into rice and non-rice farming households
infection_df <- infection_df %>%
mutate(
rice_farming_group = if_else(agri_6_20_ == 1, 1, 0)
)
View(infection_df)
# Descriptive statistics
descriptive_stats <- infection_df %>%
group_by(rice_farming_group) %>%
summarise(
mean_infection_rate = mean(health_5_3_2_, na.rm = TRUE),
sd_infection_rate = sd(health_5_3_2_, na.rm = TRUE),
mean_asset_holdings = mean(list_actifscount, na.rm = TRUE),
sd_asset_holdings = sd(list_actifscount, na.rm = TRUE),
n = n()
)
print("Descriptive Statistics")
print(descriptive_stats)
#install.packages("ggmosaic")
#install.packages("vcd")
#install.packages("stargazer")
#install.packages("MASS")
#install.packages("pscl")
#install.packages("sandwich")
#install.packages("gt")
#install.packages("caret")
#install.packages("xtable")
library(gt)
library(vcd)
library(ggmosaic)
library(officer)
library(r2rtf)
library(dplyr)
library(ggplot2)
library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
#library(MASS)
library(stats)
library(stargazer)
library(pscl)
library(sandwich)
library(caret)
library(xtable)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Parasitological_Analysis_Data/Analysis_Data"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Parasitological_Analysis_Data/Analysis_Data"
))
}
file_path_infection_df <- file.path(proj$p1, "")
infection_df <- read_dta(file_path_infection_df)
file_path_infection_df <- file.path(proj$p1, "base_child_infection_dataframe.dta")
infection_df <- read_dta(file_path_infection_df)
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
View(matched_only_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Parasitological_Analysis_Data/Analysis_Data"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Parasitological_Analysis_Data/Analysis_Data"
))
}
file_path_infection_df <- file.path(proj$p1, "base_child_infection_dataframe.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df
# Filter df
matched_only_df <- infection_df %>%
filter(match_score != "")
#turn NAs into zeros
matched_only_df
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
view(matched_only_df)
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
view(matched_only_df)
