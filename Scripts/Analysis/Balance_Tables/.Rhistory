variable == "beliefs_03_bin" ~ "Probability of a child contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_04_bin" ~ "Agree: Village land should belong to community (1=Yes, 0=No) +",
variable == "beliefs_05_bin" ~ "Agree: Village water sources should belong to community (1=Yes, 0=No) +",
variable == "beliefs_06_bin" ~ "Agree: Right to products from own land (1=Yes, 0=No) +",
variable == "beliefs_07_bin" ~ "Agree: Right to products from community land worked on (1=Yes, 0=No) +",
variable == "beliefs_08_bin" ~ "Agree: Right to products from community water sources fished in (1=Yes, 0=No) +",
variable == "beliefs_09_bin" ~ "Agree: Right to products from community water sources harvested from (1=Yes, 0=No) +",
variable == "health_5_3_bin" ~ "Indicator for bilharzia or diarrhea in the past 12 months (1=Yes, 0=No, among those reporting illness)",
variable == "health_5_6_" ~ "Indicator for Diagnosed with schistosomiasis (1=Yes, 0=No) †",
variable == "num_water_access_points" ~ "Number of village water access points",
variable == "q_51" ~ "Distance to nearest healthcare center (km) [village level]",
variable == "target_village" ~ "Indicator if auction village (1=Yes, 0=No)",
TRUE ~ variable  # Default case
))
final_table
final_table <- final_table %>%
select(Question, everything()) %>%
rename(Variable = variable,
`Control vs Private Treatment` = `Control vs Treatment1`,
`Control vs Public Treatment` = `Control vs Treatment2`,
`Control vs Public & Private Treatment` = `Control vs Treatment3`,
`Private Treatment vs Public Treatment` = `Treatment1 vs Treatment2`,
`Private Treatment vs Public & Private Treatment` = `Treatment1 vs Treatment3`,
`Public Treatment vs Public & Private Treatment` = `Treatment2 vs Treatment3`,
`Local Control vs Public & Private Treatment` = `Treatment3 vs Local Control`,
`Local Control vs Private Treatment` = `Treatment2 vs Local Control`,
`Local Control vs Public Treatment` = `Treatment1 vs Local Control`,
`F-test` = f_statistic)
# Define the desired column order
desired_column_order <- c(
"Control vs Private Treatment",
"Control vs Public Treatment",
"Control vs Local Control",
"Control vs Public & Private Treatment",
"Local Control vs Public Treatment",
"Local Control vs Private Treatment",
"Local Control vs Public & Private Treatment",
"Private Treatment vs Public Treatment",
"Private Treatment vs Public & Private Treatment",
"Public Treatment vs Public & Private Treatment",
"F-test"
)
# Reorder the columns in final_table
final_table <- final_table %>%
select(Question, Variable, all_of(desired_column_order))  # Ensure 'variable' stays the first column
# Print the modified final_table
print(final_table)
final_table
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table %>%
kable(format = "html", escape = FALSE, caption = "Balance Table") %>%
footnote(
general = "Reported statistics are regression coefficients, with p-values shown in parentheses. Standard errors are clustered at the village level. P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01).",
symbol = c(
"Binary variables were derived from Likert scale responses based on their distribution.",
"Responses marked as 'I Don't Know' (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("balance_tablev7.html")
# setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
# knitr::kable(final_table, format = "html") %>% save_kable("balance_tablev3.html")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table_subset <- final_table  %>%
select(-starts_with("Local Control"), `Control vs Local Control`
)
final_table_subset
write_xlsx(final_table_subset, "balance_table_subset.xlsx")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table %>%
kable(format = "html", escape = FALSE, caption = "Baseline Balance Table") %>%
footnote(
general = "Reported statistics are regression coefficients, with p-values shown in parentheses. Standard errors are clustered at the village level. P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01).",
symbol = c(
"Binary variables were derived from Likert scale responses based on their distribution.",
"Responses marked as 'I Don't Know' (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("balance_tablev7.html")
# setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
# knitr::kable(final_table, format = "html") %>% save_kable("balance_tablev3.html")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table_subset <- final_table  %>%
select(-starts_with("Local Control"), `Control vs Local Control`
)
final_table_subset
write_xlsx(final_table_subset, "balance_table_subset.xlsx")
# Excel spreadsheet
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
# Manually add footnotes as a single row
footnotes <- data.frame(
Variable = "Footnotes:",
Mean = "Table presents mean values, with standard deviations in parentheses.",
SD = "+ Binary variables were created from Likert scale responses based on their distribution.",
Other = "† 'I Don't Know' responses (coded as 2) have been recoded as missing values.",
PValue = "P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01)."
)
# Ensure all columns are character type to avoid coercion issues
final_table <- final_table %>%
mutate(across(everything(), as.character))
# Bind footnotes to the summary table
final_table_with_footnotes <- bind_rows(final_table, footnotes)
# Save to Excel
write_xlsx(summary_table_with_footnotes, "balance_table.xlsx")
# Excel spreadsheet
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
# Manually add footnotes as a single row
footnotes <- data.frame(
Variable = "Footnotes:",
Mean = "Table presents mean values, with standard deviations in parentheses.",
SD = "+ Binary variables were created from Likert scale responses based on their distribution.",
Other = "† 'I Don't Know' responses (coded as 2) have been recoded as missing values."
)
# Ensure all columns are character type to avoid coercion issues
summary_table <- summary_table %>%
mutate(across(everything(), as.character))
# Bind footnotes to the summary table
summary_table_with_footnotes <- bind_rows(summary_table, footnotes)
# Save to Excel
write_xlsx(summary_table_with_footnotes, "baseline_summary_stats.xlsx")
# Excel spreadsheet
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
# Manually add footnotes as a single row
footnotes <- data.frame(
Variable = "Footnotes:",
Mean = "Table presents mean values, with standard deviations in parentheses.",
SD = "+ Binary variables were created from Likert scale responses based on their distribution.",
Other = "† 'I Don't Know' responses (coded as 2) have been recoded as missing values.",
PValue = "P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01)."
)
# Ensure all columns are character type to avoid coercion issues
final_table <- final_table %>%
mutate(across(everything(), as.character))
# Bind footnotes to the summary table
final_table_with_footnotes <- bind_rows(final_table, footnotes)
# Save to final_table_with_footnotes
write_xlsx(final_table_with_footnotes, "balance_table.xlsx")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table_subset <- final_table  %>%
select(-starts_with("Local Control"), `Control vs Local Control`
)
final_table_subset %>%
kable(format = "html", escape = FALSE, caption = "Baseline Balance Table") %>%
footnote(
general = "Reported statistics are regression coefficients, with p-values shown in parentheses. Standard errors are clustered at the village level. P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01).",
symbol = c(
"Binary variables were derived from Likert scale responses based on their distribution.",
"Responses marked as 'I Don't Know' (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("final_table_subset.html")
#write_xlsx(final_table_subset, "balance_table_subset.xlsx")
summary_table %>%
kable(format = "html", escape = FALSE, caption = "Baseline Summary Statistics") %>%
footnote(
general = "Table presents mean values, with standard deviations in parentheses.",
symbol = c(
"Binary variables were created from Likert scale responses based on their distribution.",
"'I Don't Know' responses (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("baseline_summary_stats.html")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
#Create table with footnotes using kableExtra
summary_table %>%
kable(format = "html", escape = FALSE, caption = "Baseline Summary Statistics") %>%
footnote(
general = "Table presents mean values, with standard deviations in parentheses.",
symbol = c(
"Binary variables were created from Likert scale responses based on their distribution.",
"'I Don't Know' responses (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("baseline_summary_stats.html")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table_subset <- final_table  %>%
select(-starts_with("Local Control"), -`Control vs Local Control`
)
final_table_subset %>%
kable(format = "html", escape = FALSE, caption = "Baseline Balance Table") %>%
footnote(
general = "Reported statistics are regression coefficients, with p-values shown in parentheses. Standard errors are clustered at the village level. P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01).",
symbol = c(
"Binary variables were derived from Likert scale responses based on their distribution.",
"Responses marked as 'I Don't Know' (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("balance_table_subset.html")
#write_xlsx(final_table_subset, "balance_table_subset.xlsx")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table_subset <- final_table  %>%
select(-starts_with("Local Control"), -`Control vs Local Control`
)
final_table_subset %>%
kable(format = "html", escape = FALSE, caption = "Baseline Balance Table") %>%
footnote(
general = "Reported statistics are regression coefficients, with p-values shown in parentheses. Standard errors are clustered at the village level. P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01).",
symbol = c(
"Binary variables were derived from Likert scale responses based on their distribution.",
"Responses marked as 'I Don't Know' (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("_balance_table_subset.html")
#write_xlsx(final_table_subset, "balance_table_subset.xlsx")
# Adding a single categorical variable for household training categories - this is for computing summary stats since I'm keeping the trained_hh variable
summary_df <- balance_df %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control"
)
) %>% select(-group)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data_PAP.dta")
balance_df <- read_dta(file_path_balance_tables_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data_PAP.dta")
balance_df <- read_dta(file_path_balance_tables_df)
balance_df
# Adding a single categorical variable for household training categories - this is for computing summary stats since I'm keeping the trained_hh variable
summary_df <- balance_df %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control"
)
) %>% select(-group)
long_data_sum <- summary_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
long_data_sum <- long_data_sum %>%
rename(group = treatment_group)
# Adding a single categorical variable for household training categories - this is for running regressions to avoid multicollinearity with trained_hh
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group, ensuring "Local Control" is prioritized
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control",  # Moved to the top
group %in% c("3A", "3B") ~ "Treatment3"
)
) %>% select(-group, -trained_hh)
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
long_data <- long_data %>%
rename(group = treatment_group)
view(long_data)
compute_summary_stats <- function(df) {
df %>%
group_by(group, variable) %>%
summarise(
mean_value = round(mean(value, na.rm = TRUE), 2),
sd_value = round(sd(value, na.rm = TRUE), 2),
.groups = "drop"  # Prevents group structure from persisting
) %>%
pivot_longer(cols = c(mean_value, sd_value), names_to = "stat_type", values_to = "stat_value") %>%
mutate(stat_type = ifelse(stat_type == "mean_value", "Mean", "SD")) %>%
pivot_wider(names_from = group, values_from = stat_value) %>%
arrange(variable, stat_type) %>%
# This ensures the 'variable' and 'stat_type' columns come first
select(variable, stat_type, everything()) %>%
# Explicitly ensure 'variable' is ordered as it appears in the original data
arrange(match(variable, unique(df$variable)))
}
summary_table <- compute_summary_stats(long_data_sum)
# View output
print(summary_table)
# index2 <- which(summary_table$variable == "hh_12_1_")
#   summary_table <- add_row(summary_table, variable = "hh_12", .before = index2)
# Add "hh_13_1_" above "hh_12"
# index3 <- which(summary_table$variable == "hh_13_01")
#   summary_table <- add_row(summary_table, variable = "hh_13", .before = index3)
# index5 <- which(summary_table$variable == "species_1")
#   final_summary_tabletable <- add_row(summary_table, variable = "species", .before = index5)
summary_table <- summary_table %>%
mutate(
variable = ifelse(stat_type == "SD" & !is.na(stat_type), "", variable),  # Clear variable for SD rows
stat_type = ifelse(stat_type == "SD" & !is.na(stat_type), "", stat_type)  # Clear stat_type for SD rows
) %>%
mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%
mutate(across(everything(), as.character)) %>%  # Ensure all columns are character type
mutate(across(
Control:Treatment3,  # Apply only to numeric columns
~ ifelse(stat_type == "", paste0("(", trimws(.), ")"), .)  # Add parentheses for SD values
))
summary_table
summary_table <- summary_table %>%
mutate(Question = case_when(
variable == "hhid_village" ~ "Village ID",
variable == "hhid" ~ "Household ID",
variable == "trained_hh" ~ "Trained household",
variable == "hh_age_h" ~ "Household head age",
variable == "hh_education_level_bin_h" ~ "Indicator for household head with secondary education or higher (1=Yes, 0=No)",
variable == "hh_education_skills_5_h" ~ "Indicator that household head is literate (1=Yes, 0=No)",
variable == "hh_gender_h" ~ "Household head gender (1=Male, 0=Female)",
variable == "hh_numero" ~ "Household size",
variable == "hh_03_" ~ "Indicator for those who worked in domestic agricultural activities (1=Yes, 0=No) †",
variable == "hh_10_" ~ "Hours per week spent within 1 meter of surface water source",
variable == "hh_12_6_" ~ "Indicator for those who harvested aquatic vegetation, among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_16_" ~ "Hours spent producing, purchasing, or applying fertilizer",
variable == "hh_15_2" ~ "Indicator for making fertilizer (compost) among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_26_" ~ "Indicator if currently enrolled in formal school (1=Yes, 0=No, asked about children) †",
variable == "hh_27_" ~ "Indicator if attended non-formal school or training? (1=Yes, 0=No, asked about children) †",
variable == "hh_29_01" ~ "Indicator for primary level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_02" ~ "Indicator for secondary middle level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_03" ~ "Indicator for secondary higher level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_04" ~ "Indicator for upper secondary education (1=Yes, 0=No, asked about children)",
variable == "hh_31_bin" ~ "Indicator if student completed studies or moved to next class (1=Yes, 0=No, asked about children)",
variable == "hh_37_" ~ "Indicator if missed >1 consecutive week of school due to illness? (1=Yes, 0=No, asked about children) †",
variable == "hh_38_" ~ "Number of attended school days in the past week (asked about children)",
variable == "living_01_bin" ~ "Indicator for selected tap water as main drinking source (1=Yes, 0=No)",
variable == "game_A_total" ~ "Total paid for Game A (CFA)",
variable == "game_B_total" ~ "Total paid for Game B (CFA)",
variable == "TLU" ~ "Tropical livestock units",
variable == "agri_6_15" ~ "Number of cultivated plots",
variable == "agri_6_32_bin" ~ "Indicator if used any organic fertilizer (1=Yes, 0=No)",
variable == "agri_6_36_bin" ~ "Indicator if used any inorganic/chemical fertilizer (1=Yes, 0=No)",
variable == "total_land_ha" ~ "Total land cultivated (hectares)",
variable == "agri_6_34_comp_any" ~ "Used any compost on any parcel (1=Yes, 0=No) †",
variable == "agri_income_01" ~ "Indicator if engaged in paid agricultural work in last 12 months (1=Yes, 0=No) †",
variable == "agri_income_05" ~ "Amount received for agricultural work (FCFA)",
variable == "beliefs_01_bin" ~ "Probability of contracting bilharzia (1=Strongly agree/Agree) +",
variable == "beliefs_02_bin" ~ "Probability of household member contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_03_bin" ~ "Probability of a child contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_04_bin" ~ "Agree: Village land should belong to community (1=Yes, 0=No) +",
variable == "beliefs_05_bin" ~ "Agree: Village water sources should belong to community (1=Yes, 0=No) +",
variable == "beliefs_06_bin" ~ "Agree: Right to products from own land (1=Yes, 0=No) +",
variable == "beliefs_07_bin" ~ "Agree: Right to products from community land worked on (1=Yes, 0=No) +",
variable == "beliefs_08_bin" ~ "Agree: Right to products from community water sources fished in (1=Yes, 0=No) +",
variable == "beliefs_09_bin" ~ "Agree: Right to products from community water sources harvested from (1=Yes, 0=No) +",
variable == "health_5_3_bin" ~ "Indicator for bilharzia or diarrhea in the past 12 months (1=Yes, 0=No, among those reporting illness)",
variable == "health_5_6_" ~ "Indicator for Diagnosed with schistosomiasis (1=Yes, 0=No) †",
variable == "num_water_access_points" ~ "Number of village water access points",
variable == "q_51" ~ "Distance to nearest healthcare center (km) [village level]",
variable == "target_village" ~ "Indicator if auction village (1=Yes, 0=No)",
TRUE ~ variable  # Default case
))
summary_table <- summary_table %>% select(Question, everything()) %>%
select(-"stat_type")  %>%
rename(Variable = variable,
`Private Treatment` = Treatment1,
`Public Treatment` = Treatment2,
`Private and Public Treatment` = Treatment3)
summary_table
#%>%   filter(variable != "target_village")
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
#Create table with footnotes using kableExtra
summary_table %>%
kable(format = "html", escape = FALSE, caption = "Baseline Summary Statistics") %>%
footnote(
general = "Table presents mean values, with standard deviations in parentheses.",
symbol = c(
"Binary variables were created from Likert scale responses based on their distribution.",
"'I Don't Know' responses (coded as 2) have been recoded as missing values."),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("_baseline_summary_statsV2.html")
# setwd("C:/Users/km978/Downloads/SenegalGIT/NSF-Senegal/Latex_Output/Balance_Table")
#
# summary_table %>%
#   kable(format = "latex", booktabs = TRUE, escape = FALSE, caption = "Baseline Summary Statistics") %>%
#   footnote(
#     general = "Table presents mean values, with standard deviations in parentheses.",
#     symbol = c(
#       "Binary variables were created from Likert scale responses based on their distribution.",
#       "'I Don't Know' responses (coded as 2) have been recoded as missing values."
#     ),
#     symbol_manual = c("+", "†")  # Custom symbols instead of default numbering
#   ) %>%
#   save_kable("SS_balance_tableV3.tex")
#Create table with footnotes for excel spreadsheet
# Excel spreadsheet
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
# Manually add footnotes as a single row
footnotes <- data.frame(
Variable = "Footnotes:",
Mean = "Table presents mean values, with standard deviations in parentheses.",
SD = "+ Binary variables were created from Likert scale responses based on their distribution.",
Other = "† 'I Don't Know' responses (coded as 2) have been recoded as missing values."
)
# Ensure all columns are character type to avoid coercion issues
summary_table <- summary_table %>%
mutate(across(everything(), as.character))
# Bind footnotes to the summary table
summary_table_with_footnotes <- bind_rows(summary_table, footnotes)
# Save to Excel
write_xlsx(summary_table_with_footnotes, "_baseline_summary_statsV2.xlsx")
long_data
# Load required library
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulating data with 100 households
hhid_village <- rep(paste0(rep(c("010A", "020B", "030C"), each = 100), rep(1:100, times = 3)), each = 5)
hhid <- rep(paste0("hh_", 1:100), each = 5)
group <- rep(c("Control", "Treatment1", "Treatment2"), times = 100)
variable <- c("hh_age_h", "hh_education_level_bin_h", "hh_education_skills_5_h", "hh_gender_h", "hh_numero")
# Simulate random values for the variables
value <- runif(length(hhid_village) * length(variable))
fake_data <- tibble(
hhid_village = hhid_village,
hhid = hhid,
group = group,
variable = rep(variable, times = length(hhid_village)/5),
value = value
)
# Load required library
library(tidyverse)
# Set seed for reproducibility
set.seed(123)
# Simulate 300 households, with 5 rows per household (for 5 variables)
n_households <- 100
hhid_village <- rep(paste0(rep(c("010A", "020B", "030C"), each = n_households), rep(1:n_households, times = 3)), each = 5)
hhid <- rep(paste0("hh_", 1:n_households), each = 15)  # 100 households, 3 groups, 5 variables per group
group <- rep(c("Control", "Treatment1", "Treatment2"), each = 5*n_households)
variable <- rep(c("hh_age_h", "hh_education_level_bin_h", "hh_education_skills_5_h", "hh_gender_h", "hh_numero"), times = 3*n_households)
# Simulate random values for the variables
value <- runif(length(hhid_village))
# Create the dataframe
fake_data <- tibble(
hhid_village = hhid_village,
hhid = hhid,
group = group,
variable = variable,
value = value
)
# View a snippet of the data
head(fake_data)
# Prepare data: create outcome variables (1 for treatment arm, 0 otherwise)
fake_data$y_treatment1 <- ifelse(fake_data$group == "Treatment1", 1, 0)
fake_data$y_treatment2 <- ifelse(fake_data$group == "Treatment2", 1, 0)
fake_data$y_control <- ifelse(fake_data$group == "Control", 1, 0)
# Run multinomial logistic regression (with control as baseline)
model <- multinom(cbind(y_treatment1, y_treatment2, y_control) ~ value + variable, data = fake_data)
# Load necessary package for multinomial logistic regression
library(nnet)
# Prepare data: create outcome variables (1 for treatment arm, 0 otherwise)
fake_data$y_treatment1 <- ifelse(fake_data$group == "Treatment1", 1, 0)
fake_data$y_treatment2 <- ifelse(fake_data$group == "Treatment2", 1, 0)
fake_data$y_control <- ifelse(fake_data$group == "Control", 1, 0)
# Run multinomial logistic regression (with control as baseline)
model <- multinom(cbind(y_treatment1, y_treatment2, y_control) ~ value + variable, data = fake_data)
# View model summary
summary(model)
# Perform likelihood ratio tests for the joint null hypothesis
lr_test <- lrtest(model)
summary(lr_test)
# Extract coefficients and p-values
model_summary <- summary(model)$coefficients
model_p_values <- summary(model)$z
# Combine results into a tidy table
regression_results <- tibble(
variable = rownames(model_summary),
coef_treatment1 = model_summary[,1],
coef_treatment2 = model_summary[,2],
coef_control = model_summary[,3],
p_treatment1 = model_p_values[,1],
p_treatment2 = model_p_values[,2],
p_control = model_p_values[,3]
)
# View regression results
regression_results
