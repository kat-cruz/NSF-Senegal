projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
#survey_questions <- read_csv(file.path(proj$p1, "Baseline_Survey_Questions.csv"))
#balance_df
balance_df
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
#view(balance_df)
# Ensure 'group' is character to avoid conflicts
# balance_df <- balance_df %>%
#   mutate(group = as.character(group))
# Reshape the data
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
#view(long_data)
# View the transformed dat
###################### bring in survey questions to merge ###################################################
long_data <- long_data %>%
rename(group = treatment_group)
long_data
# long_data <- merge(long_data, survey_questions, by = "variable")
#
# view(long_data)
# survey_questions
# Adding indicator variables for household training categories
# balance_df <- balance_df %>%
#   mutate(
#     # Extract the two middle characters (e.g., 2A) from hhid
#     group = str_sub(hhid, 3, 4),
#
#     # Add indicator variables based on the group value
#     control = if_else(group %in% c("0A", "0B"), 1, 0),
#     treatment1 = if_else(group %in% c("1A", "1B"), 1, 0), #public health trained
#     treatment2 = if_else(group %in% c("2A", "2B"), 1, 0), # private benefits trained
#     treatment3 = if_else(group %in% c("3A", "3B"), 1, 0) # public_and_private_trained
#   ) #%>%
#   # Drop the 'group' column if it's not needed
#   #select(-group)
#
# view(balance_df)
# Adding indicator variables for household training categories
# balance_df <- balance_df %>%
#   mutate(
#     # Extract the two middle characters (e.g., 2A) from hhid
#     group = str_sub(hhid, 3, 4),
#
#     # Add indicator variables based on the group value
#     control = if_else(group %in% c("0A", "0B"), 1, 0),
#     public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
#     private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
#     public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
#   ) %>%
#   # Drop the 'group' column if it's not needed
#   select(-group)
#
# view(balance_df)
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
###issue with rounding - need to first change into long format with everythingas doubles then stack pvalues, THEN change to characters to add parenthesis
vars_to_test
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
regression_results <- run_regressions(long_data, 'group', 'hhid_village', vars_to_test)
#remotes::install_github("kwb-r/kwb.utils")
#options(repos = c(
#  kwbr = 'https://kwb-r.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
# Download and install kwb.utils in R
#install.packages('kwb.utils')
# install.packages(officer)
# install.packages(r2rtf)
# install.packages(dplyr)
# install.packages(ggplot2)
# install.packages(kwb.utils)
# install.packages(haven)
# install.packages(data.table)
# install.packages(rtf)
# install.packages(tidyverse)
# install.packages(estimatr)
# install.packages(broom)
#install.packages(reshape2)
# install.packages("cobalt")
# install.packages("RCT")
#install.packages("purrr")
#library(reshape2)
#library(officer)
#library(r2rtf)
library(dplyr)
library(readr)
#library(ggplot2)
#library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
library(kableExtra)
#library(RCT)
#library(cobalt)
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
###issue with rounding - need to first change into long format with everythingas doubles then stack pvalues, THEN change to characters to add parenthesis
vars_to_test
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
regression_results <- run_regressions(long_data, 'group', 'hhid_village', vars_to_test)
#remotes::install_github("kwb-r/kwb.utils")
#options(repos = c(
#  kwbr = 'https://kwb-r.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
# Download and install kwb.utils in R
#install.packages('kwb.utils')
# install.packages(officer)
# install.packages(r2rtf)
# install.packages(dplyr)
# install.packages(ggplot2)
# install.packages(kwb.utils)
# install.packages(haven)
# install.packages(data.table)
# install.packages(rtf)
# install.packages(tidyverse)
# install.packages(estimatr)
# install.packages(broom)
#install.packages(reshape2)
# install.packages("cobalt")
# install.packages("RCT")
#install.packages("purrr")
#library(reshape2)
#library(officer)
#library(r2rtf)
library(dplyr)
library(readr)
#library(ggplot2)
#library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
library(kableExtra)
library(sandwich)
#library(RCT)
#library(cobalt)
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
###issue with rounding - need to first change into long format with everythingas doubles then stack pvalues, THEN change to characters to add parenthesis
vars_to_test
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
regression_results <- run_regressions(long_data, 'group', 'hhid_village', vars_to_test)
#remotes::install_github("kwb-r/kwb.utils")
#options(repos = c(
#  kwbr = 'https://kwb-r.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
# Download and install kwb.utils in R
#install.packages('kwb.utils')
# install.packages(officer)
# install.packages(r2rtf)
# install.packages(dplyr)
# install.packages(ggplot2)
# install.packages(kwb.utils)
# install.packages(haven)
# install.packages(data.table)
# install.packages(rtf)
# install.packages(tidyverse)
# install.packages(estimatr)
# install.packages(broom)
#install.packages(reshape2)
# install.packages("cobalt")
# install.packages("RCT")
#install.packages("purrr")
#library(reshape2)
#library(officer)
#library(r2rtf)
library(dplyr)
library(readr)
#library(ggplot2)
#library(kwb.utils)
library(haven)
library(data.table)
#library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
library(kableExtra)
library(sandwich)
library(lmtest)
#library(cobalt)
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
###issue with rounding - need to first change into long format with everythingas doubles then stack pvalues, THEN change to characters to add parenthesis
vars_to_test
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
regression_results <- run_regressions(long_data, 'group', 'hhid_village', vars_to_test)
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
###issue with rounding - need to first change into long format with everythingas doubles then stack pvalues, THEN change to characters to add parenthesis
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
regression_results <- run_regressions(long_data, 'group', 'hhid_village', vars_to_test)
vars_to_test
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
#survey_questions <- read_csv(file.path(proj$p1, "Baseline_Survey_Questions.csv"))
#balance_df
balance_df
balance_df
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
#view(balance_df)
# Ensure 'group' is character to avoid conflicts
# balance_df <- balance_df %>%
#   mutate(group = as.character(group))
# Reshape the data
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
#view(long_data)
# View the transformed dat
###################### bring in survey questions to merge ###################################################
long_data <- long_data %>%
rename(group = treatment_group)
long_data
# long_data <- merge(long_data, survey_questions, by = "variable")
#
# view(long_data)
# survey_questions
# Adding indicator variables for household training categories
# balance_df <- balance_df %>%
#   mutate(
#     # Extract the two middle characters (e.g., 2A) from hhid
#     group = str_sub(hhid, 3, 4),
#
#     # Add indicator variables based on the group value
#     control = if_else(group %in% c("0A", "0B"), 1, 0),
#     treatment1 = if_else(group %in% c("1A", "1B"), 1, 0), #public health trained
#     treatment2 = if_else(group %in% c("2A", "2B"), 1, 0), # private benefits trained
#     treatment3 = if_else(group %in% c("3A", "3B"), 1, 0) # public_and_private_trained
#   ) #%>%
#   # Drop the 'group' column if it's not needed
#   #select(-group)
#
# view(balance_df)
# Adding indicator variables for household training categories
# balance_df <- balance_df %>%
#   mutate(
#     # Extract the two middle characters (e.g., 2A) from hhid
#     group = str_sub(hhid, 3, 4),
#
#     # Add indicator variables based on the group value
#     control = if_else(group %in% c("0A", "0B"), 1, 0),
#     public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
#     private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
#     public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
#   ) %>%
#   # Drop the 'group' column if it's not needed
#   select(-group)
#
# view(balance_df)
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
library(dplyr)
library(readr)
library(tidyr)
#library(ggplot2)
#library(kwb.utils)
library(haven)
library(data.table)
#library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
library(kableExtra)
library(sandwich)
library(lmtest)
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test
regression_results <- run_regressions(long_data, 'group', 'hhid_village', vars_to_test)
