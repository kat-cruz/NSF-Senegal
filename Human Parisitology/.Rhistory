p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
str(matched_only_df$sm_egg_count)
table(matched_only_df$sm_egg_count)
summary(matched_only_df$sm_egg_count)
# var_names <- c("health_5_3_2_", "health_5_4_", "health_5_5_", "health_5_6_", "health_5_8_", "health_5_9_", "hh_gender_", "hh_ethnicity_", "hh_12_1_", "hh_12_2_", "hh_12_3_",  "hh_12_4_", "hh_12_5_", "hh_12_6_", "hh_12_7_", "hh_12_8_", "hh_31_", "hh_33_", "hh_37_", "living_01", "living_02", "living_04", "wealthindex")
#
# matched_only_df_summary <- matched_only_df %>%
#    dplyr::select(all_of(var_names))
#Categorical function
# Function to calculate summary statistics for a single categorical vector
categ_func_l <- function(value_l) {
# N = Total number of non-empty, non-NA observations (including -9s but excluding true NAs/empty cells)
N <- sum(!is.na(value_l) & value_l != "")
# Remove NAs and invalid values (-9 in this example)
valid_value_l <- value_l[!is.na(value_l) & value_l != -9]
# Calculate frequency and proportion for valid responses
freq_table_l <- table(valid_value_l)
proportions_l <- round(freq_table_l / length(valid_value_l), 2)
# Calculate the proportion of -9s and NAs
prop_na_l <- round(sum(value_l == -9, na.rm = TRUE) / N, 2)
# Create a data frame with the summary
categorical_data_l <- data.frame(
Value = names(freq_table_l),
N = N,  # Total number of observations
Frequency = as.vector(freq_table_l),  # Frequency of valid responses
Proportion = as.vector(proportions_l),  # Proportion of valid responses
prop_na = prop_na_l  # Proportion of -9s/NAs
)
return(categorical_data_l)
}
# Function to summarize multiple categorical variables by prefix
categ_summary_l <- function(data_l, prefixes_l) {
summaries_l <- lapply(prefixes_l, function(prefix_l) {
variable_data_l <- data_l %>%
select(starts_with(prefix_l))
# Pull the 'value' column and pass to categ_func_l
value_l <- variable_data_l[[1]]
summary_categ_l <- categ_func_l(value_l)
summary_categ_l$Variable_l <- prefix_l  # Assign the prefix as the variable name
return(summary_categ_l)
})
categ_sum_set_l <- bind_rows(summaries_l)
return(categ_sum_set_l)
}
# Function to calculate summary statistics for a single vector (variable)
binary_func_l <- function(value) {
# Calculate summary statistics for 0s and 1s
binary_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),
mean = round(mean(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
sd = round(sd(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2)
)
return(binary_stats_l)
}
binary_summary_l <- function(baseline_data, prefixes) {
# Loop over each prefix
summaries_binary_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
selected_data <- baseline_data %>%
select(starts_with(prefix))
# Pull the column values and pass to binary_func_l
value <- selected_data[[1]]
summary_stats <- binary_func_l(value)
# Add the prefix (variable name) to the summary
summary_stats$variable <- prefix
return(summary_stats)
})
binary_sum_set_l <- bind_rows(summaries_binary_l)
return(binary_sum_set_l)
}
# Function to calculate summary statistics for a single numeric vector
numerical_summary_func_l <- function(value) {
# Calculate summary statistics for numeric variables
numerical_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),
min = round(min(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
mean = round(mean(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
#max = round(max(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
max = sprintf("%.2f", max(ifelse(value == -9, NA, value), na.rm = TRUE),2),
sd = round(sd(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2)
)
return(numerical_stats_l)
}
# Function to summarize multiple sets of numeric variables by prefix
numerical_summary_l <- function(baseline_data, prefixes) {
# Loop over each prefix
summaries_numerical_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
numerical_data_l <- baseline_data %>%
select(starts_with(prefix))
# Pull the column values and pass to numerical_summary_func_l
value <- numerical_data_l[[1]]
numerical_summary_stats <- numerical_summary_func_l(value)
# Add the prefix (variable name) to the summary
numerical_summary_stats$variable <- prefix
return(numerical_summary_stats)
})
# Combine the summaries into a single data frame
numerical_sum_set_l <- bind_rows(summaries_numerical_l)
return(numerical_sum_set_l)
}
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/NSF-Senegal/Latex"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/NSF-Senegal/Latex"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
prefixes_numerical <- c("wealthindex", "health_5_4_", "hh_age_")
output_numerical <- numerical_summary_l(matched_only_df, prefixes_numerical)
output_numerical_gt <- gt(output_numerical)
output_numerical_gt <- output_numerical_gt %>%
tab_header(
title = "Numerical Stats"
)
gtsave(output_numerical_gt, "output_numerical_clean_table.tex")
view(matched_only_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
view(matched_only_df)
#install.packages("ggmosaic")
#install.packages("vcd")
#install.packages("stargazer")
#install.packages("MASS")
#install.packages("pscl")
#install.packages("sandwich")
#install.packages("gt")
library(gt)
library(vcd)
library(ggmosaic)
library(officer)
library(r2rtf)
library(dplyr)
library(ggplot2)
library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
#library(MASS)
library(stats)
library(stargazer)
library(pscl)
library(sandwich)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
view(matched_only_df$difftime)
view(matched_only_df)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / difftime)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
view(matched_only_df)
class(matched_only_df$Humanwatercontact)
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / difftime)
class(matched_only_df$difftime)
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
view(matched_only_df)
view(matched_only_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
view(matched_only_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
view(matched_only_df)
# Function to calculate summary statistics for a single categorical vector
categ_func_l <- function(value_l) {
# N = Total number of non-empty, non-NA observations (including -9s but excluding true NAs/empty cells)
N <- sum(!is.na(value_l) & value_l != "")
# Remove NAs and invalid values (-9 in this example)
valid_value_l <- value_l[!is.na(value_l) & value_l != -9]
# Calculate frequency and proportion for valid responses
freq_table_l <- table(valid_value_l)
proportions_l <- round(freq_table_l / length(valid_value_l), 2)
# Calculate the proportion of -9s and NAs
prop_na_l <- round(sum(value_l == -9, na.rm = TRUE) / N, 2)
# Create a data frame with the summary
categorical_data_l <- data.frame(
Value = names(freq_table_l),
N = N,  # Total number of observations
Frequency = as.vector(freq_table_l),  # Frequency of valid responses
Proportion = as.vector(proportions_l),  # Proportion of valid responses
prop_na = prop_na_l  # Proportion of -9s/NAs
)
return(categorical_data_l)
}
# Function to summarize multiple categorical variables by prefix
categ_summary_l <- function(data_l, prefixes_l) {
summaries_l <- lapply(prefixes_l, function(prefix_l) {
variable_data_l <- data_l %>%
select(starts_with(prefix_l))
# Pull the 'value' column and pass to categ_func_l
value_l <- variable_data_l[[1]]
summary_categ_l <- categ_func_l(value_l)
summary_categ_l$Variable_l <- prefix_l  # Assign the prefix as the variable name
return(summary_categ_l)
})
categ_sum_set_l <- bind_rows(summaries_l)
return(categ_sum_set_l)
}
# Function to calculate summary statistics for a single vector (variable)
binary_func_l <- function(value) {
# Calculate summary statistics for 0s and 1s
binary_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),
mean = round(mean(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
sd = round(sd(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2)
)
return(binary_stats_l)
}
binary_summary_l <- function(baseline_data, prefixes) {
# Loop over each prefix
summaries_binary_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
selected_data <- baseline_data %>%
select(starts_with(prefix))
# Pull the column values and pass to binary_func_l
value <- selected_data[[1]]
summary_stats <- binary_func_l(value)
# Add the prefix (variable name) to the summary
summary_stats$variable <- prefix
return(summary_stats)
})
binary_sum_set_l <- bind_rows(summaries_binary_l)
return(binary_sum_set_l)
}
