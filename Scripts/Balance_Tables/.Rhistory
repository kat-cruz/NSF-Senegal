balance_test_df
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
# Ensure 'group' is character to avoid conflicts
balance_df <- balance_df %>%
mutate(group = as.character(group))
# Reshape the data
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
# Reshape the data
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
view(balance_df)
# Ensure 'group' is character to avoid conflicts
balance_df <- balance_df %>%
mutate(group = as.character(group))
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
# View the transformed data
view(long_data)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data
n <- 200  # Number of households
balance_test_df <- data.frame(
hhid = rep(1:n, each = 3),
group = rep(c("Control", "Treatment1", "Treatment2", "Treatment3"), n),
variable = rep(c("hh_08", "hh_09", "hh_10"), each = n),
value = c(rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3)
)
)
balance_test_df
balance_df <- balance_df %>%
rename(group = treatment_group)
vars_to_test <- setdiff(names(long_data), c("hhid", "group"))
summary_stats <- balance_df %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
long_data <- long_data %>%
rename(group = treatment_group)
# Define the list of variables to test
vars_to_test <- setdiff(names(long_data), c("hhid", "group"))
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
t_test_results <- run_t_tests(long_data, vars_to_test)
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
# Function to run t-tests and store results
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
vars_to_test <- setdiff(names(long_data), c("hhid", "group"))
# Run t-tests
t_test_results <- run_t_tests(long_data, vars_to_test)
balance_test_df
summary_stats <- balance_test_df %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
# Function to run t-tests and store results
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
balance_test_df
# Define the list of variables to test
vars_to_test <- c("hh_08", "hh_09", "hh_10")
# Run t-tests
t_test_results <- run_t_tests(balance_test_df, vars_to_test)
t_test_results
vars_to_test
vars_to_test <- setdiff(names(long_data), c("hhid", "group"))
vars_to_test
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
view(balance_df)
vars_to_test <- setdiff(names(long_data), c("hhid", "group"))
vars_to_test
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
#view(balance_df)
vars_to_test <- setdiff(names(long_data), c("hhid", "group"))
vars_to_test
vars_to_test <- setdiff(names(balance_df), c("hhid", "group"))
vars_to_test
vars_to_test <- setdiff(names(balance_df), c("hhid", "group"))
vars_to_test
t_test_results <- run_t_tests(long_data, vars_to_test)
vars_to_test <- setdiff(names(balance_df), c("hhid"))
vars_to_test
t_test_results <- run_t_tests(long_data, vars_to_test)
# Reshape the data
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
# View the transformed data
view(long_data)
long_data <- long_data %>%
rename(group = treatment_group)
long_data <- long_data %>%
rename(group = treatment_group)
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
#view(balance_df)
# Ensure 'group' is character to avoid conflicts
# balance_df <- balance_df %>%
#   mutate(group = as.character(group))
# Reshape the data
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
# View the transformed dat
long_data <- long_data %>%
rename(group = treatment_group)
long_data
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
# Function to run t-tests and store results
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
vars_to_test <- setdiff(names(balance_df), c("hhid"))
vars_to_test
t_test_results <- run_t_tests(long_data, vars_to_test)
# Generate synthetic data
n <- 200  # Number of households
balance_test_df <- data.frame(
hhid = rep(1:n, each = 3),
group = rep(c("Control", "Treatment1", "Treatment2", "Treatment3"), n),
variable = rep(c("hh_08", "hh_09", "hh_10"), each = n),
value = c(rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3)
)
)
balance_test_df
# Generate synthetic data
n <- 200  # Number of households
balance_test_df <- data.frame(
hhid = rep(1:n, each = 3),
group = rep(c("Control", "Treatment1", "Treatment2", "Treatment3"), n),
variable = rep(c("hh_08", "hh_09", "hh_10"), each = n),
value = c(rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3)
)
)
balance_test_df
unique(df$group)
# Function to run t-tests and store results
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Subset the data for the current variable
df_var <- df %>% filter(variable == var)
# Initialize storage for comparisons
results[[var]] <- list()
# Define all comparisons
comparisons <- list(
"Control vs Treatment1" = c("Control", "Treatment1"),
"Control vs Treatment2" = c("Control", "Treatment2"),
"Control vs Treatment3" = c("Control", "Treatment3"),
"Treatment1 vs Treatment2" = c("Treatment1", "Treatment2"),
"Treatment1 vs Treatment3" = c("Treatment1", "Treatment3"),
"Treatment2 vs Treatment3" = c("Treatment2", "Treatment3")
)
# Run t-tests
for (comp_name in names(comparisons)) {
groups <- comparisons[[comp_name]]
# Filter data for the two groups in the comparison
df_subset <- df_var %>% filter(group %in% groups)
# Run t-test without checking for missing groups
results[[var]][[comp_name]] <- t.test(value ~ group, data = df_subset)
}
}
return(results)
}
t_test_results <- run_t_tests(long_data, vars_to_test)
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
vars_to_test <- ("species_3")
t_test_results <- run_t_tests(long_data, vars_to_test)
t_test_results
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
# Adding a single categorical variable for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group based on the extracted group value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1", # Public health trained
group %in% c("2A", "2B") ~ "Treatment2", # Private benefits trained
group %in% c("3A", "3B") ~ "Treatment3"  # Public and private trained
)
) %>%
select(-group)
# Reshape the data
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
view(long_data)
long_data <- long_data %>%
rename(group = treatment_group)
long_data
view(long_data)
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
# Function to run t-tests and store results
summary_stats
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
vars_to_test <- ("species_3")
vars_to_test
vars_to_test <- setdiff(names(balance_df), c("hhid"))
vars_to_test
t_test_results <- run_t_tests(long_data, vars_to_test)
vars_to_test <- setdiff(names(balance_df), c("hhid", "treatment_group"))
vars_to_test
t_test_results <- run_t_tests(long_data, vars_to_test)
t_test_results
tidy_results <- lapply(names(t_test_results), function(var) {
bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
tidy(t_test_results[[var]][[comp]]) %>%
mutate(variable = var, comparison = comp)
}))
}) %>%
bind_rows() %>%
select(variable, comparison, estimate, p.value) %>%
mutate(across(c(estimate, p.value), ~ round(.x, 2))) %>%
pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison", -"Control")
final_table
