# Store results in list
results_list[[var]] <- results
}
# Combine all results into one data frame
final_results <- bind_rows(results_list)
return(final_results)
}
# Run regressions for the baseline variables
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test_reg
regression_results <- run_all_regressions(balance_df, 'treatment_group', 'hhid_village', vars_to_test_reg)
# Print the combined results
print(regression_results)
# Fit model
set.seed(123)
# Create fake data for 100 observations
n <- 100
hhid_village <- sample(1:5, n, replace = TRUE)  # Cluster variable (village-level)
treatment_col <- sample(c("Control", "Local Control", "Treatment1", "Treatment2", "Treatment3"), n, replace = TRUE)
var <- rnorm(n)  # Outcome variable (e.g., hh_15_2)
# Create a data frame
data <- data.frame(
hhid_village = hhid_village,
treatment_col = treatment_col,
var = var
)
# View the first few rows of the data
head(data)
model <- lm(var ~ treatment_col, data = data)
model
# Clustered standard errors (clustered by hhid_village)
clustered_vcov <- vcovCL(model, cluster = data$hhid_village)
clustered_vcov
# Wald test for treatment effect
wald <- waldtest(model, vcov = clustered_vcov)
wald
# Extract the F-statistic and p-value
f_stat <- round(wald[2, "F"], 2)
f_stat
p_value <- round(wald[2, "Pr(>F)"], 2)
p_value
# Output the results
data.frame(variable = var, f_statistic = f_stat, p_value = p_value)
run_f_tests <- function(data, treatment_col, vars_to_test, cluster_var = "hhid_village") {
results <- list()
for (var in vars_to_test) {
formula <- as.formula(paste(var, "~", treatment_col))
# Fit model
model <- lm(formula, data = data)
# Make sure the clustering variable matches model data (after NA removal)
model_data <- model.frame(model)
cluster_values <- data[[cluster_var]][as.numeric(rownames(model_data))]
# Clustered standard errors
clustered_vcov <- vcovCL(model, cluster = cluster_values, type = "HC1")
# F-test
f_test <- tryCatch({
wald <- waldtest(model, vcov = clustered_vcov)
f_stat <- round(wald[2, "F"], 2)
p_value <- round(wald[2, "Pr(>F)"], 2)
data.frame(variable = var, f_statistic = f_stat, p_value = p_value)
}, error = function(e) {
data.frame(variable = var, f_statistic = NA, p_value = NA)
})
results[[var]] <- f_test
}
bind_rows(results)
}
# vars_to_test_fstat <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
#
# f_test_results <- run_f_tests(balance_df, treatment_col = "treatment_group", vars_to_test = vars_to_test_fstat)
# print(f_test_results)
vars_to_test_fstat <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
f_test_results <- run_f_tests(
data = balance_df,
treatment_col = "treatment_group",
vars_to_test = vars_to_test_fstat,
cluster_var = "hhid_village"
)
f_test_results
subtable <- regression_results_qvals %>%
select(variable, control_mean, control_se) #%>%
# pivot_longer(cols = c(control_mean, control_se), names_to = "stat_type", values_to = "value") %>%
# mutate(stat_type = ifelse(stat_type == "control_mean", "Mean", "SD"))  # Rename for clarity
subtable <- subtable %>%
distinct(variable, control_mean, control_se, .keep_all = TRUE)
# Pivot the table to have variables as rows and comparisons as columns
final_table <- regression_results_qvals %>%
select(-control_mean,-control_se) %>%
rename(q = q_value)    %>%
pivot_wider(names_from = comparison, values_from = c(stat, p, q))
final_table
# Rearrange to stack t-stats and p-values in rows
final_table <- final_table %>%
pivot_longer(cols = -c(variable), names_to = 'comparison', values_to = 'value') %>%
separate(comparison, into = c('type', 'comparison'), sep = '_', extra = 'merge') %>%
pivot_wider(names_from = comparison, values_from = value)
final_table
# Merge F-statistics data into final_table
final_table <- final_table %>%
left_join(f_test_results, by = "variable")
final_table
final_table <- final_table %>%
left_join(subtable, by = "variable")
final_table
# final_table <- final_table %>%
#   # Ensure f-stat values remain unchanged except for p-values
#   mutate(across(starts_with("f_stat"), ~ ifelse(type == "p", as.character(p_value), as.character(.)))) %>%
#
#   # Format p-values with parentheses and add significance stars
#   mutate(across(everything(), ~ ifelse(
#     grepl("p", type),
#     paste0("(", trimws(.x), ifelse(as.numeric(.x) <= 0.01, "**", ifelse(as.numeric(.x) <= 0.05, "*", "")), ")"),
#     .x))) %>%
#
#   # Add brackets around q-values
#   mutate(across(everything(), ~ ifelse(
#     grepl("q", stat),  # If the stat column indicates q-values
#     paste0("[", trimws(.x), "]"),
#     .x))) %>%
#
#   # Replace character "NaNNA" values with "(NA)" for all columns except variable and type
#   mutate(across(-c(variable, type), ~ ifelse(. == "(NaNNA)", "(NA)", .)))
final_table <- final_table %>%
# Ensure f-stat values remain unchanged except for p-values
mutate(across(starts_with("f_stat"), ~ ifelse(type == "p", as.character(p_value), as.character(.))))
final_table
final_table <- final_table %>%
# Ensure f-stat values remain unchanged except for p-values
mutate(across(starts_with("control_mean"), ~ ifelse(type == "p", as.character(control_se), as.character(.))))
final_table
final_table <- final_table %>%
# Format p-values with parentheses and add significance stars
mutate(across(c(`Control vs Treatment1`, `Control vs Treatment2`, `Control vs Treatment3`, `Control vs Local Control`),
~ as.character(ifelse(
grepl("p", type),
paste0("(", trimws(.), ifelse(as.numeric(.) <= 0.01, "**", ifelse(as.numeric(.) <= 0.05, "*", "")), ")"),
.))))
# final_table <- final_table %>%
#   # Format p-values with parentheses and add significance stars
#   mutate(across(everything(), ~ as.character(ifelse(
#     grepl("p", type),
#     paste0("(", trimws(.x), ifelse(as.numeric(.x) <= 0.01, "**", ifelse(as.numeric(.x) <= 0.05, "*", "")), ")"),
#     .x))))
final_table
final_table <- final_table %>%
# Add brackets around numeric q-values in each cell
mutate(across(c(`Control vs Treatment1`, `Control vs Treatment2`, `Control vs Treatment3`, `Control vs Local Control`),
~ as.character(ifelse(
grepl("q", type),
paste0("[", trimws(.x), ifelse(as.numeric(.x) <= 0.01, "**", ifelse(as.numeric(.x) <= 0.05, "*", "")), "]"),
.x))))
# final_table <- final_table %>%
#   # Add brackets around numeric q-values in each cell
#   mutate(across(everything(), ~ as.character(ifelse(
#     grepl("q", type),
#     paste0("[", trimws(.x), ifelse(as.numeric(.x) <= 0.01, "**", ifelse(as.numeric(.x) <= 0.05, "*", "")), "]"),
#     .x))))
final_table
final_table <- final_table %>%
mutate(
variable = if_else(type == "p" & !is.na(type), "", variable),  # Clear variable when type == "(p)" and type is not NA
control_mean = if_else(type == "p" & !is.na(type), "", control_mean),
type = if_else(type == "p" & !is.na(type), "", as.character(type)),  # Clear type when type == "(p)", leave other values unchanged
f_statistic = if_else(type == "q" & !is.na(type), "", f_statistic),
variable = if_else(type == "q" & !is.na(type), "", variable),  # Clear variable when type == "(p)" and type is not NA
type = if_else(type == "q" & !is.na(type), "", as.character(type))  # Clear type when type == "(p)", leave other values unchanged
) %>%
select(-p_value, -control_se)  # Remove the 'type' column after modification
final_table
final_table <- final_table %>%
mutate(across(everything(),
~ ifelse(. %in% c("[NaNNA]", "(NaNNA)"), NA, .)))
# Print the modified final_table
final_table
final_table <- final_table %>%
mutate(Question = case_when(
variable == "hhid_village" ~ "Village ID",
variable == "hhid" ~ "Household ID",
variable == "trained_hh" ~ "Trained household",
variable == "hh_age_h" ~ "Household head age",
variable == "hh_education_level_bin_h" ~ "Indicator for household head with secondary education or higher (1=Yes, 0=No)",
variable == "hh_education_skills_5_h" ~ "Indicator that household head is literate (1=Yes, 0=No)",
variable == "hh_gender_h" ~ "Household head gender (1=Male, 0=Female)",
variable == "hh_numero" ~ "Household size",
variable == "hh_03_" ~ "Indicator for those who worked in domestic agricultural activities in the past 12 months (1=Yes, 0=No) †",
variable == "hh_10_" ~ "Average weekly hours spent within 1 meter of surface water source, in the past 12 months.",
variable == "hh_12_6_" ~ "Indicator for those who harvested aquatic vegetation, among those who spent time near a water source in the past 12 months. (1=Yes, 0=No)",
variable == "hh_16_" ~ "Average weekly hours spent producing, purchasing, or applying fertilizer in the past 12 months (among those near a water source).",
variable == "hh_15_2" ~ "Indicator for making fertilizer (compost) among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_26_" ~ "Indicator if currently enrolled in formal school (1=Yes, 0=No, asked about children) †",
variable == "hh_27_" ~ "Indicator if attended non-formal school or training? (1=Yes, 0=No, asked about children) †",
variable == "hh_29_01" ~ "Indicator for primary level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_02" ~ "Indicator for secondary middle level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_03" ~ "Indicator for secondary higher level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_04" ~ "Indicator for upper secondary education (1=Yes, 0=No, asked about children)",
variable == "hh_31_bin" ~ "Indicator if student completed studies or moved to next class for 2022/2023 (1=Yes, 0=No, asked about children)",
variable == "hh_37_" ~ "Indicator if missed >1 consecutive week of school due to illness in the past 12 months (1=Yes, 0=No, asked about children) †",
variable == "hh_38_" ~ "Number of attended school days in the past week (asked about children)",
variable == "living_01_bin" ~ "Indicator for selected tap water as main drinking source (1=Yes, 0=No)",
variable == "game_A_total" ~ "Total paid for Game A (CFA)",
variable == "game_B_total" ~ "Total paid for Game B (CFA)",
variable == "TLU" ~ "Tropical livestock units",
variable == "agri_6_15" ~ "Number of cultivated plots",
variable == "agri_6_32_bin" ~ "Indicator if used any organic fertilizer (1=Yes, 0=No)",
variable == "agri_6_36_bin" ~ "Indicator if used any inorganic/chemical fertilizer (1=Yes, 0=No)",
variable == "total_land_ha" ~ "Total land cultivated (hectares)",
variable == "agri_6_34_comp_any" ~ "Used any compost on any parcel (1=Yes, 0=No) †",
variable == "agri_income_01" ~ "Indicator if engaged in paid agricultural work in last 12 months (1=Yes, 0=No) †",
variable == "agri_income_05" ~ "Amount received for agricultural work (FCFA), among those who responded yes to working in agriculture",
variable == "beliefs_01_bin" ~ "Probability of contracting bilharzia (1=Strongly agree/Agree) +",
variable == "beliefs_02_bin" ~ "Probability of household member contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_03_bin" ~ "Probability of a child contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_04_bin" ~ "Agree: Village land should belong to community (1=Yes, 0=No) +",
variable == "beliefs_05_bin" ~ "Agree: Village water sources should belong to community (1=Yes, 0=No) +",
variable == "beliefs_06_bin" ~ "Agree: Right to products from own land (1=Yes, 0=No) +",
variable == "beliefs_07_bin" ~ "Agree: Right to products from community land worked on (1=Yes, 0=No) +",
variable == "beliefs_08_bin" ~ "Agree: Right to products from community water sources fished in (1=Yes, 0=No) +",
variable == "beliefs_09_bin" ~ "Agree: Right to products from community water sources harvested from (1=Yes, 0=No) +",
variable == "health_5_3_bin" ~ "Indicator for bilharzia or diarrhea in the past 12 months (1=Yes, 0=No, among those reporting illness)",
variable == "health_5_6_" ~ "Indicator for Diagnosed with schistosomiasis (1=Yes, 0=No) †",
variable == "num_water_access_points" ~ "Number of village water access points",
variable == "q_51" ~ "Distance to nearest healthcare center (km) [village level]",
variable == "target_village" ~ "Indicator if auction village (1=Yes, 0=No)",
TRUE ~ variable  # Default case
))
final_table
names(final_table)
final_table <- final_table %>%
select(Question, everything()) %>%
rename(Variable = variable,
`Control Mean` = control_mean,
`Private Treatment` = `Control vs Treatment1`,
`Public Treatment` = `Control vs Treatment2`,
`Public & Private Treatment` = `Control vs Treatment3`,
`Local Control` = `Control vs Local Control`,
`F-test` = f_statistic)
final_table
desired_column_order <- c(
"Control Mean",
"Local Control",
"Private Treatment",
"Public Treatment",
"Public & Private Treatment",
"F-test")
#   "Control vs Public Treatment",
#=============================================================================
# PAIR-WISE TEST NAMES HERE
#=============================================================================
# final_table <- final_table %>%
#   select(Question, everything()) %>%
#   rename(Variable = variable,
#          `Control vs Private Treatment` = `Control vs Treatment1`,
#           `Control vs Public Treatment` = `Control vs Treatment2`,
#           `Control vs Public & Private Treatment` = `Control vs Treatment3`,
#           `Private Treatment vs Public Treatment` = `Treatment1 vs Treatment2`,
#           `Private Treatment vs Public & Private Treatment` = `Treatment1 vs Treatment3`,
#           `Public Treatment vs Public & Private Treatment` = `Treatment2 vs Treatment3`,
#           `Local Control vs Public & Private Treatment` = `Treatment3 vs Local Control`,
#           `Local Control vs Private Treatment` = `Treatment2 vs Local Control`,
#           `Local Control vs Public Treatment` = `Treatment1 vs Local Control`,
#           `F-test` = f_statistic)
# Define the desired column order
# desired_column_order <- c(
#   "Control vs Private Treatment",
#   "Control vs Public Treatment",
#   "Control vs Local Control",
#   "Control vs Public & Private Treatment",
#   "Local Control vs Public Treatment",
#   "Local Control vs Private Treatment",
#   "Local Control vs Public & Private Treatment",
#   "Private Treatment vs Public Treatment",
#   "Private Treatment vs Public & Private Treatment",
#   "Public Treatment vs Public & Private Treatment",
#   "F-test"
# )
# Reorder the columns in final_table
final_table <- final_table %>%
select(Question, Variable, all_of(desired_column_order))  # Ensure 'variable' stays the first column
# Print the modified final_table
print(final_table)
final_table
run_all_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results_list <- list()  # Store results for all variables
for (var in vars_to_test) {
# Select relevant columns
subset <- data %>% select(all_of(var), all_of(treatment_col), all_of(village_col)) %>% na.omit()
# Run regression with Control as baseline
model <- lm(as.formula(paste(var, "~", treatment_col)), data = subset)
# Clustered standard errors at the village level
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
# Extract control mean (intercept) and SE
control_mean <- round(clustered_se[1, 1], 2)  # Intercept
control_se <- round(clustered_se[1, 2], 2)    # SE of the intercept
# Extract coefficients and p-values for treatment arms
num_treatments <- nrow(clustered_se) - 1  # Number of treatment arms
comparisons <- paste("Control vs", unique(data[[treatment_col]])[-1])  # Skip "Control"
# Get sample size (N)
n_obs <- model$nobs  # Number of observations used in the regression
results <- data.frame(
variable = var,
comparison = comparisons,
stat = round(clustered_se[2:(num_treatments + 1), 1], 2),  # Coefficients
p = round(clustered_se[2:(num_treatments + 1), 4], 3),  # P-values
control_mean = control_mean,  # Control group mean
control_se = control_se,  # Control group SE
N = n_obs  # Sample size
)
# Store results in list
results_list[[var]] <- results
}
# Combine all results into one data frame
final_results <- bind_rows(results_list)
return(final_results)
}
# Run regressions for the baseline variables
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
regression_results <- run_all_regressions(balance_df, 'treatment_group', 'hhid_village', vars_to_test_reg)
run_all_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results_list <- list()  # Store results for all variables
for (var in vars_to_test) {
# Select relevant columns and drop NAs
subset <- data %>% select(all_of(var), all_of(treatment_col), all_of(village_col)) %>% na.omit()
# Skip if not enough variation
if (nrow(subset) < 10 || length(unique(subset[[treatment_col]])) < 2) next
# Run regression with Control as baseline
model <- lm(as.formula(paste(var, "~", treatment_col)), data = subset)
# Clustered standard errors at the village level
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
# Get sample size (N)
n_obs <- model$df.residual + model$rank
# Extract control mean and SE (Intercept)
control_mean <- round(clustered_se[1, 1], 2)
control_se <- round(clustered_se[1, 2], 2)
# Get treatment coefficient rows (skip Intercept)
coef_names <- rownames(clustered_se)[-1]
stats <- clustered_se[-1, 1]
pvals <- clustered_se[-1, 4]
results <- data.frame(
variable = var,
comparison = coef_names,
stat = round(stats, 2),
p = round(pvals, 3),
control_mean = control_mean,
control_se = control_se,
N = n_obs,
row.names = NULL
)
results_list[[var]] <- results
}
# Combine all results into one data frame
final_results <- bind_rows(results_list)
return(final_results)
}
# Run regressions for the baseline variables
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test_reg
regression_results <- run_all_regressions(balance_df, 'treatment_group', 'hhid_village', vars_to_test_reg)
# Print the combined results
print(regression_results)
run_all_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results_list <- list()  # Store results for all variables
for (var in vars_to_test) {
# Select relevant columns
subset <- data %>% select(all_of(var), all_of(treatment_col), all_of(village_col))
# Run regression with Control as baseline
model <- lm(as.formula(paste(var, "~", treatment_col)), data = subset)
# Clustered standard errors at the village level
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
# Extract control mean (intercept) and SE
control_mean <- round(clustered_se[1, 1], 2)  # Intercept
control_se <- round(clustered_se[1, 2], 2)    # SE of the intercept
# Extract coefficients and p-values for treatment arms
num_treatments <- nrow(clustered_se) - 1  # Number of treatment arms
comparisons <- paste("Control vs", unique(data[[treatment_col]])[-1])  # Skip "Control"
results <- data.frame(
variable = var,
comparison = comparisons,
stat = round(clustered_se[2:(num_treatments + 1), 1], 2),  # Coefficients
p = round(clustered_se[2:(num_treatments + 1), 4], 3),  # P-values
control_mean = control_mean,  # Control group mean
control_se = control_se  # Control group SE
)
# Store results in list
results_list[[var]] <- results
}
# Combine all results into one data frame
final_results <- bind_rows(results_list)
return(final_results)
}
# Run regressions for the baseline variables
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test_reg
regression_results <- run_all_regressions(balance_df, 'treatment_group', 'hhid_village', vars_to_test_reg)
# Print the combined results
print(regression_results)
run_all_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results_list <- list()  # Store results for all variables
for (var in vars_to_test) {
# Select relevant columns and drop NAs
subset <- data %>% select(all_of(var), all_of(treatment_col), all_of(village_col)) %>% na.omit()
# Run regression and handle errors gracefully
result <- tryCatch({
model <- lm(as.formula(paste(var, "~", treatment_col)), data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
# Sample size (N)
n_obs <- model$df.residual + model$rank
# Intercept info
control_mean <- round(clustered_se[1, 1], 2)
control_se <- round(clustered_se[1, 2], 2)
# Coefficients (excluding intercept)
coef_names <- rownames(clustered_se)[-1]
stats <- clustered_se[-1, 1]
pvals <- clustered_se[-1, 4]
data.frame(
variable = var,
comparison = coef_names,
stat = round(stats, 2),
p = round(pvals, 3),
control_mean = control_mean,
control_se = control_se,
N = n_obs,
row.names = NULL
)
}, error = function(e) {
# Return NA row if regression fails
data.frame(
variable = var,
comparison = NA,
stat = NA,
p = NA,
control_mean = NA,
control_se = NA,
N = NA
)
})
results_list[[var]] <- result
}
# Combine all results into one data frame
final_results <- bind_rows(results_list)
return(final_results)
}
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test_reg
regression_results <- run_all_regressions(balance_df, 'treatment_group', 'hhid_village', vars_to_test_reg)
# Print the combined results
print(regression_results)
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test_reg
regression_results <- run_all_regressions(balance_df, 'treatment_group', 'hhid_village', vars_to_test_reg)
# Print the combined results
print(regression_results)
run_all_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results_list <- list()  # Store results for all variables
for (var in vars_to_test) {
# Select relevant columns and drop NAs
subset <- data %>% select(all_of(var), all_of(treatment_col), all_of(village_col)) %>% na.omit()
# Run regression and handle errors gracefully
result <- tryCatch({
model <- lm(as.formula(paste(var, "~", treatment_col)), data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
# Sample size (N)
n_obs <- model$df.residual + model$rank
# Intercept info
control_mean <- round(clustered_se[1, 1], 2)
control_se <- round(clustered_se[1, 2], 2)
# Coefficients (excluding intercept)
coef_names <- rownames(clustered_se)[-1]
stats <- clustered_se[-1, 1]
pvals <- clustered_se[-1, 4]
data.frame(
variable = var,
comparison = coef_names,
stat = round(stats, 2),
p = round(pvals, 3),
control_mean = control_mean,
control_se = control_se,
N = n_obs,
row.names = NULL
)
}, error = function(e) {
# Return NA row if regression fails
data.frame(
variable = var,
comparison = NA,
stat = NA,
p = NA,
control_mean = NA,
control_se = NA,
N = NA
)
})
results_list[[var]] <- result
}
# Combine all results into one data frame
final_results <- bind_rows(results_list)
return(final_results)
}
# Run regressions for the baseline variables
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test_reg
regression_results <- run_all_regressions(balance_df, 'treatment_group', 'hhid_village', vars_to_test_reg)
# Print the combined results
print(regression_results)
# Define a vector of required packages
packages <- c("clusterSEs", "mlogit", "writexl", "dplyr", "readr", "tidyr",
"haven", "data.table", "tidyverse", "estimatr", "broom", "kableExtra",
"sandwich", "lmtest", "stats", "nnet", "car", "aod", "clubSandwich")
# Install any missing packages
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)
# Load the required packages
lapply(packages, library, character.only = TRUE)
