un = TRUE,  # Display unweighted balance
pairwise = TRUE,  # Perform pairwise comparisons
disp.means = TRUE,  # Display means
disp.sd = TRUE,  # Display standard deviations
disp.p = TRUE  # Display p-values
)
balance_df
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Create a new variable 'treatment_group' based on the 'group' value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",  # Define control group
group %in% c("1A", "1B") ~ "Public Health Trained",  # Define public health trained group
group %in% c("2A", "2B") ~ "Private Benefits Trained",  # Define private benefits trained group
group %in% c("3A", "3B") ~ "Public and Private Trained",  # Define combined treatment group
TRUE ~ NA_character_  # Handle cases that don't fit any group
)
)
balance_df
# Run balance checking using bal.tab()
bal.tab(
balance_df[, vars_to_test],  # Specify variables you want to test for balance
treat = balance_df$treatment_group,  # Use the newly created treatment_group variable
un = TRUE,  # Display unweighted balance
pairwise = TRUE,  # Perform pairwise comparisons
disp.means = TRUE,  # Display means
disp.sd = TRUE,  # Display standard deviations
disp.p = TRUE  # Display p-values
)
bal.tab(
balance_df[, vars_to_test],  # Specify variables you want to test for balance
treat = balance_df$treatment_group,  # Use the newly created treatment_group variable
un = TRUE,  # Display unweighted balance
pairwise = TRUE,  # Perform pairwise comparisons
disp.means = TRUE,  # Display means
disp.sd = TRUE,  # Display standard deviations
disp.p = TRUE  # Display p-values
)
#remotes::install_github("kwb-r/kwb.utils")
#options(repos = c(
#  kwbr = 'https://kwb-r.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
# Download and install kwb.utils in R
#install.packages('kwb.utils')
# install.packages(officer)
# install.packages(r2rtf)
# install.packages(dplyr)
# install.packages(ggplot2)
# install.packages(kwb.utils)
# install.packages(haven)
# install.packages(data.table)
# install.packages(rtf)
# install.packages(tidyverse)
# install.packages(estimatr)
# install.packages(broom)
#install.packages(reshape2)
# install.packages("cobalt")
# install.packages("RCT")
#install.packages("purrr")
#library(reshape2)
library(officer)
library(r2rtf)
library(dplyr)
library(ggplot2)
library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
library(RCT)
library(cobalt)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Data_Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
#
# # List of variables to test
# vars_to_test <- setdiff(names(balance_df), c("hhid", "group", "control",
#                                              "public_health_trained",
#                                              "private_benefits_trained",
#                                              "public_and_private_trained"))
# # Define treatment arms
# treatment_arms <- c("public_health_trained", "private_benefits_trained", "public_and_private_trained")
#
# # Compute balance tables
# bal.tab(
#   balance_df[, vars_to_test],          # The covariates to check for balance
#   treat = balance_df$control,          # The treatment assignment (0 = control, 1 = treated)
#   data = balance_df,                   # The dataset
#   focal = 0,                            # Set the control group as the reference
#   pairwise = TRUE,                      # Perform pairwise comparisons among treatment groups
#   un = TRUE                             # Show unadjusted differences
# )
#
#
#
# balance_df$treatment_group <- if_else(balance_df$group %in% c("0A", "0B"), "Control",
#                                       if_else(balance_df$group %in% c("1A", "1B"), "Public Health Trained",
#                                               if_else(balance_df$group %in% c("2A", "2B"), "Private Benefits Trained",
#                                                       "Public and Private Trained")))
#
# bal.tab(
#   balance_df[, vars_to_test],  # Variables you want to test for balance
#   treat = balance_df$treatment_arms,  # New treatment variable with all arms
#   un = TRUE,  # Display unweighted balance
#   pairwise = TRUE,  # Make pairwise comparisons
#   disp.means = TRUE,  # Display means
#   disp.sd = TRUE,  # Display standard deviations
#   disp.p = TRUE  # Display p-values
# )
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Create a new variable 'treatment_group' based on the 'group' value
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",  # Define control group
group %in% c("1A", "1B") ~ "Public Health Trained",  # Define public health trained group
group %in% c("2A", "2B") ~ "Private Benefits Trained",  # Define private benefits trained group
group %in% c("3A", "3B") ~ "Public and Private Trained",  # Define combined treatment group
TRUE ~ NA_character_  # Handle cases that don't fit any group
)
)
balance_df
# Run balance checking using bal.tab()
bal.tab(
balance_df[, vars_to_test],  # Specify variables you want to test for balance
treat = balance_df$treatment_group,  # Use the newly created treatment_group variable
un = TRUE,  # Display unweighted balance
pairwise = TRUE,  # Perform pairwise comparisons
disp.means = TRUE,  # Display means
disp.sd = TRUE,  # Display standard deviations
disp.p = TRUE  # Display p-values
)
library(dplyr)
library(cobalt)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data
n <- 200  # Number of households
balance_df <- data.frame(
hhid = 1:n,
group = sample(c("Control", "Treatment1", "Treatment2", "Treatment3"), n, replace = TRUE),
hh_08 = rnorm(n, mean = 0.5, sd = 0.1),  # Example variable 1
hh_09 = rnorm(n, mean = 1.5, sd = 0.2),  # Example variable 2
hh_10 = rnorm(n, mean = 2.5, sd = 0.3)   # Example variable 3
)
# Function to compute balance tables and t-tests
balance_df <- balance_df %>%
mutate(
# Convert group to a factor
group = factor(group, levels = c("Control", "Treatment1", "Treatment2", "Treatment3"))
)
# Generate balance table and t-tests using bal.tab() from cobalt package
balance_table <- bal.tab(
balance_df[, c("hh_08", "hh_09", "hh_10")],  # Variables to check balance on
treat = balance_df$group,  # Treatment variable (group)
un = TRUE,  # Use unadjusted balance
pairwise = TRUE,  # Pairwise comparisons between groups
disp.means = TRUE,  # Display means
disp.sd = TRUE,  # Display SD
disp.p = TRUE  # Display p-values
)
# Print the balance table
print(balance_table)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data
n <- 200  # Number of households
balance_df <- data.frame(
hhid = 1:n,
group = sample(c("Control", "Treatment1", "Treatment2", "Treatment3"), n, replace = TRUE),
hh_08 = rnorm(n, mean = 0.5, sd = 0.1),  # Example variable 1
hh_09 = rnorm(n, mean = 1.5, sd = 0.2),  # Example variable 2
hh_10 = rnorm(n, mean = 2.5, sd = 0.3)   # Example variable 3
)
# Function to compute summary statistics by group (means and SDs)
compute_summary_stats <- function(df, vars) {
df %>%
select(c("group", vars)) %>%
gather(variable, value, -group) %>%
group_by(group, variable) %>%
summarise(mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n(), .groups = "drop")
}
# Function to run t-tests for pairwise comparisons
run_t_tests <- function(df, vars, control_group) {
t_test_results <- lapply(vars, function(var) {
# T-tests: control vs. each treatment arm
control_vs_treatment <- df %>%
filter(group %in% c("Control", "Treatment1")) %>%
t.test(value ~ group, data = .)
treatment_comparisons <- lapply(c("Treatment1", "Treatment2", "Treatment3"), function(treatment_group) {
df %>%
filter(group %in% c("Treatment1", treatment_group)) %>%
t.test(value ~ group, data = .)
})
# Return t-test results
list(
control_vs_treatment = control_vs_treatment,
treatment_comparisons = treatment_comparisons
)
})
return(t_test_results)
}
# Define the list of variables to test
vars_to_test <- c("hh_08", "hh_09", "hh_10")
# Compute summary statistics for all variables
summary_stats <- compute_summary_stats(balance_df, vars_to_test)
# Run t-tests for each variable
t_test_results <- run_t_tests(balance_df, vars_to_test, control_group = "Control")
# Set seed for reproducibility
set.seed(123)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data
n <- 200  # Number of households
balance_df <- data.frame(
hhid = 1:n,
group = sample(c("Control", "Treatment1", "Treatment2", "Treatment3"), n, replace = TRUE),
hh_08 = rnorm(n, mean = 0.5, sd = 0.1),  # Example variable 1
hh_09 = rnorm(n, mean = 1.5, sd = 0.2),  # Example variable 2
hh_10 = rnorm(n, mean = 2.5, sd = 0.3)   # Example variable 3
)
# Function to compute summary statistics by group (means and SDs)
compute_summary_stats <- function(df, vars) {
df %>%
select(c("group", vars)) %>%
gather(variable, value, -group) %>%
group_by(group, variable) %>%
summarise(mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n(), .groups = "drop")
}
# Function to run t-tests for pairwise comparisons
run_t_tests <- function(df, vars, control_group) {
# Reshape data into long format for the t-tests
df_long <- df %>%
select(c("group", vars)) %>%
gather(variable, value, -group)
t_test_results <- lapply(vars, function(var) {
# T-tests: control vs. each treatment arm
control_vs_treatment <- df_long %>%
filter(group %in% c("Control", "Treatment1")) %>%
filter(variable == var) %>%
t.test(value ~ group)
treatment_comparisons <- lapply(c("Treatment1", "Treatment2", "Treatment3"), function(treatment_group) {
df_long %>%
filter(group %in% c("Treatment1", treatment_group)) %>%
filter(variable == var) %>%
t.test(value ~ group)
})
# Return t-test results
list(
control_vs_treatment = control_vs_treatment,
treatment_comparisons = treatment_comparisons
)
})
return(t_test_results)
}
# Define the list of variables to test
vars_to_test <- c("hh_08", "hh_09", "hh_10")
# Compute summary statistics for all variables
summary_stats <- compute_summary_stats(balance_df, vars_to_test)
# Run t-tests for each variable
t_test_results <- run_t_tests(balance_df, vars_to_test, control_group = "Control")
# Load necessary libraries
library(dplyr)
library(tidyr)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data (already in long format)
n <- 200  # Number of households
balance_df <- data.frame(
hhid = rep(1:n, each = 3),
group = rep(c("Control", "Treatment1", "Treatment2", "Treatment3"), n),
variable = rep(c("hh_08", "hh_09", "hh_10"), each = n),
value = c(rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3)
)
)
# Function to compute summary statistics by group (means and SDs)
compute_summary_stats <- function(df, vars) {
df %>%
filter(variable %in% vars) %>%
group_by(group, variable) %>%
summarise(mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n(), .groups = "drop")
}
# Function to run t-tests for pairwise comparisons
run_t_tests <- function(df, vars) {
t_test_results <- lapply(vars, function(var) {
# T-tests: Control vs. each treatment arm
control_vs_treatment <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
treatment_comparisons <- lapply(c("Treatment1", "Treatment2", "Treatment3"), function(treatment_group) {
t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", treatment_group), variable == var))
})
# Return t-test results
list(
control_vs_treatment = control_vs_treatment,
treatment_comparisons = treatment_comparisons
)
})
return(t_test_results)
}
# Define the list of variables to test
vars_to_test <- c("hh_08", "hh_09", "hh_10")
# Compute summary statistics for all variables
summary_stats <- compute_summary_stats(balance_df, vars_to_test)
# Run t-tests for each variable
t_test_results <- run_t_tests(balance_df, vars_to_test)
# Load necessary libraries
library(dplyr)
library(tidyr)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data (already in long format)
# Generate synthetic data (already in long format)
n <- 200  # Number of households
balance_df <- data.frame(
hhid = rep(1:n, each = 3),
group = rep(c("Control", "Treatment1", "Treatment2", "Treatment3"), n),
variable = rep(c("hh_08", "hh_09", "hh_10"), each = n),
value = c(rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3)
)
)
# Function to compute summary statistics by group (means and SDs)
compute_summary_stats <- function(df, vars) {
df %>%
filter(variable %in% vars) %>%
group_by(group, variable) %>%
summarise(mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n(), .groups = "drop")
}
# Function to run t-tests for pairwise comparisons
run_t_tests <- function(df, vars) {
t_test_results <- lapply(vars, function(var) {
# T-tests: Control vs. each treatment arm
control_vs_treatment <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
# Treatment comparisons: make sure there's only two groups
treatment_comparisons <- lapply(c("Treatment1", "Treatment2", "Treatment3"), function(treatment_group) {
# Check if both groups have data
treatment_data <- df %>% filter(group %in% c("Treatment1", treatment_group), variable == var)
if (n_distinct(treatment_data$group) == 2) {
return(t.test(value ~ group, data = treatment_data))
} else {
return(NULL)  # Skip the comparison if there's not exactly 2 groups
}
})
# Return t-test results
list(
control_vs_treatment = control_vs_treatment,
treatment_comparisons = treatment_comparisons
)
})
return(t_test_results)
}
# Define the list of variables to test
vars_to_test <- c("hh_08", "hh_09", "hh_10")
# Compute summary statistics for all variables
summary_stats <- compute_summary_stats(balance_df, vars_to_test)
# Run t-tests for each variable
t_test_results <- run_t_tests(balance_df, vars_to_test)
# Print the summary stats
print(summary_stats)
# Print the t-test results
print(t_test_results)
tidy_results <- tidy_t_tests(t_test_results, vars_to_test)
tidy_results <- tidy_t_tests(t_test_results, vars_to_test)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(broom)
# Set seed for reproduc
tidy_results <- tidy_t_tests(t_test_results, vars_to_test)
# # Load necessary libraries
# library(dplyr)
# library(tidyr)
# library(broom)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data (already in long format)
n <- 200  # Number of households
balance_df <- data.frame(
hhid = rep(1:n, each = 3),
group = rep(c("Control", "Treatment1", "Treatment2", "Treatment3"), n),
variable = rep(c("hh_08", "hh_09", "hh_10"), each = n),
value = c(rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3)
)
)
# Function to compute summary statistics by group (means and SDs)
compute_summary_stats <- function(df, vars) {
df %>%
filter(variable %in% vars) %>%
group_by(group, variable) %>%
summarise(mean = mean(value, na.rm = TRUE),
sd = sd(value, na.rm = TRUE),
n = n(), .groups = "drop")
}
# Function to run t-tests for pairwise comparisons
run_t_tests <- function(df, vars) {
t_test_results <- lapply(vars, function(var) {
# T-tests: Control vs. each treatment arm
control_vs_treatment <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
# Treatment comparisons: make sure there's only two groups
treatment_comparisons <- lapply(c("Treatment1", "Treatment2", "Treatment3"), function(treatment_group) {
# Check if both groups have data
treatment_data <- df %>% filter(group %in% c("Treatment1", treatment_group), variable == var)
if (n_distinct(treatment_data$group) == 2) {
return(t.test(value ~ group, data = treatment_data))
} else {
return(NULL)  # Skip the comparison if there's not exactly 2 groups
}
})
# Return t-test results
list(
control_vs_treatment = control_vs_treatment,
treatment_comparisons = treatment_comparisons
)
})
return(t_test_results)
}
# Function to tidy t-test results into a table
tidy_t_tests <- function(t_test_results, vars) {
results <- lapply(seq_along(t_test_results), function(i) {
# Extract results for each variable
var <- vars[i]
# Control vs Treatment t-test results
control_vs_treatment <- tidy(t_test_results[[i]]$control_vs_treatment) %>%
mutate(variable = var, comparison = "Control vs Treatment1")
# Pairwise treatment comparisons
treatment_comparisons <- bind_rows(lapply(1:3, function(j) {
treatment_result <- t_test_results[[i]]$treatment_comparisons[[j]]
if (!is.null(treatment_result)) {
tidy(treatment_result) %>%
mutate(variable = var, comparison = paste("Treatment", j, "vs Treatment", j+1))
} else {
NULL
}
}))
# Combine control vs treatment and pairwise treatment comparisons
bind_rows(control_vs_treatment, treatment_comparisons)
})
# Combine results for all variables into one data frame
bind_rows(results)
}
# Define the list of variables to test
vars_to_test <- c("hh_08", "hh_09", "hh_10")
# Compute summary statistics for all variables
summary_stats <- compute_summary_stats(balance_df, vars_to_test)
# Run t-tests for each variable
t_test_results <- run_t_tests(balance_df, vars_to_test)
# Create a tidy table from the t-test results
tidy_results <- tidy_t_tests(t_test_results, vars_to_test)
# Print the summary stats
print(summary_stats)
# Print the tidy t-test results
print(tidy_results)
