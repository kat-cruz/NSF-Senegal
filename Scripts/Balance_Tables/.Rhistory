#   select(variable, comparison, estimate, p.value) %>%
#   pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# tidy_results
tidy_results <- lapply(names(t_test_results), function(var) {
bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
tidy(t_test_results[[var]][[comp]]) %>%
mutate(variable = var, comparison = comp)
}))
}) %>%
bind_rows() %>%
select(variable, comparison, estimate, p.value) %>%
mutate(across(c(estimate, p.value), ~ round(.x, 2))) %>%
pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison", -"Control")
# Define the data with Unicode indentation
final_table <- tribble(
~variable,
"What illness did you contract this past month?",
"\u00A0\u00A0\u00A0Cold",
"\u00A0\u00A0\u00A0Flu",
"\u00A0\u00A0\u00A0Malaria",
"\u00A0\u00A0\u00A0Diarrhea",
"\u00A0\u00A0\u00A0COVID-19",
"\u00A0\u00A0\u00A0Typhoid",
"\u00A0\u00A0\u00A0Dengue",
"\u00A0\u00A0\u00A0Pneumonia"
)
print(health_5_3_df, row.names = FALSE)
view(final_table)
view(final_table)
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
summary_stats
# Function to run t-tests and store results
# run_t_tests <- function(df, vars) {
#   results <- list()
#
#   for (var in vars) {
#     # Subset the data for the current variable
#     df_var <- df %>% filter(variable == var)
#
#     # Initialize storage for comparisons
#     results[[var]] <- list()
#
#     # Define all comparisons
#     comparisons <- list(
#       "Control vs Treatment1" = c("Control", "Treatment1"),
#       "Control vs Treatment2" = c("Control", "Treatment2"),
#       "Control vs Treatment3" = c("Control", "Treatment3"),
#       "Treatment1 vs Treatment2" = c("Treatment1", "Treatment2"),
#       "Treatment1 vs Treatment3" = c("Treatment1", "Treatment3"),
#       "Treatment2 vs Treatment3" = c("Treatment2", "Treatment3")
#     )
#
#     # Run t-tests
#     for (comp_name in names(comparisons)) {
#       groups <- comparisons[[comp_name]]
#
#       # Filter data for the two groups in the comparison
#       df_subset <- df_var %>% filter(group %in% groups)
#
#       # Run t-test without checking for missing groups
#       results[[var]][[comp_name]] <- t.test(value ~ group, data = df_subset)
#     }
#   }
#
#   return(results)
# }
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
# Define the list of variables to test
vars_to_test <- setdiff(names(balance_df), c("hhid", "treatment_group"))
#vars_to_test <- ("species_3")
vars_to_test
# Run t-tests
t_test_results <- run_t_tests(long_data, vars_to_test)
t_test_results
# Convert t-test results into a tidy format
# tidy_results <- lapply(names(t_test_results), function(var) {
#   bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
#     tidy(t_test_results[[var]][[comp]]) %>%
#       mutate(variable = var, comparison = comp)
#   }))
# }) %>%
#   bind_rows() %>%
#   select(variable, comparison, estimate, p.value) %>%
#   pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# tidy_results
tidy_results <- lapply(names(t_test_results), function(var) {
bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
tidy(t_test_results[[var]][[comp]]) %>%
mutate(variable = var, comparison = comp)
}))
}) %>%
bind_rows() %>%
select(variable, comparison, estimate, p.value) %>%
mutate(across(c(estimate, p.value), ~ round(.x, 2))) %>%
pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison", -"Control")
# # Define the data with Unicode indentation
# final_table <- tribble(
#   ~variable,
#   "What illness did you contract this past month?",
#   "\u00A0\u00A0\u00A0Cold",
#   "\u00A0\u00A0\u00A0Flu",
#   "\u00A0\u00A0\u00A0Malaria",
#   "\u00A0\u00A0\u00A0Diarrhea",
#   "\u00A0\u00A0\u00A0COVID-19",
#   "\u00A0\u00A0\u00A0Typhoid",
#   "\u00A0\u00A0\u00A0Dengue",
#   "\u00A0\u00A0\u00A0Pneumonia"
# )
#
# print(health_5_3_df, row.names = FALSE)
view(final_table)
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison")
view(final_table)
vars_to_test
# Define the data with Unicode indentation
health_5_3_df <- tribble(
~health_5_3,
"What illness did you contract this past month?",
"                Cold",
"                Flu",
"                Malaria",
"                Diarrhea",
"                COVID-19",
"Typhoid",
"                 Dengue",
"                Pneumonia"
)
print(health_5_3_df, row.names = FALSE)
final_table <- tribble(
~hh_age_resp, ~hh_education_skills_1_,
"Age of the Respondent", NA,
NA, "\u00A0\u00A0\u00A01. Can write a short letter to their family",
NA, "\u00A0\u00A0\u00A02. Comfortable with numbers and calculations",
NA, "\u00A0\u00A0\u00A03. Arabist/ can read the Quran in Arabic",
NA, "\u00A0\u00A0\u00A04. Speaks Wolof/Pulaar fluently",
NA, "\u00A0\u00A0\u00A05. Can read a newspaper in French"
)
print(final_table)
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
summary_stats
# Function to run t-tests and store results
# run_t_tests <- function(df, vars) {
#   results <- list()
#
#   for (var in vars) {
#     # Subset the data for the current variable
#     df_var <- df %>% filter(variable == var)
#
#     # Initialize storage for comparisons
#     results[[var]] <- list()
#
#     # Define all comparisons
#     comparisons <- list(
#       "Control vs Treatment1" = c("Control", "Treatment1"),
#       "Control vs Treatment2" = c("Control", "Treatment2"),
#       "Control vs Treatment3" = c("Control", "Treatment3"),
#       "Treatment1 vs Treatment2" = c("Treatment1", "Treatment2"),
#       "Treatment1 vs Treatment3" = c("Treatment1", "Treatment3"),
#       "Treatment2 vs Treatment3" = c("Treatment2", "Treatment3")
#     )
#
#     # Run t-tests
#     for (comp_name in names(comparisons)) {
#       groups <- comparisons[[comp_name]]
#
#       # Filter data for the two groups in the comparison
#       df_subset <- df_var %>% filter(group %in% groups)
#
#       # Run t-test without checking for missing groups
#       results[[var]][[comp_name]] <- t.test(value ~ group, data = df_subset)
#     }
#   }
#
#   return(results)
# }
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
# Define the list of variables to test
vars_to_test <- setdiff(names(balance_df), c("hhid", "treatment_group"))
#vars_to_test <- ("species_3")
vars_to_test
# Run t-tests
t_test_results <- run_t_tests(long_data, vars_to_test)
t_test_results
# Convert t-test results into a tidy format
# tidy_results <- lapply(names(t_test_results), function(var) {
#   bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
#     tidy(t_test_results[[var]][[comp]]) %>%
#       mutate(variable = var, comparison = comp)
#   }))
# }) %>%
#   bind_rows() %>%
#   select(variable, comparison, estimate, p.value) %>%
#   pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# tidy_results
tidy_results <- lapply(names(t_test_results), function(var) {
bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
tidy(t_test_results[[var]][[comp]]) %>%
mutate(variable = var, comparison = comp)
}))
}) %>%
bind_rows() %>%
select(variable, comparison, estimate, p.value) %>%
mutate(across(c(estimate, p.value), ~ round(.x, 2))) %>%
pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison")
# Define the data with Unicode indentation
final_table <- tribble(
~variable,
"What illness did you contract this past month?",
"\u00A0\u00A0\u00A0Cold",
"\u00A0\u00A0\u00A0Flu",
"\u00A0\u00A0\u00A0Malaria",
"\u00A0\u00A0\u00A0Diarrhea",
"\u00A0\u00A0\u00A0COVID-19",
"\u00A0\u00A0\u00A0Typhoid",
"\u00A0\u00A0\u00A0Dengue",
"\u00A0\u00A0\u00A0Pneumonia"
)
print(health_5_3_df, row.names = FALSE)
view(final_table)
print(final_table)
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison")
print(final_table)
library(tibble)
# Define the data with Unicode indentation
final_table <- tribble(
~Question, ~hh_age_resp, ~hh_education_skills_1_,
"Age of the Respondent", "Age of the Respondent", NA,
"3.7. Education - Skills (multiple choice)", NA, NA,
NA, NA, "\u00A0\u00A0\u00A01. Can write a short letter to their family",
NA, NA, "\u00A0\u00A0\u00A02. Comfortable with numbers and calculations",
NA, NA, "\u00A0\u00A0\u00A03. Arabist/ can read the Quran in Arabic",
NA, NA, "\u00A0\u00A0\u00A04. Speaks Wolof/Pulaar fluently",
NA, NA, "\u00A0\u00A0\u00A05. Can read a newspaper in French"
)
print(final_table)
final_table <- final_table %>%
mutate(Question = NA_character_)
final_table
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
summary_stats
# Function to run t-tests and store results
# run_t_tests <- function(df, vars) {
#   results <- list()
#
#   for (var in vars) {
#     # Subset the data for the current variable
#     df_var <- df %>% filter(variable == var)
#
#     # Initialize storage for comparisons
#     results[[var]] <- list()
#
#     # Define all comparisons
#     comparisons <- list(
#       "Control vs Treatment1" = c("Control", "Treatment1"),
#       "Control vs Treatment2" = c("Control", "Treatment2"),
#       "Control vs Treatment3" = c("Control", "Treatment3"),
#       "Treatment1 vs Treatment2" = c("Treatment1", "Treatment2"),
#       "Treatment1 vs Treatment3" = c("Treatment1", "Treatment3"),
#       "Treatment2 vs Treatment3" = c("Treatment2", "Treatment3")
#     )
#
#     # Run t-tests
#     for (comp_name in names(comparisons)) {
#       groups <- comparisons[[comp_name]]
#
#       # Filter data for the two groups in the comparison
#       df_subset <- df_var %>% filter(group %in% groups)
#
#       # Run t-test without checking for missing groups
#       results[[var]][[comp_name]] <- t.test(value ~ group, data = df_subset)
#     }
#   }
#
#   return(results)
# }
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
# Define the list of variables to test
vars_to_test <- setdiff(names(balance_df), c("hhid", "treatment_group"))
#vars_to_test <- ("species_3")
vars_to_test
# Run t-tests
t_test_results <- run_t_tests(long_data, vars_to_test)
t_test_results
# Convert t-test results into a tidy format
# tidy_results <- lapply(names(t_test_results), function(var) {
#   bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
#     tidy(t_test_results[[var]][[comp]]) %>%
#       mutate(variable = var, comparison = comp)
#   }))
# }) %>%
#   bind_rows() %>%
#   select(variable, comparison, estimate, p.value) %>%
#   pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# tidy_results
tidy_results <- lapply(names(t_test_results), function(var) {
bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
tidy(t_test_results[[var]][[comp]]) %>%
mutate(variable = var, comparison = comp)
}))
}) %>%
bind_rows() %>%
select(variable, comparison, estimate, p.value) %>%
mutate(across(c(estimate, p.value), ~ round(.x, 2))) %>%
pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison")
# Define the data with Unicode indentation
print(final_table)
final_table <- final_table %>%
mutate(Question = NA_character_)
final_table
vars_to_test
