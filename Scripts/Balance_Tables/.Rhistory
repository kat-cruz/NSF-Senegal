results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
# Define the list of variables to test
vars_to_test <- setdiff(names(balance_df), c("hhid", "treatment_group"))
#vars_to_test <- ("species_3")
vars_to_test
# Run t-tests
t_test_results <- run_t_tests(long_data, vars_to_test)
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
#vars_to_test <- ("species_3")
vars_to_test
# Run t-tests
t_test_results <- run_t_tests(long_data, vars_to_test)
t_test_results
# Convert t-test results into a tid
tidy_results <- lapply(names(t_test_results), function(var) {
bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
tidy(t_test_results[[var]][[comp]]) %>%
mutate(variable = var, comparison = comp)
}))
}) %>%
bind_rows() %>%
select(variable, comparison, estimate, p.value) %>%
mutate(across(c(estimate, p.value), ~ round(.x, 2))) %>%
pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison")
# Define the data with Unicode indentation
print(final_table)
# Load necessary libraries
library(sandwich)
library(lmtest)
summary_stats <- long_data %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
summary_stats
run_regressions <- function(df, vars) {
results <- list()
# Loop over each variable to perform regressions
for (var in vars) {
results[[var]] <- list()
# Control vs. each treatment
results[[var]][["Control vs Treatment1"]] <- lm(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- lm(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- lm(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- lm(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- lm(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- lm(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
# Cluster standard errors at the village level (hhid_village)
clustered_results <- lapply(results, function(model_list) {
lapply(model_list, function(model) {
coeftest(model, vcov = vcovCL(model, cluster = ~ hhid_village))
})
})
return(clustered_results)
}
# Define the list of variables to test
vars_to_test <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
vars_to_test
# Run regressions with clustered standard errors
regression_results <- run_regressions(long_data, vars_to_test)
regression_results
# Convert regression res
# Load necessary libraries
# library(dplyr)
# library(tidyr)
# library(broom)
# Set seed for reproducibility
set.seed(123)
# Generate synthetic data
n <- 200  # Number of households
balance_test_df <- data.frame(
hhid = rep(1:n, each = 3),
group = rep(c("Control", "Treatment1", "Treatment2", "Treatment3"), n),
variable = rep(c("hh_08", "hh_09", "hh_10"), each = n),
value = c(rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3),
rnorm(n, mean = 0.5, sd = 0.1),
rnorm(n, mean = 1.5, sd = 0.2),
rnorm(n, mean = 2.5, sd = 0.3)
)
)
balance_test_df
summary_stats <- balance_test_df %>%
group_by(variable, group) %>%
summarise(mean = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = group, values_from = mean) %>%
mutate(across(where(is.numeric), ~ round(.x, 2)))
# Function to run t-tests and store results
run_t_tests <- function(df, vars) {
results <- list()
for (var in vars) {
# Control vs. each treatment
results[[var]] <- list()
results[[var]][["Control vs Treatment1"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment1"), variable == var))
results[[var]][["Control vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment2"), variable == var))
results[[var]][["Control vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Control", "Treatment3"), variable == var))
# Treatment pairwise comparisons
results[[var]][["Treatment1 vs Treatment2"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment2"), variable == var))
results[[var]][["Treatment1 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment1", "Treatment3"), variable == var))
results[[var]][["Treatment2 vs Treatment3"]] <- t.test(value ~ group, data = df %>% filter(group %in% c("Treatment2", "Treatment3"), variable == var))
}
return(results)
}
balance_test_df
# Define the list of variables to test
vars_to_test <- c("hh_08", "hh_09", "hh_10")
# Run t-tests
t_test_results <- run_t_tests(balance_test_df, vars_to_test)
t_test_results
# Convert t-test results into a tidy format
# tidy_results <- lapply(names(t_test_results), function(var) {
#   bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
#     tidy(t_test_results[[var]][[comp]]) %>%
#       mutate(variable = var, comparison = comp)
#   }))
# }) %>%
#   bind_rows() %>%
#   select(variable, comparison, estimate, p.value) %>%
#   pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# tidy_results
tidy_results <- lapply(names(t_test_results), function(var) {
bind_rows(lapply(names(t_test_results[[var]]), function(comp) {
tidy(t_test_results[[var]][[comp]]) %>%
mutate(variable = var, comparison = comp)
}))
}) %>%
bind_rows() %>%
select(variable, comparison, estimate, p.value) %>%
mutate(across(c(estimate, p.value), ~ round(.x, 2))) %>%
pivot_wider(names_from = comparison, values_from = c(estimate, p.value))
# # Reshape the data for the final table: combine estimates and p-values
final_table <- summary_stats %>%
left_join(tidy_results, by = "variable") %>%
arrange(variable) %>%
select(variable, Control, contains("estimate"), contains("p.value")) %>%
pivot_longer(cols = starts_with("estimate_") | starts_with("p.value_"),
names_to = c("comparison", "stat"), names_pattern = "(.*)_(.*)", values_to = "value") %>%
pivot_wider(names_from = stat, values_from = value) %>%  # Separate estimates and p-values
mutate(across(contains("estimate"), ~ paste0(.x, " (",
round(get(gsub("estimate", "p.value", cur_column())), 3), ")"),
.names = "{.col}_formatted")) %>%
select(-contains("p.value"), -contains("estimate"))
# Add parentheses around all values in rows where comparison = "p.value"
final_table <- final_table %>%
mutate(across(where(is.numeric), ~ formatC(.x, format = "f", digits = 2))) %>%  # Round and format numeric columns to 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all columns to character for manipulation
mutate(across(everything(), ~ ifelse(grepl("p.value", comparison),
paste0("(", .x, ")"),
.x)))  # Add parentheses for p.value rows
final_table <- final_table %>%
mutate(
variable = ifelse(comparison == "(p.value)", "", variable),
comparison = ifelse(comparison == "(p.value)", "", comparison)
) %>%
select(-"comparison", -"Control")
final_table
# Print final table
#print(final_table, n = Inf)
library(dplyr)
library(tidyr)
library(broom)
library(lmtest)
library(sandwich)
# 1. Generate synthetic data
set.seed(42)
n_households <- 500
n_villages <- 50
df <- data.frame(
hhid = 1:n_households,
hhid_village = sample(1:n_villages, n_households, replace = TRUE),
treatment = sample(c("control", "treatment1", "treatment2", "treatment3"), n_households, replace = TRUE)
)
# Add 8 household-level variables
for (i in 1:8) {
df[[paste0("hh_", sprintf("%02d", i))]] <- rnorm(n_households)
}
# 2. Function to run regressions and get clustered SEs
run_regressions <- function(data, dep_vars, cluster_var, treat_var) {
results <- list()
treatment_arms <- c("treatment1", "treatment2", "treatment3")
for (var in dep_vars) {
row <- list(variable = var, control_mean = mean(data[data[[treat_var]] == "control", var]))
# Compare each treatment arm against control
for (treat in treatment_arms) {
formula <- as.formula(paste(var, "~", treat_var))
model <- lm(formula, data = data)
vcov_cluster <- vcovCL(model, cluster = ~hhid_village)
coeftest_res <- coeftest(model, vcov_cluster)
treat_row <- grep(treat, rownames(coeftest_res))
t_stat <- coeftest_res[treat_row, "t value"]
p_val <- coeftest_res[treat_row, "Pr(>|t|)"]
row <- c(row, t_stat, paste0("(", round(p_val, 3), ")"))
}
for (i in 1:(length(treatment_arms)-1)) {
for (j in (i+1):length(treatment_arms)) {
t1 <- treatment_arms[i]
t2 <- treatment_arms[j]
subset_data <- data[data[[treat_var]] %in% c(t1, t2), ]
subset_data[[treat_var]] <- factor(subset_data[[treat_var]], levels = c(t1, t2))
model <- lm(as.formula(paste(var, "~", treat_var)), data = subset_data)
vcov_cluster <- vcovCL(model, cluster = ~hhid_village)
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- coeftest_res[2, "t value"]
p_val <- coeftest_res[2, "Pr(>|t|)"]
row <- c(row, t_stat, paste0("(", round(p_val, 3), ")"))
}
}
results[[var]] <- row
}
colnames(results_df) <- c("variable", "control_mean",
"treatment1_vs_control_t", "treatment1_vs_control_p",
"treatment2_vs_control_t", "treatment2_vs_control_p",
"treatment3_vs_control_t", "treatment3_vs_control_p",
"treatment1_vs_treatment2_t", "treatment1_vs_treatment2_p",
"treatment1_vs_treatment3_t", "treatment1_vs_treatment3_p",
"treatment2_vs_treatment3_t", "treatment2_vs_treatment3_p")
return(as.data.frame(results_df))
}
# 3. Run the regressions and generate table
dep_vars <- paste0("hh_", sprintf("%02d", 1:8))
results_table <- run_regressions(df, dep_vars, cluster_var = "hhid_village", treat_var = "treatment")
results_df <- do.call(rbind, results)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(broom)
library(lmtest)
library(sandwich)
# 1. Generate synthetic data
set.seed(42)
n_households <- 500
n_villages <- 50
df <- data.frame(
hhid = 1:n_households,
hhid_village = sample(1:n_villages, n_households, replace = TRUE),
treatment = sample(c("control", "treatment1", "treatment2", "treatment3"), n_households, replace = TRUE)
)
# Add 8 household-level variables
for (i in 1:8) {
df[[paste0("hh_", sprintf("%02d", i))]] <- rnorm(n_households)
}
# 2. Function to run regressions and get clustered SEs
run_regressions <- function(data, dep_vars, cluster_var, treat_var) {
results <- list()
treatment_arms <- c("treatment1", "treatment2", "treatment3")
for (var in dep_vars) {
row <- list(variable = var, control_mean = mean(data[data[[treat_var]] == "control", var]))
# Compare each treatment arm against control
for (treat in treatment_arms) {
formula <- as.formula(paste(var, "~", treat_var))
model <- lm(formula, data = data)
vcov_cluster <- vcovCL(model, cluster = ~hhid_village)
coeftest_res <- coeftest(model, vcov_cluster)
treat_row <- grep(treat, rownames(coeftest_res))
t_stat <- coeftest_res[treat_row, "t value"]
p_val <- coeftest_res[treat_row, "Pr(>|t|)"]
row <- c(row, t_stat, paste0("(", round(p_val, 3), ")"))
}
# Pairwise comparisons of treatment arms
for (i in 1:(length(treatment_arms)-1)) {
for (j in (i+1):length(treatment_arms)) {
t1 <- treatment_arms[i]
t2 <- treatment_arms[j]
subset_data <- data[data[[treat_var]] %in% c(t1, t2), ]
subset_data[[treat_var]] <- factor(subset_data[[treat_var]], levels = c(t1, t2))
model <- lm(as.formula(paste(var, "~", treat_var)), data = subset_data)
vcov_cluster <- vcovCL(model, cluster = ~hhid_village)
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- coeftest_res[2, "t value"]
p_val <- coeftest_res[2, "Pr(>|t|)"]
row <- c(row, t_stat, paste0("(", round(p_val, 3), ")"))
}
}
results[[var]] <- row
}
# Convert to data frame
results_df <- do.call(rbind, results)
colnames(results_df) <- c("variable", "control_mean",
"treatment1_vs_control_t", "treatment1_vs_control_p",
"treatment2_vs_control_t", "treatment2_vs_control_p",
"treatment3_vs_control_t", "treatment3_vs_control_p",
"treatment1_vs_treatment2_t", "treatment1_vs_treatment2_p",
"treatment1_vs_treatment3_t", "treatment1_vs_treatment3_p",
"treatment2_vs_treatment3_t", "treatment2_vs_treatment3_p")
return(as.data.frame(results_df))
}
# 3. Run the regressions and generate table
dep_vars <- paste0("hh_", sprintf("%02d", 1:8))
results_table <- run_regressions(df, dep_vars, cluster_var = "hhid_village", treat_var = "treatment")
# Display results
print(results_table)
library(dplyr)
library(tidyr)
library(broom)
library(lmtest)
library(sandwich)
# Generate synthetic data
set.seed(42)
n_households <- 500
n_villages <- 50
df <- data.frame(
hhid = 1:n_households,
hhid_village = sample(1:n_villages, n_households, replace = TRUE),
treatment = sample(c("control", "treatment1", "treatment2", "treatment3"), n_households, replace = TRUE)
)
for (i in 1:8) {
df[[paste0("hh_", sprintf("%02d", i))]] <- rnorm(n_households)
}
run_regressions <- function(data, dep_vars, cluster_var, treat_var) {
treatment_arms <- c("treatment1", "treatment2", "treatment3")
results_list <- list()
for (var in dep_vars) {
control_mean <- mean(data[data[[treat_var]] == "control", var])
row <- list(variable = var, control_mean = as.character(round(control_mean, 2)))
# Control vs treatment
for (treat in treatment_arms) {
model <- lm(as.formula(paste(var, "~ C(", treat_var, ")")), data = data)
vcov_cluster <- vcovCL(model, cluster = data[[cluster_var]])
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- round(coeftest_res[grepl(treat, rownames(coeftest_res)), "t value"], 2)
p_val <- round(coeftest_res[grepl(treat, rownames(coeftest_res)), "Pr(>|t|)"], 3)
row <- c(row, as.character(t_stat), paste0("(", p_val, ")"))
}
# Pairwise comparisons
for (i in 1:(length(treatment_arms)-1)) {
for (j in (i+1):length(treatment_arms)) {
subset <- data[data[[treat_var]] %in% c(treatment_arms[i], treatment_arms[j]), ]
subset[[treat_var]] <- relevel(factor(subset[[treat_var]]), ref = treatment_arms[i])
model <- lm(as.formula(paste(var, "~", treat_var)), data = subset)
vcov_cluster <- vcovCL(model, cluster = subset[[cluster_var]])
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- round(coeftest_res[2, "t value"], 2)
p_val <- round(coeftest_res[2, "Pr(>|t|)"], 3)
row <- c(row, as.character(t_stat), paste0("(", p_val, ")"))
}
}
results_list[[var]] <- row
}
# Convert to a data frame with character columns to avoid dropping
results_df <- do.call(rbind, results_list) %>%
as.data.frame(stringsAsFactors = FALSE)
colnames(results_df) <- c("variable", "control_mean",
"treatment1_vs_control_t", "treatment1_vs_control_p",
"treatment2_vs_control_t", "treatment2_vs_control_p",
"treatment3_vs_control_t", "treatment3_vs_control_p",
"treatment1_vs_treatment2_t", "treatment1_vs_treatment2_p",
"treatment1_vs_treatment3_t", "treatment1_vs_treatment3_p",
"treatment2_vs_treatment3_t", "treatment2_vs_treatment3_p")
return(results_df)
}
dep_vars <- paste0("hh_", sprintf("%02d", 1:8))
results_table <- run_regressions(df, dep_vars, cluster_var = "hhid_village", treat_var = "treatment")
dep_vars
results_table <- run_regressions(df, dep_vars, cluster_var = "hhid_village", treat_var = "treatment")
library(dplyr)
library(tidyr)
library(broom)
library(lmtest)
library(sandwich)
# Generate synthetic data
set.seed(42)
n_households <- 500
n_villages <- 50
df <- data.frame(
hhid = 1:n_households,
hhid_village = sample(1:n_villages, n_households, replace = TRUE),
treatment = factor(sample(c("control", "treatment1", "treatment2", "treatment3"), n_households, replace = TRUE))
)
for (i in 1:8) {
df[[paste0("hh_", sprintf("%02d", i))]] <- rnorm(n_households)
}
run_regressions <- function(data, dep_vars, cluster_var, treat_var) {
treatment_arms <- c("treatment1", "treatment2", "treatment3")
results_list <- list()
for (var in dep_vars) {
control_mean <- mean(data[data[[treat_var]] == "control", var])
row <- list(variable = var, control_mean = as.character(round(control_mean, 2)))
# Control vs treatment
for (treat in treatment_arms) {
model <- lm(as.formula(paste(var, "~", treat_var)), data = data)
vcov_cluster <- vcovCL(model, cluster = data[[cluster_var]])
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- round(coeftest_res[grepl(treat, rownames(coeftest_res)), "t value"], 2)
p_val <- round(coeftest_res[grepl(treat, rownames(coeftest_res)), "Pr(>|t|)"], 3)
row <- c(row, as.character(t_stat), paste0("(", p_val, ")"))
}
# Pairwise comparisons
for (i in 1:(length(treatment_arms)-1)) {
for (j in (i+1):length(treatment_arms)) {
subset <- data[data[[treat_var]] %in% c(treatment_arms[i], treatment_arms[j]), ]
subset[[treat_var]] <- relevel(factor(subset[[treat_var]]), ref = treatment_arms[i])
model <- lm(as.formula(paste(var, "~", treat_var)), data = subset)
vcov_cluster <- vcovCL(model, cluster = subset[[cluster_var]])
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- round(coeftest_res[2, "t value"], 2)
p_val <- round(coeftest_res[2, "Pr(>|t|)"], 3)
row <- c(row, as.character(t_stat), paste0("(", p_val, ")"))
}
}
results_list[[var]] <- row
}
results_df <- do.call(rbind, results_list) %>%
as.data.frame(stringsAsFactors = FALSE)
colnames(results_df) <- c("variable", "control_mean",
"treatment1_vs_control_t", "treatment1_vs_control_p",
"treatment2_vs_control_t", "treatment2_vs_control_p",
"treatment3_vs_control_t", "treatment3_vs_control_p",
"treatment1_vs_treatment2_t", "treatment1_vs_treatment2_p",
"treatment1_vs_treatment3_t", "treatment1_vs_treatment3_p",
"treatment2_vs_treatment3_t", "treatment2_vs_treatment3_p")
return(results_df)
}
dep_vars <- paste0("hh_", sprintf("%02d", 1:8))
results_table <- run_regressions(df, dep_vars, cluster_var = "hhid_village", treat_var = "treatment")
print(results_table)
library(dplyr)
library(tidyr)
library(broom)
library(lmtest)
library(sandwich)
# Generate synthetic data
set.seed(42)
n_households <- 500
n_villages <- 50
df <- data.frame(
hhid = 1:n_households,
hhid_village = sample(1:n_villages, n_households, replace = TRUE),
treatment = factor(sample(c("control", "treatment1", "treatment2", "treatment3"), n_households, replace = TRUE))
)
for (i in 1:8) {
df[[paste0("hh_", sprintf("%02d", i))]] <- rnorm(n_households)
}
run_regressions <- function(data, dep_vars, cluster_var, treat_var) {
treatment_arms <- c("treatment1", "treatment2", "treatment3")
results_list <- list()
for (var in dep_vars) {
control_mean <- mean(data[data[[treat_var]] == "control", var])
row <- c(variable = var, control_mean = as.character(round(control_mean, 2)))
for (treat in treatment_arms) {
model <- lm(as.formula(paste(var, "~", treat_var)), data = data)
vcov_cluster <- vcovCL(model, cluster = data[[cluster_var]])
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- round(coeftest_res[grepl(treat, rownames(coeftest_res)), "t value"], 2)
p_val <- round(coeftest_res[grepl(treat, rownames(coeftest_res)), "Pr(>|t|)"], 3)
row <- c(row, as.character(t_stat), paste0("(", p_val, ")"))
}
for (i in 1:(length(treatment_arms)-1)) {
for (j in (i+1):length(treatment_arms)) {
subset <- data[data[[treat_var]] %in% c(treatment_arms[i], treatment_arms[j]), ]
subset[[treat_var]] <- relevel(factor(subset[[treat_var]]), ref = treatment_arms[i])
model <- lm(as.formula(paste(var, "~", treat_var)), data = subset)
vcov_cluster <- vcovCL(model, cluster = subset[[cluster_var]])
coeftest_res <- coeftest(model, vcov_cluster)
t_stat <- round(coeftest_res[2, "t value"], 2)
p_val <- round(coeftest_res[2, "Pr(>|t|)"], 3)
row <- c(row, as.character(t_stat), paste0("(", p_val, ")"))
}
}
results_list[[var]] <- unlist(row, use.names = FALSE)  # Flatten to avoid list structure
}
results_df <- do.call(rbind, results_list) %>%
as.data.frame(stringsAsFactors = FALSE)
colnames(results_df) <- c("variable", "control_mean",
"treatment1_vs_control_t", "treatment1_vs_control_p",
"treatment2_vs_control_t", "treatment2_vs_control_p",
"treatment3_vs_control_t", "treatment3_vs_control_p",
"treatment1_vs_treatment2_t", "treatment1_vs_treatment2_p",
"treatment1_vs_treatment3_t", "treatment1_vs_treatment3_p",
"treatment2_vs_treatment3_t", "treatment2_vs_treatment3_p")
return(results_df)
}
dep_vars <- paste0("hh_", sprintf("%02d", 1:8))
results_table <- run_regressions(df, dep_vars, cluster_var = "hhid_village", treat_var = "treatment")
print(results_table)
