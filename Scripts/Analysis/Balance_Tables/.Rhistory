variable == "hh_26_" ~ "Indicator if currently enrolled in formal school (1=Yes, 0=No, asked about children) †",
variable == "hh_27_" ~ "Indicator if attended non-formal school or training? (1=Yes, 0=No, asked about children) †",
variable == "hh_29_01" ~ "Indicator for primary level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_02" ~ "Indicator for secondary middle level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_03" ~ "Indicator for secondary higher level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_04" ~ "Indicator for upper secondary education (1=Yes, 0=No, asked about children)",
variable == "hh_31_bin" ~ "Indicator if student completed studies or moved to next class (1=Yes, 0=No, asked about children)",
variable == "hh_37_" ~ "Indicator if missed >1 consecutive week of school due to illness? (1=Yes, 0=No, asked about children) †",
variable == "hh_38_" ~ "Number of attended school days in the past week (asked about children)",
variable == "living_01_bin" ~ "Indicator for selected tap water as main drinking source (1=Yes, 0=No)",
variable == "game_A_total" ~ "Total paid for Game A (CFA)",
variable == "game_B_total" ~ "Total paid for Game B (CFA)",
variable == "TLU" ~ "Tropical livestock units",
variable == "agri_6_15" ~ "Number of cultivated plots",
variable == "agri_6_32_bin" ~ "Indicator if used any organic fertilizer (1=Yes, 0=No)",
variable == "agri_6_36_bin" ~ "Indicator if used any inorganic/chemical fertilizer (1=Yes, 0=No)",
variable == "total_land_ha" ~ "Total land cultivated (hectares)",
variable == "agri_6_34_comp_any" ~ "Used any compost on any parcel (1=Yes, 0=No) †",
variable == "agri_income_01" ~ "Indicator if engaged in paid agricultural work in last 12 months (1=Yes, 0=No) †",
variable == "agri_income_05" ~ "Amount received for agricultural work (FCFA)",
variable == "beliefs_01_bin" ~ "Probability of contracting bilharzia (1=Strongly agree/Agree) +",
variable == "beliefs_02_bin" ~ "Probability of household member contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_03_bin" ~ "Probability of a child contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_04_bin" ~ "Agree: Village land should belong to community (1=Yes, 0=No) +",
variable == "beliefs_05_bin" ~ "Agree: Village water sources should belong to community (1=Yes, 0=No) +",
variable == "beliefs_06_bin" ~ "Agree: Right to products from own land (1=Yes, 0=No) +",
variable == "beliefs_07_bin" ~ "Agree: Right to products from community land worked on (1=Yes, 0=No) +",
variable == "beliefs_08_bin" ~ "Agree: Right to products from community water sources fished in (1=Yes, 0=No) +",
variable == "beliefs_09_bin" ~ "Agree: Right to products from community water sources harvested from (1=Yes, 0=No) +",
variable == "health_5_3_bin" ~ "Indicator for bilharzia or diarrhea in the past 12 months (1=Yes, 0=No, among those reporting illness)",
variable == "health_5_6_" ~ "Indicator for Diagnosed with schistosomiasis (1=Yes, 0=No) †",
variable == "num_water_access_points" ~ "Number of village water access points",
variable == "q_51" ~ "Distance to nearest healthcare center (km) [village level]",
variable == "target_village" ~ "Indicator if auction village (1=Yes, 0=No)",
TRUE ~ variable  # Default case
))
final_table
names(final_table)
final_table <- final_table %>%
select(Question, everything()) %>%
rename(Variable = variable,
`Control Mean` = control_mean,
`Private Treatment` = `Control vs Treatment1`,
`Public Treatment` = `Control vs Treatment2`,
`Public & Private Treatment` = `Control vs Treatment3`,
`Local Control` = `Control vs Local Control`,
`F-test` = f_statistic)
final_table
desired_column_order <- c(
"Control Mean",
"Local Control",
"Private Treatment",
"Public Treatment",
"Public & Private Treatment",
"F-test")
#   "Control vs Public Treatment",
#=============================================================================
# PAIR-WISE TEST NAMES HERE
#=============================================================================
# final_table <- final_table %>%
#   select(Question, everything()) %>%
#   rename(Variable = variable,
#          `Control vs Private Treatment` = `Control vs Treatment1`,
#           `Control vs Public Treatment` = `Control vs Treatment2`,
#           `Control vs Public & Private Treatment` = `Control vs Treatment3`,
#           `Private Treatment vs Public Treatment` = `Treatment1 vs Treatment2`,
#           `Private Treatment vs Public & Private Treatment` = `Treatment1 vs Treatment3`,
#           `Public Treatment vs Public & Private Treatment` = `Treatment2 vs Treatment3`,
#           `Local Control vs Public & Private Treatment` = `Treatment3 vs Local Control`,
#           `Local Control vs Private Treatment` = `Treatment2 vs Local Control`,
#           `Local Control vs Public Treatment` = `Treatment1 vs Local Control`,
#           `F-test` = f_statistic)
# Define the desired column order
# desired_column_order <- c(
#   "Control vs Private Treatment",
#   "Control vs Public Treatment",
#   "Control vs Local Control",
#   "Control vs Public & Private Treatment",
#   "Local Control vs Public Treatment",
#   "Local Control vs Private Treatment",
#   "Local Control vs Public & Private Treatment",
#   "Private Treatment vs Public Treatment",
#   "Private Treatment vs Public & Private Treatment",
#   "Public Treatment vs Public & Private Treatment",
#   "F-test"
# )
# Reorder the columns in final_table
final_table <- final_table %>%
select(Question, Variable, all_of(desired_column_order))  # Ensure 'variable' stays the first column
# Print the modified final_table
print(final_table)
final_table
final_table
setwd("C:/Users/km978/Box/NSF Senegal/Data_Management/Output/Data_Analysis/Balance_Tables")
final_table %>%
kable(format = "html", escape = FALSE, caption = "Baseline Balance Table") %>%
footnote(
general = c(
"LR chi2( 123 ) = 387.6",
"Prob > chi2 = 0 ",
"Reported statistics are regression coefficients, with p-values in parentheses and false discovery rate (FDR)-adjusted q-values in brackets. Standard errors are clustered at the village level. The means for the Control group are presented in the 'Control Mean' column, with standard errors in parentheses. P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01)."
),
symbol = c(
"Binary variables were derived from Likert scale responses based on their distribution.",
"Responses marked as 'I Don't Know' (coded as 2) have been recoded as missing values."
),
symbol_manual = c("+", "†")  # Manually set symbols instead of default numbering
) %>%
save_kable("balance_tablev_jointf.html")
##balance_tablev11.html = without -9s
#install.packages("writexl")
library(writexl) #to output to excel doc
library(dplyr)
library(readr) #to read in dta's
library(tidyr)
library(haven)
library(data.table)
library(tidyverse)
library(estimatr)
library(broom)
library(kableExtra) #to output to HTML tables
library(sandwich) #to wrangle data
library(lmtest)  # For likelihood ratio test
library(stats)   #for FDR q-stats
library(nnet)  #to use multilogit regression
library(car)
library(aod)
# Adding a single categorical variable for household training categories - this is for computing summary stats since I'm keeping the trained_hh variable
joint_df <- balance_df %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
)
) %>% select(-group)
names(joint_df)
joint_long_data <- joint_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
joint_long_data <- joint_long_data %>%
rename(group = treatment_group)
# view(joint_long_data)
summary_df <- balance_df %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control"
)
) %>% select(-group)
#install.packages("writexl")
library(writexl) #to output to excel doc
library(dplyr)
library(readr) #to read in dta's
library(tidyr)
library(haven)
library(data.table)
library(tidyverse)
library(estimatr)
library(broom)
library(kableExtra) #to output to HTML tables
library(sandwich) #to wrangle data
library(lmtest)  # For likelihood ratio test
library(stats)   #for FDR q-stats
library(nnet)  #to use multilogit regression
library(car)
library(aod)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data_PAP.dta")
balance_df <- read_dta(file_path_balance_tables_df)
balance_df
# Adding a single categorical variable for household training categories - this is for computing summary stats since I'm keeping the trained_hh variable
joint_df <- balance_df %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
)
) %>% select(-group)
names(joint_df)
joint_long_data <- joint_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
joint_long_data <- joint_long_data %>%
rename(group = treatment_group)
# view(joint_long_data)
summary_df <- balance_df %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control"
)
) %>% select(-group)
long_data_sum <- summary_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
long_data_sum <- long_data_sum %>%
rename(group = treatment_group)
# Adding a single categorical variable for household training categories - this is for running regressions to avoid multicollinearity with trained_hh
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group, ensuring "Local Control" is prioritized
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control",  # Moved to the top
group %in% c("3A", "3B") ~ "Treatment3"
)
) %>% select(-group, -trained_hh)
balance_df
long_data <- balance_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
long_data <- long_data %>%
rename(group = treatment_group)
joint_long_data
compute_summary_stats <- function(df) {
df %>%
group_by(group, variable) %>%
summarise(
mean_value = round(mean(value, na.rm = TRUE), 2),
sd_value = round(sd(value, na.rm = TRUE), 2),
N = sum(!is.na(value)),  # Count of non-missing values
.groups = "drop"
) %>%
pivot_longer(cols = c(mean_value, sd_value, N), names_to = "stat_type", values_to = "stat_value") %>%
mutate(stat_type = case_when(
stat_type == "mean_value" ~ "Mean",
stat_type == "sd_value" ~ "SD",  # SD should come before N
stat_type == "N" ~ "N"
)) %>%
mutate(stat_type = factor(stat_type, levels = c("Mean", "SD", "N"))) %>%  # Set order
arrange(variable, stat_type) %>%
pivot_wider(names_from = group, values_from = stat_value) %>%
select(variable, stat_type, everything())  # Ensure variable and stat_type come first
}
# compute_summary_stats <- function(df) {
#   df %>%
#     group_by(group, variable) %>%
#     summarise(
#       mean_value = round(mean(value, na.rm = TRUE), 2),
#       sd_value = round(sd(value, na.rm = TRUE), 2),
#       .groups = "drop"  # Prevents group structure from persisting
#     ) %>%
#     pivot_longer(cols = c(mean_value, sd_value), names_to = "stat_type", values_to = "stat_value") %>%
#     mutate(stat_type = ifelse(stat_type == "mean_value", "Mean", "SD")) %>%
#     pivot_wider(names_from = group, values_from = stat_value) %>%
#     arrange(variable, stat_type) %>%
#     # This ensures the 'variable' and 'stat_type' columns come first
#     select(variable, stat_type, everything()) %>%
#     # Explicitly ensure 'variable' is ordered as it appears in the original data
#     arrange(match(variable, unique(df$variable)))
# }
summary_table1 <- compute_summary_stats(long_data_sum)
# View output
print(summary_table1)
summary_table2 <- summary_table1 %>%
# Remove rows with stat_type == "N" but preserve the 'N_values' column
#filter(stat_type != "N") %>%
# Apply two decimal places for numeric columns (Control, Treatment1, etc.)
mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%
# Convert everything to character type (for proper formatting)
mutate(across(everything(), as.character)) %>%
# Add parentheses for SD values (only if stat_type is SD)
mutate(across(
Control:Treatment3,  # Apply only to numeric columns
~ ifelse(stat_type == "SD", paste0("(", trimws(.), ")"), .)  # Add parentheses for SD values
)) %>%
# Add 'N_values' column to each of the treatments columns
#mutate(across(Control:Treatment3, ~ ifelse(is.na(N_values), ., N_values), .names = "updated_{.col}")) %>%
# Select necessary columns: variable, N_values, and treatment columns
select(variable, everything()) %>%
#summary_table2 <- summary_table1 %>%
mutate(
variable = ifelse(stat_type %in% c("SD", "N"), "", variable),
stat_type = ifelse(stat_type %in% c("SD", "N"), "", stat_type)
) %>%
select(-stat_type)
summary_table2
summary_table3 <- summary_table2 %>%
mutate(Question = case_when(
variable == "hhid_village" ~ "Village ID",
variable == "hhid" ~ "Household ID",
variable == "trained_hh" ~ "Trained household",
variable == "hh_age_h" ~ "Household head age",
variable == "hh_education_level_bin_h" ~ "Indicator for household head with secondary education or higher (1=Yes, 0=No)",
variable == "hh_education_skills_5_h" ~ "Indicator that household head is literate (1=Yes, 0=No)",
variable == "hh_gender_h" ~ "Household head gender (1=Male, 0=Female)",
variable == "hh_numero" ~ "Household size",
variable == "hh_03_" ~ "Indicator for those who worked in domestic agricultural activities (1=Yes, 0=No) †",
variable == "hh_10_" ~ "Hours per week spent within 1 meter of surface water source",
variable == "hh_12_6_" ~ "Indicator for those who harvested aquatic vegetation, among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_16_" ~ "Hours spent producing, purchasing, or applying fertilizer",
variable == "hh_15_2" ~ "Indicator for making fertilizer (compost) among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_26_" ~ "Indicator if currently enrolled in formal school (1=Yes, 0=No, asked about children) †",
variable == "hh_27_" ~ "Indicator if attended non-formal school or training? (1=Yes, 0=No, asked about children) †",
variable == "hh_29_01" ~ "Indicator for primary level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_02" ~ "Indicator for secondary middle level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_03" ~ "Indicator for secondary higher level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_04" ~ "Indicator for upper secondary education (1=Yes, 0=No, asked about children)",
variable == "hh_31_bin" ~ "Indicator if student completed studies or moved to next class (1=Yes, 0=No, asked about children)",
variable == "hh_37_" ~ "Indicator if missed >1 consecutive week of school due to illness? (1=Yes, 0=No, asked about children) †",
variable == "hh_38_" ~ "Number of attended school days in the past week (asked about children)",
variable == "living_01_bin" ~ "Indicator for selected tap water as main drinking source (1=Yes, 0=No)",
variable == "game_A_total" ~ "Total paid for Game A (CFA)",
variable == "game_B_total" ~ "Total paid for Game B (CFA)",
variable == "TLU" ~ "Tropical livestock units",
variable == "agri_6_15" ~ "Number of cultivated plots",
variable == "agri_6_32_bin" ~ "Indicator if used any organic fertilizer (1=Yes, 0=No)",
variable == "agri_6_36_bin" ~ "Indicator if used any inorganic/chemical fertilizer (1=Yes, 0=No)",
variable == "total_land_ha" ~ "Total land cultivated (hectares)",
variable == "agri_6_34_comp_any" ~ "Used any compost on any parcel (1=Yes, 0=No) †",
variable == "agri_income_01" ~ "Indicator if engaged in paid agricultural work in last 12 months (1=Yes, 0=No) †",
variable == "agri_income_05" ~ "Amount received for agricultural work (FCFA)",
variable == "beliefs_01_bin" ~ "Probability of contracting bilharzia (1=Strongly agree/Agree) +",
variable == "beliefs_02_bin" ~ "Probability of household member contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_03_bin" ~ "Probability of a child contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_04_bin" ~ "Agree: Village land should belong to community (1=Yes, 0=No) +",
variable == "beliefs_05_bin" ~ "Agree: Village water sources should belong to community (1=Yes, 0=No) +",
variable == "beliefs_06_bin" ~ "Agree: Right to products from own land (1=Yes, 0=No) +",
variable == "beliefs_07_bin" ~ "Agree: Right to products from community land worked on (1=Yes, 0=No) +",
variable == "beliefs_08_bin" ~ "Agree: Right to products from community water sources fished in (1=Yes, 0=No) +",
variable == "beliefs_09_bin" ~ "Agree: Right to products from community water sources harvested from (1=Yes, 0=No) +",
variable == "health_5_3_bin" ~ "Indicator for bilharzia or diarrhea in the past 12 months (1=Yes, 0=No, among those reporting illness)",
variable == "health_5_6_" ~ "Indicator for Diagnosed with schistosomiasis (1=Yes, 0=No) †",
variable == "num_water_access_points" ~ "Number of village water access points",
variable == "q_51" ~ "Distance to nearest healthcare center (km) [village level]",
variable == "target_village" ~ "Indicator if auction village (1=Yes, 0=No)",
TRUE ~ variable  # Default case
))
summary_table3
summary_table_complete <- summary_table3 %>% select(Question, everything()) %>%
rename(Variable = variable,
`Private Treatment` = Treatment1,
`Public Treatment` = Treatment2,
`Private and Public Treatment` = Treatment3)
summary_table_complete
#%>%   filter(variable != "target_village")
view(joint_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data_PAP.dta")
balance_df <- read_dta(file_path_balance_tables_df)
balance_df
library(nnet)       # For multinom()
library(sandwich)   # For clustered standard errors
library(lmtest)     # For coeftest()
vars_to_include <- c("hh_age_h", "hh_education_level_bin_h", "hh_education_skills_5_h",
"hh_gender_h", "hh_numero", "hh_03_", "hh_10_", "hh_12_6_", "hh_16_",
"hh_15_2", "hh_26_", "hh_29_01", "hh_29_02", "hh_29_03", "hh_29_04",
"hh_37_", "hh_38_", "living_01_bin", "game_A_total", "game_B_total",
"TLU", "agri_6_15", "agri_6_32_bin", "agri_6_36_bin", "total_land_ha",
"agri_6_34_comp_any", "agri_income_05", "beliefs_01_bin",
"beliefs_02_bin", "beliefs_03_bin", "beliefs_04_bin", "beliefs_05_bin",
"beliefs_06_bin", "beliefs_07_bin", "beliefs_08_bin", "beliefs_09_bin",
"health_5_3_bin", "health_5_6_", "num_water_access_points", "q_51")
# Recreate formula and re-run model
formula <- as.formula(paste("treatment_group ~", paste(vars_to_include, collapse = " + ")))
# Run multinomial logit regression
model <- multinom(formula, data = balance_df)
balance_df
running regressions to avoid multicollinearity with trained_hh
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group, ensuring "Local Control" is prioritized
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control",  # Moved to the top
group %in% c("3A", "3B") ~ "Treatment3"
)
) %>% select(-group)
balance_df
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group, ensuring "Local Control" is prioritized
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control",  # Moved to the top
group %in% c("3A", "3B") ~ "Treatment3"
)
) %>% select(-group)
balance_df
#
vars_to_include <- c("hh_age_h", "hh_education_level_bin_h", "hh_education_skills_5_h",
"hh_gender_h", "hh_numero", "hh_03_", "hh_10_", "hh_12_6_", "hh_16_",
"hh_15_2", "hh_26_", "hh_29_01", "hh_29_02", "hh_29_03", "hh_29_04",
"hh_37_", "hh_38_", "living_01_bin", "game_A_total", "game_B_total",
"TLU", "agri_6_15", "agri_6_32_bin", "agri_6_36_bin", "total_land_ha",
"agri_6_34_comp_any", "agri_income_05", "beliefs_01_bin",
"beliefs_02_bin", "beliefs_03_bin", "beliefs_04_bin", "beliefs_05_bin",
"beliefs_06_bin", "beliefs_07_bin", "beliefs_08_bin", "beliefs_09_bin",
"health_5_3_bin", "health_5_6_", "num_water_access_points", "q_51")
# Recreate formula and re-run model
formula <- as.formula(paste("treatment_group ~", paste(vars_to_include, collapse = " + ")))
# Run multinomial logit regression
model <- multinom(formula, data = balance_df)
summary(model)
# Number of observations
num_obs <- nrow(balance_df)
# Log-likelihood
log_lik <- logLik(model)
# Degrees of freedom (number of predictors)
df_model <- length(coef(model))
# LR Chi-Square (Likelihood Ratio Test Statistic)
null_model <- multinom(treatment_group ~ 1, data = balance_df)  # Fit null model (intercept only)
lr_chi2 <- 2 * (logLik(model) - logLik(null_model))  # Likelihood Ratio Test statistic
# p-value for LR test
p_value <- pchisq(as.numeric(lr_chi2), df = df_model, lower.tail = FALSE)
# Pseudo R² (McFadden’s R²)
pseudo_r2 <- 1 - (logLik(model) / logLik(null_model))
# Clustered standard errors at the village level
cluster_se <- vcovCL(model, cluster = balance_df$hhid_village, type = "HC0")
library(nnet)       # For multinom()
library(sandwich)   # For clustered standard errors
library(lmtest)     # For coeftest()
vars_to_include <- c("hh_age_h", "hh_education_level_bin_h", "hh_education_skills_5_h",
"hh_gender_h", "hh_numero", "hh_03_", "hh_10_", "hh_12_6_", "hh_16_",
"hh_15_2", "hh_26_", "hh_29_01", "hh_29_02", "hh_29_03", "hh_29_04",
"hh_37_", "hh_38_", "living_01_bin", "game_A_total", "game_B_total",
"TLU", "agri_6_15", "agri_6_32_bin", "agri_6_36_bin", "total_land_ha",
"agri_6_34_comp_any", "agri_income_05", "beliefs_01_bin",
"beliefs_02_bin", "beliefs_03_bin", "beliefs_04_bin", "beliefs_05_bin",
"beliefs_06_bin", "beliefs_07_bin", "beliefs_08_bin", "beliefs_09_bin",
"health_5_3_bin", "health_5_6_", "num_water_access_points", "q_51")
# Recreate formula and re-run model
formula <- as.formula(paste("treatment_group ~", paste(vars_to_include, collapse = " + ")))
# Run multinomial logit regression
model <- multinom(formula, data = balance_df)
# Display summary
summary(model)
# Number of observations
num_obs <- nrow(balance_df)
# Log-likelihood
log_lik <- logLik(model)
# Degrees of freedom (number of predictors)
df_model <- length(coef(model))
# LR Chi-Square (Likelihood Ratio Test Statistic)
null_model <- multinom(treatment_group ~ 1, data = balance_df)  # Fit null model (intercept only)
lr_chi2 <- 2 * (logLik(model) - logLik(null_model))  # Likelihood Ratio Test statistic
# p-value for LR test
p_value <- pchisq(as.numeric(lr_chi2), df = df_model, lower.tail = FALSE)
# Pseudo R² (McFadden’s R²)
pseudo_r2 <- 1 - (logLik(model) / logLik(null_model))
# Clustered standard errors at the village level
cluster_se <- vcovCL(model, cluster = balance_df$hhid_village, type = "HC0")
