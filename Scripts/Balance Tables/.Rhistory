} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
view(balance_df)
view(balance_df)
# Adding indicator variables for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Add indicator variables based on the group value
control = if_else(group %in% c("0A", "0B"), 1, 0),
public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
) %>%
# Drop the 'group' column if it's not needed
select(-group)
# Adding indicator variables for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Add indicator variables based on the group value
control = if_else(group %in% c("0A", "0B"), 1, 0),
public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
) %>%
# Drop the 'group' column if it's not needed
select(-group)
view(balance_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
# Adding indicator variables for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Add indicator variables based on the group value
control = if_else(group %in% c("0A", "0B"), 1, 0),
public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
) %>%
# Drop the 'group' column if it's not needed
select(-group)
view(balance_df)
# for individual-level variables, these need to be scaled to the household level
#Understand the Variable: Is it continuous, binary, or categorical? What does it represent?
#Decide What’s Meaningful: What summary statistic (mean, max, proportion) best represents the household for your analysis goals?
# Specify the individual-level variables to scale
individual_vars <- c("hh_education_year_achieve_", "hh_14_", "hh_16_", "agri_income_05") # Replace with the names of the variables to scale
household_id <- "hhid"       # Replace with your household identifier column
# Create new variables in the original dataframe by scaling to household-level means
balance_df <- balance_df %>%
group_by(!!sym(household_id)) %>%
mutate(across(
all_of(individual_vars),
~ mean(.x, na.rm = TRUE),
.names = "{.col}_mean"
)) %>%
ungroup()
# View the updated dataframe
print(balance_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
# Adding indicator variables for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Add indicator variables based on the group value
control = if_else(group %in% c("0A", "0B"), 1, 0),
public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
) %>%
# Drop the 'group' column if it's not needed
select(-group)
view(balance_df)
#remotes::install_github("kwb-r/kwb.utils")
#options(repos = c(
#  kwbr = 'https://kwb-r.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
# Download and install kwb.utils in R
#install.packages('kwb.utils')
# install.packages(officer)
# install.packages(r2rtf)
# install.packages(dplyr)
# install.packages(ggplot2)
# install.packages(kwb.utils)
# install.packages(haven)
# install.packages(data.table)
# install.packages(rtf)
# install.packages(tidyverse)
# install.packages(estimatr)
# install.packages(broom)
#install.packages(reshape2)
#library(reshape2)
library(officer)
library(r2rtf)
library(dplyr)
library(ggplot2)
library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/Output/Data Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data.dta")
balance_df <- read_dta(file_path_balance_tables_df)
# Adding indicator variables for household training categories
balance_df <- balance_df %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Add indicator variables based on the group value
control = if_else(group %in% c("0A", "0B"), 1, 0),
public_health_trained = if_else(group %in% c("1A", "1B"), 1, 0),
private_benefits_trained = if_else(group %in% c("2A", "2B"), 1, 0),
public_and_private_trained = if_else(group %in% c("3A", "3B"), 1, 0)
) %>%
# Drop the 'group' column if it's not needed
select(-group)
view(balance_df)
# for individual-level variables, these need to be scaled to the household level
# 1) Understand the Variable: Is it continuous, binary, or categorical? What does it represent?
# 2) Decide What’s Meaningful: What summary statistic (mean, max, proportion) best represents the household for your analysis goals?
# Specify the individual-level variables to scale
individual_vars <- c("hh_education_year_achieve_", "hh_14_", "hh_16_", "agri_income_05") # Replace with the names of the variables to scale
household_id <- "hhid"       # Replace with your household identifier column
# Create new variables in the original dataframe by scaling to household-level means
balance_df <- balance_df %>%
group_by(!!sym(household_id)) %>%
mutate(across(
all_of(individual_vars),
~ mean(.x, na.rm = TRUE),
.names = "{.col}mean"
)) %>%
ungroup()
# View the updated dataframe
print(balance_df)
# Filter rows to keep only 1s and 0s in the specified variables
balance_df <- balance_df %>%
filter(across(all_of(individual_vars), ~ . %in% c(0, 1)))
household_id <- "hhid"
balance_df <- balance_df %>%
group_by(!!sym(household_id)) %>%  # Group by household ID
mutate(across(
all_of(individual_vars),
~ mean(.x[.x %in% c(0, 1)], na.rm = TRUE), # Ensure only 0s and 1s are considered
.names = "{.col}_mean" # Name the new columns
)) %>%
ungroup()
#remotes::install_github("kwb-r/kwb.utils")
#options(repos = c(
#  kwbr = 'https://kwb-r.r-universe.dev',
#  CRAN = 'https://cloud.r-project.org'))
# Download and install kwb.utils in R
#install.packages('kwb.utils')
# install.packages(officer)
# install.packages(r2rtf)
# install.packages(dplyr)
# install.packages(ggplot2)
# install.packages(kwb.utils)
# install.packages(haven)
# install.packages(data.table)
# install.packages(rtf)
# install.packages(tidyverse)
# install.packages(estimatr)
# install.packages(broom)
library(officer)
library(r2rtf)
library(dplyr)
library(ggplot2)
library(kwb.utils)
library(haven)
library(data.table)
library(rtf)
library(tidyverse)
library(estimatr)
library(broom)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_CRDES_CleanData/Baseline/Deidentified"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_CRDES_CleanData/Baseline/Deidentified"
))
}
# proj <- kwb.utils::resolve(list(
#   projects = "C:/Users/Kateri/Box/NSF Senegal",
#   p1 = "<projects>/Data Work/Output/Data Corrections"
# ))
file_path_hh <- file.path(proj$p1, "Complete_Baseline_Household_Roster.dta")
household_df <- read_dta(file_path_hh)
file_path_know <- file.path(proj$p1, "Complete_Baseline_Knowledge.dta")
knowledge_df <- read_dta(file_path_know)
file_path_health <- file.path(proj$p1, "Complete_Baseline_Health.dta")
health_df <- read_dta(file_path_health)
file_path_agri <- file.path(proj$p1, "Complete_Baseline_Agriculture.dta")
agriculture_df <- read_dta(file_path_agri)
file_path_prod <- file.path(proj$p1, "Complete_Baseline_Production.dta")
production_df <- read_dta(file_path_prod)
file_path_cop <- file.path(proj$p1, "Complete_Baseline_Lean_Season.dta")
coping_df <- read_dta(file_path_cop)
file_path_income <- file.path(proj$p1, "Complete_Baseline_Income.dta")
income_df <- read_dta(file_path_income)
file_path_standard <- file.path(proj$p1, "Complete_Baseline_Standard_Of_Living.dta")
standard_df <- read_dta(file_path_standard)
file_path_beliefs <- file.path(proj$p1, "Complete_Baseline_Beliefs.dta")
beliefs_df <- read_dta(file_path_beliefs)
file_path_game <- file.path(proj$p1, "Complete_Baseline_Public_Goods_Game.dta")
donation_df <- read_dta(file_path_game)
file_path_enumerator <- file.path(proj$p1, "Complete_Baseline_Enumerator_Observations.dta")
enumerator_df <- read_dta(file_path_enumerator)
file_path_community <- file.path(proj$p1, "Complete_Baseline_Community.dta")
community_df <- read_dta(file_path_community)
#print(head(baseline_data, 10))
#baseline_data <- baseline_data %>%
# mutate(hh_age_resp = if_else(hhid == "023B09", 50, hh_age_resp))
categ_func <- function(value) {
# N = Total number of non-empty, non-NA observations (including -9s but excluding true NAs/empty cells)
N <- sum(!is.na(value) & value != "")
# Remove NAs and invalid values (-9 in this example)
valid_value <- value[!is.na(value) & value != -9]
# Calculate frequency and proportion for valid responses
freq_table <- table(valid_value)
proportions <- round(freq_table / length(valid_value), 2)
# Calculate the proportion of -9s and NAs
prop_na <- round(sum(value == -9, na.rm = TRUE) / N, 2)
#prop_na <- round(sum(value == -9 | is.na(value) | value == ".", na.rm = TRUE) / N, 2)
# Create a data frame with the summary
categorical_data <- data.frame(
Value = names(freq_table),
N = N,  # Total number of observations
Frequency = as.vector(freq_table),  # Frequency of valid responses
Proportion = as.vector(proportions),  # Proportion of valid responses
prop_na = prop_na  # Proportion of -9s/NAs
)
return(categorical_data)
}
categ_summary <- function(data, prefixes) {
summaries <- lapply(prefixes, function(prefix) {
variable_data <- data %>%
select(starts_with(prefix)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
# Pass the 'value' column to categ_func
summary_categ <- categ_func(variable_data$value)
summary_categ$Variable <- prefix  # Assign the prefix as the variable name
return(summary_categ)
})
categ_sum_set <- bind_rows(summaries)
return(categ_sum_set)
}
# Step 1: Select all columns except those starting with hh_ethnicity_o_
hh_edu_lvl_c <- household_df %>%
select(-matches("^hh_education_level_o"))
prefixes_edu_lvl <- c("hh_education_level_")
# Print combined summary
print(categ_summary(hh_edu_lvl_c, prefixes_edu_lvl))
#create binary variables
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_2 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_3 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_4 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_99 = if_else(hh_education_level_ == 1, 1, 0),
hh_11_ = if_else(hh_11_ == 1, 1, 0),
hh_11_ = if_else(hh_11_ == 1, 1, 0),
hh_11_ = if_else(hh_11_ == 1, 1, 0),
hh_11_ = if_else(hh_11_ == 1, 1, 0),
living_01_1 = if_else(living_01 == 1, 1, 0),
living_01_2 = if_else(living_01 == 2, 1, 0),
living_01_3 = if_else(living_01 == 3, 1, 0),
living_01_4 = if_else(living_01 == 4, 1, 0),
living_01_5 = if_else(living_01 == 5, 1, 0),
living_01_6 = if_else(living_01 == 6, 1, 0),
living_01_7 = if_else(living_01 == 7, 1, 0),
living_01_8 = if_else(living_01 == 8, 1, 0),
living_01_9 = if_else(living_01 == 9, 1, 0),
living_01_10 = if_else(living_01 == 10, 1, 0),
living_01_99 = if_else(living_01 == 99, 1, 0),
living_03_1 = if_else(living_03 == 1, 1, 0),
living_03_2 = if_else(living_03 == 2, 1, 0),
living_03_3 = if_else(living_03 == 3, 1, 0),
living_03_99 = if_else(living_03 == 99, 1, 0),
# For living_04
living_04_1 = if_else(living_04 == 1, 1, 0),
living_04_2 = if_else(living_04 == 2, 1, 0),
living_04_3 = if_else(living_04 == 3, 1, 0),
living_04_4 = if_else(living_04 == 4, 1, 0),
living_04_5 = if_else(living_04 == 5, 1, 0),
living_04_6 = if_else(living_04 == 6, 1, 0),
living_04_7 = if_else(living_04 == 7, 1, 0),
living_04_99 = if_else(living_04 == 99, 1, 0),
living_05
)
#categorical vars to transform
#hh_education_level, hh_11, hh_12, hh_15, species living_05 enum_03 enum_04 enum_05
#create binary variables
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 0, 1, 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_2 = if_else(hh_education_level_ == 2, 1, 0),
hh_education_level_3 = if_else(hh_education_level_ == 3, 1, 0),
hh_education_level_4 = if_else(hh_education_level_ == 4, 1, 0),
hh_education_level_99 = if_else(hh_education_level_ == 99, 1, 0),
hh_11_1 = if_else(hh_11_ == 1, 1, 0),
hh_11_2 = if_else(hh_11_ == 2, 1, 0),
hh_11_3 = if_else(hh_11_ == 3, 1, 0),
hh_11_4 = if_else(hh_11_ == 4, 1, 0),
hh_11_99 = if_else(hh_11_ == 99, 1, 0),
hh_15_1 = if_else(hh_15_ == 1, 1, 0),
hh_15_2 = if_else(hh_15_ == 2, 1, 0),
hh_15_3 = if_else(hh_15_ == 3, 1, 0),
hh_15_4 = if_else(hh_15_ == 4, 1, 0),
hh_15_5 = if_else(hh_15_ == 5, 1, 0),
hh_15_99 = if_else(hh_15_ == 99, 1, 0),
living_01_1 = if_else(living_01 == 1, 1, 0),
living_01_2 = if_else(living_01 == 2, 1, 0),
living_01_3 = if_else(living_01 == 3, 1, 0),
living_01_4 = if_else(living_01 == 4, 1, 0),
living_01_5 = if_else(living_01 == 5, 1, 0),
living_01_6 = if_else(living_01 == 6, 1, 0),
living_01_7 = if_else(living_01 == 7, 1, 0),
living_01_8 = if_else(living_01 == 8, 1, 0),
living_01_9 = if_else(living_01 == 9, 1, 0),
living_01_10 = if_else(living_01 == 10, 1, 0),
living_01_99 = if_else(living_01 == 99, 1, 0),
living_03_1 = if_else(living_03 == 1, 1, 0),
living_03_2 = if_else(living_03 == 2, 1, 0),
living_03_3 = if_else(living_03 == 3, 1, 0),
living_03_99 = if_else(living_03 == 99, 1, 0),
living_04_1 = if_else(living_04 == 1, 1, 0),
living_04_2 = if_else(living_04 == 2, 1, 0),
living_04_3 = if_else(living_04 == 3, 1, 0),
living_04_4 = if_else(living_04 == 4, 1, 0),
living_04_5 = if_else(living_04 == 5, 1, 0),
living_04_6 = if_else(living_04 == 6, 1, 0),
living_04_7 = if_else(living_04 == 7, 1, 0),
living_04_99 = if_else(living_04 == 99, 1, 0),
living_05_1 = if_else(living_05 == 1, 1, 0),
living_05_2 = if_else(living_05 == 2, 1, 0),
living_05_3 = if_else(living_05 == 3, 1, 0),
living_05_4 = if_else(living_05 == 4, 1, 0),
living_05_5 = if_else(living_05 == 5, 1, 0),
living_05_6 = if_else(living_05 == 6, 1, 0),
living_05_7 = if_else(living_05 == 7, 1, 0),
living_05_99 = if_else(living_05 == 99, 1, 0),
enum_03_1 = if_else(enum_03 == 1, 1, 0),
enum_03_2 = if_else(enum_03 == 2, 1, 0),
enum_03_3 = if_else(enum_03 == 3, 1, 0),
enum_03_4 = if_else(enum_03 == 4, 1, 0),
enum_03_99 = if_else(enum_03 == 99, 1, 0),
enum_04_1 = if_else(enum_04 == 1, 1, 0),
enum_04_2 = if_else(enum_04 == 2, 1, 0),
enum_04_3 = if_else(enum_04 == 3, 1, 0),
enum_04_4 = if_else(enum_04 == 4, 1, 0),
enum_04_5 = if_else(enum_04 == 5, 1, 0),
enum_04_6 = if_else(enum_04 == 6, 1, 0),
enum_04_99 = if_else(enum_04 == 99, 1, 0),
enum_05_1 = if_else(enum_05 == 1, 1, 0),
enum_05_2 = if_else(enum_05 == 2, 1, 0),
enum_05_3 = if_else(enum_05 == 3, 1, 0),
enum_05_4 = if_else(enum_05 == 4, 1, 0),
enum_05_5 = if_else(enum_05 == 5, 1, 0),
enum_05_99 = if_else(enum_05 == 99, 1, 0)
)
#categorical vars to transform
#hh_education_level, hh_11, hh_12, hh_15, species living_05 enum_03 enum_04 enum_05
#create binary variables
balance_df <- balance_df %>%
mutate(
hh_education_level_0 = if_else(hh_education_level_ == 0, 1, 0),
hh_education_level_1 = if_else(hh_education_level_ == 1, 1, 0),
hh_education_level_2 = if_else(hh_education_level_ == 2, 1, 0),
hh_education_level_3 = if_else(hh_education_level_ == 3, 1, 0),
hh_education_level_4 = if_else(hh_education_level_ == 4, 1, 0),
hh_education_level_99 = if_else(hh_education_level_ == 99, 1, 0),
hh_11_1 = if_else(hh_11_ == 1, 1, 0),
hh_11_2 = if_else(hh_11_ == 2, 1, 0),
hh_11_3 = if_else(hh_11_ == 3, 1, 0),
hh_11_4 = if_else(hh_11_ == 4, 1, 0),
hh_11_99 = if_else(hh_11_ == 99, 1, 0),
hh_15_1 = if_else(hh_15_ == 1, 1, 0),
hh_15_2 = if_else(hh_15_ == 2, 1, 0),
hh_15_3 = if_else(hh_15_ == 3, 1, 0),
hh_15_4 = if_else(hh_15_ == 4, 1, 0),
hh_15_5 = if_else(hh_15_ == 5, 1, 0),
hh_15_99 = if_else(hh_15_ == 99, 1, 0),
living_01_1 = if_else(living_01 == 1, 1, 0),
living_01_2 = if_else(living_01 == 2, 1, 0),
living_01_3 = if_else(living_01 == 3, 1, 0),
living_01_4 = if_else(living_01 == 4, 1, 0),
living_01_5 = if_else(living_01 == 5, 1, 0),
living_01_6 = if_else(living_01 == 6, 1, 0),
living_01_7 = if_else(living_01 == 7, 1, 0),
living_01_8 = if_else(living_01 == 8, 1, 0),
living_01_9 = if_else(living_01 == 9, 1, 0),
living_01_10 = if_else(living_01 == 10, 1, 0),
living_01_99 = if_else(living_01 == 99, 1, 0),
living_03_1 = if_else(living_03 == 1, 1, 0),
living_03_2 = if_else(living_03 == 2, 1, 0),
living_03_3 = if_else(living_03 == 3, 1, 0),
living_03_99 = if_else(living_03 == 99, 1, 0),
living_04_1 = if_else(living_04 == 1, 1, 0),
living_04_2 = if_else(living_04 == 2, 1, 0),
living_04_3 = if_else(living_04 == 3, 1, 0),
living_04_4 = if_else(living_04 == 4, 1, 0),
living_04_5 = if_else(living_04 == 5, 1, 0),
living_04_6 = if_else(living_04 == 6, 1, 0),
living_04_7 = if_else(living_04 == 7, 1, 0),
living_04_99 = if_else(living_04 == 99, 1, 0),
living_05_1 = if_else(living_05 == 1, 1, 0),
living_05_2 = if_else(living_05 == 2, 1, 0),
living_05_3 = if_else(living_05 == 3, 1, 0),
living_05_4 = if_else(living_05 == 4, 1, 0),
living_05_5 = if_else(living_05 == 5, 1, 0),
living_05_6 = if_else(living_05 == 6, 1, 0),
living_05_7 = if_else(living_05 == 7, 1, 0),
living_05_99 = if_else(living_05 == 99, 1, 0),
enum_03_1 = if_else(enum_03 == 1, 1, 0),
enum_03_2 = if_else(enum_03 == 2, 1, 0),
enum_03_3 = if_else(enum_03 == 3, 1, 0),
enum_03_4 = if_else(enum_03 == 4, 1, 0),
enum_03_99 = if_else(enum_03 == 99, 1, 0),
enum_04_1 = if_else(enum_04 == 1, 1, 0),
enum_04_2 = if_else(enum_04 == 2, 1, 0),
enum_04_3 = if_else(enum_04 == 3, 1, 0),
enum_04_4 = if_else(enum_04 == 4, 1, 0),
enum_04_5 = if_else(enum_04 == 5, 1, 0),
enum_04_6 = if_else(enum_04 == 6, 1, 0),
enum_04_99 = if_else(enum_04 == 99, 1, 0),
enum_05_1 = if_else(enum_05 == 1, 1, 0),
enum_05_2 = if_else(enum_05 == 2, 1, 0),
enum_05_3 = if_else(enum_05 == 3, 1, 0),
enum_05_4 = if_else(enum_05 == 4, 1, 0),
enum_05_5 = if_else(enum_05 == 5, 1, 0),
enum_05_99 = if_else(enum_05 == 99, 1, 0),
) %>%
mutate(hh_gender_ = recode(hh_gender_, `2` = 0, .default = hh_gender_))
