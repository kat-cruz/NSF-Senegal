final_table <- final_table %>%
mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%  # Ensure 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all to character
mutate(across(everything(), ~ ifelse(grepl("p", type), paste0("(", trimws(.x), ")"), .x)))  # Format p-values with parentheses
# Print final table
print(final_table)
# Load required libraries
library(dplyr)
library(tidyr)
# Set seed for reproducibility
set.seed(42)
# Define variables and treatment comparisons
variables <- c("agri_6_15", "agri_7_20", "agri_8_25")
comparisons <- c("Control vs Treatment1", "Control vs Treatment2", "Control vs Local Control")
# Generate synthetic dataset
regression_results <- expand.grid(variable = variables, comparison = comparisons) %>%
mutate(
stat = round(rnorm(n(), mean = -2, sd = 1), 2), # Random stat values
p = round(runif(n(), 0, 0.1), 4)  # Random p-values
)
# Create synthetic F-statistics dataset
f_test_results <- data.frame(
variable = variables,
f_stat = round(runif(length(variables), 3, 6), 2),  # Random F-statistics
p_value = round(runif(length(variables), 0, 0.05), 4)  # Random p-values
)
# Convert t-stat and p-value to numeric and round
regression_results <- regression_results %>%
mutate(across(c(stat, p), ~ round(.x, 2)))
# Pivot the table to have variables as rows and comparisons as columns
final_table <- regression_results %>%
pivot_wider(names_from = comparison, values_from = c(stat, p))
# Rearrange to stack t-stats and p-values in rows
final_table <- final_table %>%
pivot_longer(cols = -variable, names_to = 'comparison', values_to = 'value') %>%
separate(comparison, into = c('type', 'comparison'), sep = '_', extra = 'merge') %>%
pivot_wider(names_from = comparison, values_from = value)
# Merge F-statistics data into final_table
final_table <- final_table %>%
left_join(f_test_results, by = "variable")
# Replace the value underneath f_stat with p_value
final_table <- final_table %>%
mutate(across(starts_with("f_stat"), ~ ifelse(type == "p", as.character(p_value), as.character(.)))) %>%
mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%  # Ensure 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all to character
mutate(across(everything(), ~ ifelse(grepl("p", type), paste0("(", trimws(.x), ")"), .x)))  # Format p-values with parentheses
# Print the final formatted table
print(final_table)
# Pivot the table to have variables as rows and comparisons as columns
final_table <- regression_results %>%
pivot_wider(names_from = comparison, values_from = c(stat, p))
# Rearrange to stack t-stats and p-values in rows
final_table <- final_table %>%
pivot_longer(cols = -variable, names_to = 'comparison', values_to = 'value') %>%
separate(comparison, into = c('type', 'comparison'), sep = '_', extra = 'merge') %>%
pivot_wider(names_from = comparison, values_from = value)
# Merge F-statistics data into final_table
final_table <- final_table %>%
left_join(f_test_results, by = "variable")
# Replace the value underneath f_stat with p_value
final_table <- final_table %>%
mutate(across(starts_with("f_stat"), ~ ifelse(type == "p", as.character(p_value), as.character(.)))) %>%
mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%  # Ensure 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all to character
mutate(across(everything(), ~ ifelse(grepl("p", type), paste0("(", trimws(.x), ")"), .x)))  # Format p-values with parentheses
# Print the final formatted table
print(final_table)
#<><<><><>><><<><><>>
#CREATE REGRESSION FUNCTION
#<><<><><>><><<><><>>
# This is a double nested loop
# The first part runs the function on the arms
# The second part runs the function on the variables
run_regressions <- function(data, treatment_col, village_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
treatments <- unique(data[[treatment_col]])
treatments <- setdiff(treatments, 'Control')
for (arm in treatments) {
subset <- data %>% filter(.data[[treatment_col]] %in% c('Control', arm) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == arm, 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste('Control vs', arm),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
subset <- data %>% filter(.data[[treatment_col]] %in% c(treatments[i], treatments[j]) & variable == var)
subset$treat <- ifelse(subset[[treatment_col]] == treatments[j], 1, 0)
model <- lm(value ~ treat, data = subset)
clustered_se <- coeftest(model, vcov = vcovCL(model, cluster = subset[[village_col]]))
results <- append(results, list(data.frame(variable = var, comparison = paste(treatments[i], 'vs', treatments[j]),
stat = round(clustered_se[2, 3], 2),
p = round(clustered_se[2, 4], 2))))
}
}
}
bind_rows(results)
}
vars_to_test_reg <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
regression_results <- run_regressions(long_data, 'group', 'hhid_village', vars_to_test_reg)
regression_results
#<><<><><>><><<><><>>
#CREATE F-STAT FUNCTION FOR EACH VAR
#<><<><><>><><<><><>>
# Function to perform F-test for each variable
run_f_tests <- function(data, treatment_col, vars_to_test) {
results <- list()
for (var in vars_to_test) {
# Construct formula dynamically (e.g., hh_15_2 ~ group)
formula <- as.formula(paste(var, "~", treatment_col))
# Run ANOVA for each variable
anova_result <- aov(formula, data = data)
# Get the F-statistic and p-value
f_stat <- summary(anova_result)[[1]]$`F value`[1]
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]
# Store results
results <- append(results, list(data.frame(variable = var,
f_statistic = round(f_stat, 2),
p_value = round(p_value, 4))))
}
# Combine and return the results as a data frame
return(bind_rows(results))
}
vars_to_test_fstat <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
# Example usage
f_test_results <- run_f_tests(balance_df, treatment_col = "treatment_group", vars_to_test = vars_to_test_fstat)
print(f_test_results)
#<><<><><>><><<><><>>
#CREATE F-STAT FUNCTION FOR TREATMENT ARM
#<><<><><>><><<><><>>
# Function to compute Joint F-statistics for each treatment arm (Wide Format)
run_joint_f_test <- function(data, treatment_col, vars_to_test) {
results <- list()
# Get all treatment arms except 'Control'
treatments <- unique(data[[treatment_col]])
treatments <- treatments[treatments != "Control"]  # Exclude 'Control'
for (arm in treatments) {
# Subset the data for the current treatment group vs. Control
subset <- data[data[[treatment_col]] %in% c("Control", arm), ]
# Create regression formula (e.g., hh_15_2 + hh_26_ + hh_27_ ~ group)
formula <- as.formula(paste(paste(vars_to_test, collapse = " + "), "~", treatment_col))
# Run the regression model
model <- lm(formula, data = subset)
# Compute F-statistic for the joint test
f_stat <- summary(model)$fstatistic[1]
p_value <- pf(f_stat, df1 = summary(model)$fstatistic[2], df2 = summary(model)$fstatistic[3], lower.tail = FALSE)
# Store results
results <- append(results, list(data.frame(treatment = arm,
f_statistic = round(f_stat, 2),
p_value = round(p_value, 4))))
}
# Combine and return the results as a data frame
return(bind_rows(results))
}
vars_to_test_fjoint <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
joint_f_test_results <- run_joint_f_test(balance_df, treatment_col = "treatment_group", vars_to_test = vars_to_test_fjoint)
# Print results
print(joint_f_test_results)
print(f_test_results)
regression_results
# Pivot the table to have variables as rows and comparisons as columns
final_table <- regression_results %>%
pivot_wider(names_from = comparison, values_from = c(stat, p))
# Rearrange to stack t-stats and p-values in rows
final_table <- final_table %>%
pivot_longer(cols = -variable, names_to = 'comparison', values_to = 'value') %>%
separate(comparison, into = c('type', 'comparison'), sep = '_', extra = 'merge') %>%
pivot_wider(names_from = comparison, values_from = value)
# Merge F-statistics data into final_table
final_table <- final_table %>%
left_join(f_test_results, by = "variable")
# Replace the value underneath f_stat with p_value
final_table <- final_table %>%
mutate(across(starts_with("f_stat"), ~ ifelse(type == "p", as.character(p_value), as.character(.)))) %>%
mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%  # Ensure 2 decimal places
mutate(across(everything(), as.character)) %>%  # Convert all to character
mutate(across(everything(), ~ ifelse(grepl("p", type), paste0("(", trimws(.x), ")"), .x)))  # Format p-values with parentheses
# Print the final formatted table
print(final_table)
# Convert t-stat and p-value to numeric and round to two decimal places
#     merged_results <- merged_results %>%
#       mutate(across(c(stat, p), ~ round(.x, 2)))
#
#     # Pivot the table to have variables as rows and comparisons as columns
#     final_table <- merged_results %>%
#       pivot_wider(names_from = comparison, values_from = c(stat, p))
# final_table
#     # Rearrange to stack t-stats and p-values in rows
#     final_table <- final_table %>%
#       pivot_longer(cols = -variable, names_to = 'comparison', values_to = 'value') %>%
#       separate(comparison, into = c('type', 'comparison'), sep = '_', extra = 'merge') %>%
#       pivot_wider(names_from = comparison, values_from = value)
#
#     # Add formatting to ensure two decimal places for all numeric values (t-stats and p-values)
#     final_table <- final_table %>%
#       mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%  # Format with 2 decimals
#       mutate(across(everything(), as.character)) %>%  # Ensure all columns are characters
#       mutate(across(everything(), ~ ifelse(grepl("p", type),
#                                            paste0("(", trimws(.x), ")"),  # Trim any extra spaces around the value
#                                            .x)))  # Add parentheses for p.value rows
#     # Clean up column names (variable and type) for p-values
#
# print(final_table)
#
#
#
#
#     # Convert t-stat and p-value to numeric and round to two decimal places
#     regression_results <- regression_results %>%
#       mutate(across(c(stat, p), ~ round(.x, 2)))
#
#     # Pivot the table to have variables as rows and comparisons as columns
#     final_table <- regression_results %>%
#       pivot_wider(names_from = comparison, values_from = c(stat, p))
# final_table
#     # Rearrange to stack t-stats and p-values in rows
#     final_table <- final_table %>%
#       pivot_longer(cols = -variable, names_to = 'comparison', values_to = 'value') %>%
#       separate(comparison, into = c('type', 'comparison'), sep = '_', extra = 'merge') %>%
#       pivot_wider(names_from = comparison, values_from = value)
#
#     # Add formatting to ensure two decimal places for all numeric values (t-stats and p-values)
#     final_table <- final_table %>%
#       mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%  # Format with 2 decimals
#       mutate(across(everything(), as.character)) %>%  # Ensure all columns are characters
#       mutate(across(everything(), ~ ifelse(grepl("p", type),
#                                            paste0("(", trimws(.x), ")"),  # Trim any extra spaces around the value
#                                            .x)))  # Add parentheses for p.value rows
#     # Clean up column names (variable and type) for p-values
#
# print(final_table)
final_table <- final_table %>%
mutate(
variable = if_else(type == "(p)", "", variable),  # Clear variable when type == "(p)"
type = if_else(type == "(p)", "", type) # Clear type when type == "(p)"
) %>%
select(-type)  # Remove the 'type' column after modification
final_table <- final_table %>%
mutate(Question = case_when(
variable == "hhid_village" ~ "Village ID",
variable == "hhid" ~ "Household ID",
variable == "trained_hh" ~ "Trained household",
variable == "hh_age_h" ~ "Household head age",
variable == "hh_education_level_bin_h" ~ "Indicator for household head with secondary education or higher (1=Yes, 0=No)",
variable == "hh_education_skills_5_h" ~ "Indicator that household head is literate (1=Yes, 0=No)",
variable == "hh_gender_h" ~ "Household head gender (1=Male, 0=Female)",
variable == "hh_numero" ~ "Size of household",
variable == "hh_03_" ~ "Indicator for those who worked in domestic agricultural activities (1=Yes, 0=No) †",
variable == "hh_10_" ~ "Hours per week spent within 1 meter of surface water source",
variable == "hh_12_6_" ~ "Indicator for those who harvested aquatic vegetation, among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_16_" ~ "Hours spent producing, purchasing, or applying fertilizer",
variable == "hh_15_2" ~ "Indicator for making fertilizer (compost) among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_26_" ~ "Indicator if currently enrolled in formal school (1=Yes, 0=No, asked to children) †",
variable == "hh_27_" ~ "Indicator if attended non-formal school or training? (1=Yes, 0=No, asked to children) †",
variable == "hh_29_bin" ~ "Indicator if achieved any level higher than primary grade (1=Yes, 0=No, asked to children)",
variable == "hh_31_bin" ~ "Indicator if student completed studies or moved to next class (1=Yes, 0=No, asked to children)",
variable == "hh_37_" ~ "Indicator if missed >1 consecutive week of school due to illness? (1=Yes, 0=No, asked to children) †",
variable == "hh_38_" ~ "Number of attended school days in the past week (Asked to children)",
variable == "living_01_bin" ~ "Indicator for selected tap water as main drinking source (1=Yes, 0=No)",
variable == "game_A_total" ~ "Total paid for Game A (CFA)",
variable == "game_B_total" ~ "Total paid for Game B (CFA)",
variable == "TLU" ~ "Tropical livestock units",
variable == "agri_6_15" ~ "Number of cultivated plots",
variable == "agri_6_32_bin" ~ "Indicator if used any organic fertilizer (1=Yes, 0=No)",
variable == "agri_6_36_bin" ~ "Indicator if used any inorganic/chemical fertilizer (1=Yes, 0=No)",
variable == "total_land_ha" ~ "Total land owned (hectares)",
variable == "agri_6_34_comp_any" ~ "Used any compost on any parcel (1=Yes, 0=No) †",
variable == "agri_income_01" ~ "Indicator if engaged in paid agricultural work in last 12 months (1=Yes, 0=No) †",
variable == "agri_income_05" ~ "Amount received for agricultural work",
variable == "beliefs_01_bin" ~ "Probability of contracting bilharzia (1=Strongly agree/Agree) +",
variable == "beliefs_02_bin" ~ "Probability of household member contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_03_bin" ~ "Probability of a child contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_04_bin" ~ "Agree: Village land should belong to community (1=Yes, 0=No) +",
variable == "beliefs_05_bin" ~ "Agree: Village water sources should belong to community (1=Yes, 0=No) +",
variable == "beliefs_06_bin" ~ "Agree: Right to products from own land (1=Yes, 0=No) +",
variable == "beliefs_07_bin" ~ "Agree: Right to products from community land worked on (1=Yes, 0=No) +",
variable == "beliefs_08_bin" ~ "Agree: Right to products from community water sources fished in (1=Yes, 0=No) +",
variable == "beliefs_09_bin" ~ "Agree: Right to products from community water sources harvested from (1=Yes, 0=No) +",
variable == "health_5_3_bin" ~ "Indicator for bilharzia or diarrhea in the past 12 months (1=Yes, 0=No, among those reporting illness)",
variable == "health_5_6_" ~ "Indicator for Diagnosed with schistosomiasis (1=Yes, 0=No) †",
variable == "num_water_access_points" ~ "Number of village water access points",
variable == "q_51" ~ "Distance to nearest healthcare center (km) [village level]",
variable == "target_village" ~ "Indicator if auction village (1=Yes, 0=No)",
TRUE ~ variable  # Default case
))
final_table <- final_table %>% select(Question, everything()) %>%
rename(Variable = variable,
`Control vs Private Treatment` = `Control vs Treatment1`,
`Control vs Public Treatment` = `Control vs Treatment2`,
`Control vs Public & Private Treatment` = `Control vs Treatment3`,
`Private Treatment vs Public Treatment` = `Treatment1 vs Treatment2`,
`Private Treatment vs Public & Private Treatment` = `Treatment1 vs Treatment3`,
`Public Treatment vs Public & Private Treatment` = `Treatment2 vs Treatment3`)
final_table
# Function to compute Joint F-statistics for each treatment arm (Wide Format)
run_joint_f_test <- function(data, treatment_col, vars_to_test) {
results <- list()
# Get all treatment arms except 'Control'
treatments <- unique(data[[treatment_col]])
treatments <- treatments[treatments != "Control"]  # Exclude 'Control'
for (arm in treatments) {
# Subset the data for the current treatment group vs. Control
subset <- data[data[[treatment_col]] %in% c("Control", arm), ]
# Create regression formula (e.g., hh_15_2 + hh_26_ + hh_27_ ~ group)
formula <- as.formula(paste(paste(vars_to_test, collapse = " + "), "~", treatment_col))
# Run the regression model
model <- lm(formula, data = subset)
# Compute F-statistic for the joint test
f_stat <- summary(model)$fstatistic[1]
p_value <- pf(f_stat, df1 = summary(model)$fstatistic[2], df2 = summary(model)$fstatistic[3], lower.tail = FALSE)
# Store results
results <- append(results, list(data.frame(treatment = arm,
f_statistic = round(f_stat, 2),
p_value = round(p_value, 4))))
}
# Combine and return the results as a data frame
return(bind_rows(results))
}
# Example usage with the wide-format synthetic data
joint_f_test_results <- run_joint_f_test(df_wide, treatment_col = "group", vars_to_test = c("hh_15_2", "hh_26_", "hh_27_", "hh_30_", "hh_35_"))
# Print results
print(joint_f_test_results)
# Function to compute Joint F-statistics for each treatment arm (Wide Format)
run_joint_f_test <- function(data, treatment_col, vars_to_test) {
results <- list()
# Get all treatment arms except 'Control'
treatments <- unique(data[[treatment_col]])
treatments <- treatments[treatments != "Control"]  # Exclude 'Control'
for (arm in treatments) {
# Subset the data for the current treatment group vs. Control
subset <- data[data[[treatment_col]] %in% c("Control", arm), ]
# Create regression formula (e.g., hh_15_2 + hh_26_ + hh_27_ ~ group)
formula <- as.formula(paste(paste(vars_to_test, collapse = " + "), "~", treatment_col))
# Run the regression model
model <- lm(formula, data = subset)
# Compute F-statistic for the joint test
f_stat <- summary(model)$fstatistic[1]
p_value <- pf(f_stat, df1 = summary(model)$fstatistic[2], df2 = summary(model)$fstatistic[3], lower.tail = FALSE)
# Store results
results <- append(results, list(data.frame(treatment = arm,
f_statistic = round(f_stat, 2),
p_value = round(p_value, 4))))
}
# Combine and return the results as a data frame
return(bind_rows(results))
}
# Example usage with the wide-format synthetic data
joint_f_test_results <- run_joint_f_test(df_wide, treatment_col = "group", vars_to_test = c("hh_15_2", "hh_26_", "hh_27_", "hh_30_", "hh_35_"))
# Print results
print(joint_f_test_results)
# Load required libraries
library(dplyr)
library(tidyr)
# Set seed for reproducibility
set.seed(42)
# Define groups
groups <- c("Control", "Treatment1", "Treatment2", "Treatment3", "Local Control")
group_sizes <- rep(100, 5)  # 100 households per group
# Define possible variables
variables <- c("hh_15_2", "hh_26_", "hh_27_", "hh_30_", "hh_35_")
# Generate household IDs
hhid_villages <- paste0("010A", rep(1:5, each = 100))
hhids <- paste0("010A02", 1:500)
# Create base dataframe with household IDs and groups
df_wide <- data.frame(
hhid_village = rep(hhid_villages, times = 1),
hhid = rep(hhids, times = 1),
group = rep(groups, each = 100)  # Assigning treatment groups
)
# Add variables as separate columns (WIDE format)
for (var in variables) {
df_wide[[var]] <- rnorm(500, mean = 0, sd = 1)  # Normally distributed values
}
# Apply treatment effects
df_wide[df_wide$group == "Treatment1", variables] <- df_wide[df_wide$group == "Treatment1", variables] + 1
df_wide[df_wide$group == "Treatment2", variables] <- df_wide[df_wide$group == "Treatment2", variables] - 1
df_wide[df_wide$group == "Treatment3", variables] <- df_wide[df_wide$group == "Treatment3", variables] + 0.5
# Save the data if needed
write.csv(df_wide, "synthetic_wide_data.csv", row.names = FALSE)
# View first few rows
head(df_wide)
# Function to compute Joint F-statistics for each treatment arm (Wide Format)
run_joint_f_test <- function(data, treatment_col, vars_to_test) {
results <- list()
# Get all treatment arms except 'Control'
treatments <- unique(data[[treatment_col]])
treatments <- treatments[treatments != "Control"]  # Exclude 'Control'
for (arm in treatments) {
# Subset the data for the current treatment group vs. Control
subset <- data[data[[treatment_col]] %in% c("Control", arm), ]
# Create regression formula (e.g., hh_15_2 + hh_26_ + hh_27_ ~ group)
formula <- as.formula(paste(paste(vars_to_test, collapse = " + "), "~", treatment_col))
# Run the regression model
model <- lm(formula, data = subset)
# Compute F-statistic for the joint test
f_stat <- summary(model)$fstatistic[1]
p_value <- pf(f_stat, df1 = summary(model)$fstatistic[2], df2 = summary(model)$fstatistic[3], lower.tail = FALSE)
# Store results
results <- append(results, list(data.frame(treatment = arm,
f_statistic = round(f_stat, 2),
p_value = round(p_value, 4))))
}
# Combine and return the results as a data frame
return(bind_rows(results))
}
# Example usage with the wide-format synthetic data
joint_f_test_results <- run_joint_f_test(df_wide, treatment_col = "group", vars_to_test = c("hh_15_2", "hh_26_", "hh_27_", "hh_30_", "hh_35_"))
# Print results
print(joint_f_test_results)
run_pairwise_f_test <- function(data, treatment_col, vars_to_test) {
results <- list()
# Get all treatment arms (excluding 'Control')
treatments <- unique(data[[treatment_col]])
treatments <- treatments[treatments != "Control"]
# Loop over all pairwise combinations of treatments
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
# Subset the data for the current pair of treatments
subset <- data[data[[treatment_col]] %in% c(treatments[i], treatments[j]), ]
# Create regression formula (e.g., hh_15_2 + hh_26_ + hh_27_ ~ group)
formula <- as.formula(paste(paste(vars_to_test, collapse = " + "), "~", treatment_col))
# Run the regression model
model <- lm(formula, data = subset)
# Compute F-statistic for the joint test
f_stat <- summary(model)$fstatistic[1]
p_value <- pf(f_stat, df1 = summary(model)$fstatistic[2], df2 = summary(model)$fstatistic[3], lower.tail = FALSE)
# Store results for this pairwise comparison
results <- append(results, list(data.frame(treatment_comparison = paste(treatments[i], "vs", treatments[j]),
f_statistic = round(f_stat, 2),
p_value = round(p_value, 4))))
}
}
# Combine and return the results as a data frame
return(bind_rows(results))
}
# Example usage
pairwise_f_test_results <- run_pairwise_f_test(df_wide, treatment_col = "group", vars_to_test = c("hh_15_2", "hh_26_", "hh_27_", "hh_30_", "hh_35_"))
print(pairwise_f_test_results)
vars_to_test_fjoint <- setdiff(names(balance_df), c("hhid", "hhid_village", "treatment_group"))
joint_f_test_results <- run_pairwise_f_test(balance_df, treatment_col = "treatment_group", vars_to_test = vars_to_test_fjoint)
print(joint_f_test_results)
f_stats_row <- data.frame(
variable = "F statistics of Joint F-test:",
treatment1_vs_treatment2 = pairwise_f_test_results$f_statistic_Treatment1_vs_Treatment2[1],
treatment1_vs_local_control = pairwise_f_test_results$f_statistic_Treatment1_vs_Local_Control[1],
treatment1_vs_treatment3 = pairwise_f_test_results$f_statistic_Treatment1_vs_Treatment3[1],
treatment2_vs_local_control = pairwise_f_test_results$f_statistic_Treatment2_vs_Local_Control[1],
treatment2_vs_treatment3 = pairwise_f_test_results$f_statistic_Treatment2_vs_Treatment3[1]
)
f_stats_row <- data.frame(
variable = "F statistics of Joint F-test:",
treatment1_vs_treatment2 = joint_f_test_results$f_statistic_Treatment1_vs_Treatment2[1],
treatment1_vs_local_control = joint_f_test_results$f_statistic_Treatment1_vs_Local_Control[1],
treatment1_vs_treatment3 = joint_f_test_results$f_statistic_Treatment1_vs_Treatment3[1],
treatment2_vs_local_control = joint_f_test_results$f_statistic_Treatment2_vs_Local_Control[1],
treatment2_vs_treatment3 = joint_f_test_results$f_statistic_Treatment2_vs_Treatment3[1]
)
# Function to compute Joint F-statistics for each treatment arm (Pairwise)
run_pairwise_f_test <- function(data, treatment_col, vars_to_test) {
results <- list()
# Get all treatment arms (excluding 'Control')
treatments <- unique(data[[treatment_col]])
treatments <- treatments[treatments != "Control"]
# Loop over all pairwise combinations of treatments
for (i in 1:(length(treatments) - 1)) {
for (j in (i + 1):length(treatments)) {
# Subset the data for the current pair of treatments
subset <- data[data[[treatment_col]] %in% c(treatments[i], treatments[j]), ]
# Create regression formula (e.g., hh_15_2 + hh_26_ + hh_27_ ~ group)
formula <- as.formula(paste(paste(vars_to_test, collapse = " + "), "~", treatment_col))
# Run the regression model
model <- lm(formula, data = subset)
# Compute F-statistic for the joint test
f_stat <- summary(model)$fstatistic[1]
p_value <- pf(f_stat, df1 = summary(model)$fstatistic[2], df2 = summary(model)$fstatistic[3], lower.tail = FALSE)
# Store results for this pairwise comparison
results <- append(results, list(data.frame(treatment_comparison = paste(treatments[i], "vs", treatments[j]),
f_statistic = round(f_stat, 2),
p_value = round(p_value, 4))))
}
}
# Combine and return the results as a data frame
return(bind_rows(results))
}
# Example usage
pairwise_f_test_results <- run_pairwise_f_test(df_wide, treatment_col = "group", vars_to_test = c("hh_15_2", "hh_26_", "hh_27_", "hh_30_", "hh_35_"))
# Transform pairwise F-test results into the desired format
pairwise_f_test_results <- pairwise_f_test_results %>%
pivot_wider(names_from = treatment_comparison, values_from = c(f_statistic, p_value)) %>%
rename_with(~gsub(" ", "_", .), everything()) # Clean up column names
# Add rows for F-statistics and P-values
f_stats_row <- data.frame(
variable = "F statistics of Joint F-test:",
treatment1_vs_treatment2 = pairwise_f_test_results$f_statistic_Treatment1_vs_Treatment2[1],
treatment1_vs_local_control = pairwise_f_test_results$f_statistic_Treatment1_vs_Local_Control[1],
treatment1_vs_treatment3 = pairwise_f_test_results$f_statistic_Treatment1_vs_Treatment3[1],
treatment2_vs_local_control = pairwise_f_test_results$f_statistic_Treatment2_vs_Local_Control[1],
treatment2_vs_treatment3 = pairwise_f_test_results$f_statistic_Treatment2_vs_Treatment3[1]
)
p_values_row <- data.frame(
variable = "P-value",
treatment1_vs_treatment2 = paste0("(", round(pairwise_f_test_results$p_value_Treatment1_vs_Treatment2[1], 4), ")"),
treatment1_vs_local_control = paste0("(", round(pairwise_f_test_results$p_value_Treatment1_vs_Local_Control[1], 4), ")"),
treatment1_vs_treatment3 = paste0("(", round(pairwise_f_test_results$p_value_Treatment1_vs_Treatment3[1], 4), ")"),
treatment2_vs_local_control = paste0("(", round(pairwise_f_test_results$p_value_Treatment2_vs_Local_Control[1], 4), ")"),
treatment2_vs_treatment3 = paste0("(", round(pairwise_f_test_results$p_value_Treatment2_vs_Treatment3[1], 4), ")")
)
# Combine pairwise results and append the F-stat and P-value rows
final_table <- bind_rows(pairwise_f_test_results, f_stats_row, p_values_row)
