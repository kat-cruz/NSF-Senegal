projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19 = if_else(hh_19 == 0 & hh_18 == 0, 0, hh_19),
hh_31 = if_else(hh_30 == 0 & hh_26 == 1, 0, hh_31),  # hh_30 conditional on hh_26 = 1
hh_33 = if_else(hh_26 == 0 & hh_32 == 0, 0, hh_33),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12 = if_else(hh_10 == 0, 0, hh_12)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_19_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0 & hh_26_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12_ = if_else(hh_10 == 0, 0, hh_12_)
)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_19_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0 & hh_26_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12_ = if_else(hh_10 == 0, 0, hh_12_)
)
view(matched_only_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
view(matched_only_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
view(matched_only_df)
read(matched_only_df)
name(matched_only_df)
names(matched_only_df)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
#turn NAs into zeros
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_19_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0 & hh_26_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12_ = if_else(hh_10 == 0, 0, hh_12_)
)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data Management/_PartnerData/Child infection dataframe/Dataframe"
))
}
file_path_infection_df <- file.path(proj$p1, "child_infection_dataframe_features.dta")
infection_df <- read_dta(file_path_infection_df)
matched_only_df <- infection_df %>%
filter(match_score != "")
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
# Calculate egg counts
matched_only_df <- matched_only_df %>%
# 1) Calculate S. haematobium egg count
mutate(
sh_egg_count = if_else(fu_p1 > 0, fu_p1, fu_p2),  # max of fu_p1 and fu_p2, only use fu_p2 if fu_p1 is zero
#  2) Calculate S. mansoni egg count
# Calculate average of each pass
p1_avg = (p1_kato1_k1_pg + p1_kato2_k2_peg) / 2,
p2_avg = (p2_kato1_k1_epg + p2_kato2_k2_epg) / 2,
# Only calculate p2_avg if p1_avg is zero, then take the maximum of p1_avg and p2_avg
sm_egg_count = if_else(p1_avg > 0, p1_avg, p2_avg)
)# %>%
#Change variables to factors
# matched_only_df <- matched_only_df %>%
#   mutate(
#     health_5_3_2_ = as.factor(health_5_3_2_),
#     health_5_5_ = as.factor(health_5_5_),
#     health_5_6_ = as.factor(health_5_6_),
#     health_5_8_ = as.factor(health_5_8_),
#     health_5_9_ = as.factor(health_5_9_),
#     health_5_10_ = as.factor(health_5_10_)
# )
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_19_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0 & hh_26_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12_ = if_else(hh_10 == 0, 0, hh_12_)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_19_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0 & hh_26_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12_ = if_else(hh_10_ == 0, 0, hh_12_)
)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_19_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0 & hh_26_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12_1_ = if_else(hh_10_ == 0, 0, hh_12_1_)
hh_12_1_ = if_else(hh_10_ == 0, 0, hh_12_1_)
names(matched_only_df)
matched_only_df <- matched_only_df %>%
mutate(
hh_19_ = if_else(hh_19_ == 0 & hh_18_ == 0, 0, hh_19_),
hh_31_ = if_else(hh_30_ == 0 & hh_26_ == 0, 0, hh_31_),  # hh_30 conditional on hh_26 = 1
hh_33_ = if_else(hh_26_ == 0 & hh_32_ == 0, 0, hh_33_),
living_03 = if_else(living_02 == 0, 0, living_03),
living_04 = 0,  # No condition provided
hh_12_1_ = if_else(hh_10_ == 0, 0, hh_12_1_),
hh_12_2_ = if_else(hh_10_ == 0, 0, hh_12_2_),
hh_12_3_ = if_else(hh_10_ == 0, 0, hh_12_3_),
hh_12_4_ = if_else(hh_10_ == 0, 0, hh_12_4_),
hh_12_5_ = if_else(hh_10_ == 0, 0, hh_12_5_),
hh_12_6_ = if_else(hh_10_ == 0, 0, hh_12_6_),
hh_12_7_ = if_else(hh_10_ == 0, 0, hh_12_7_),
hh_12_8_ = if_else(hh_10_ == 0, 0, hh_12_8_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
matched_only_df <- matched_only_df %>%
mutate(
total_time = ifelse(is.na(total_time), 0, total_time),
scaled = ifelse(is.na(scaled), 0, scaled))
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
# Define the prefixes
prefixes_categ <- c("hh_19_", "hh_31_", "hh_33_", "living_01", "living_03", "living_04")
# Recode the values for the variables
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = recode(
hh_31_,
`1` = "Graduated, studies completed",
`2` = "Moving to the next class",
`3` = "Failure, repetition",
`4` = "Failure, dismissal",
`5` = "Dropping out during the year"
),
hh_33_ = recode(
hh_33_,
`1` = "Lower",
`2` = "About the same",
`3` = "Superior"
),
living_01 = recode(
living_01,
`1` = "Interior tap",
`2` = "Public tap",
`3` = "Neighbor’s tap",
`4` = "Protected well",
`5` = "Unprotected well",
`6` = "Drill hole",
`7` = "Tanker service",
`8` = "Water seller",
`9` = "Source",
`10` = "Stream",
`99` = "Other"
),
living_03 = recode(
living_03,
`1` = "Bleach/Aqua tabs",
`2` = "Boil",
`3` = "Filtration",
`99` = "Other (to be specified)"
),
living_04 = recode(
living_04,
`0` = "None/outside",
`1` = "Flush with sewer",
`2` = "Toilet flush with septic tank",
`3` = "Bucket",
`4` = "Covered pit latrines",
`5` = "Uncovered pit latrines",
`6` = "Improved latrines",
`99` = "Others"
),
hh_19_ = recode(
hh_19_,
`1` = "Lake",
`2` = "Pond",
`3` = "River",
`4` = "Irrigation channel",
`99` = "Other, give details"
)
)
# Generate categorical summary
output_categ <- as.data.frame(categ_summary_l(matched_only_df, prefixes_categ))
rownames(output_categ) <- NULL
# # Variable labels mapping
# variable_labels <- c(
#   "hh_19_" = "Source of water",
#   "hh_31_" = "Result achieved in academic year",
#   "hh_33_" = "Performance in class",
#   "living_01" = "Source of drinking water",
#   "living_03" = "How is water treated",
#   "living_04" = "Main type of toilet used"
# )
# # Rename variables using the labels
# Rename variables in the dataframe
output_categ <- output_categ %>%
mutate(Variable = recode(Variable,
"hh_19_" = "Source of water",
"hh_31_" = "Result achieved in academic year",
"hh_33_" = "Performance in class",
"living_01" = "Source of drinking water",
"living_03" = "How is water treated",
"living_04" = "Main type of toilet used"
))
# output_categ <- output_categ %>%
#   rename(
#     `Missing` = prop_na
#   )
output_categ <- output_categ %>%
select(-prop_na)
# Create the gt table
output_categ_gt <- gt(output_categ) %>%
tab_header(
title = "Categorical Variable Summary Statistics"
)
output_categ_gt
gtsave(output_categ_gt, "categ_summary_stats.tex")
