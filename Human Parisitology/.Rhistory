}
## Selected covariates at the village level:
#view(matched_only_df)
# Specify the formula for logistic regression
formula_01_h <- sh_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_m <- sm_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_t <- total_egg ~ health_5_3_2_ + health_5_4_ + total_time
# Run logistic regressions for S. haematobium and S. mansoni
logit_model_01_h <- glm(formula_01_h, data = matched_only_df, family = binomial)
logit_model_01_m <- glm(formula_01_m, data = matched_only_df, family = binomial)
# Run OLS regression for Total Egg Count
ols_model_01_t <- lm(formula_01_t, data = matched_only_df)
# Calculate McFadden's Pseudo R^2 for the logistic models
pseudo_r2_h_01 <- pR2(logit_model_01_h)["McFadden"]
pseudo_r2_h_01 <- ifelse(is.null(pseudo_r2_h_01) || is.na(pseudo_r2_h_01), "N/A", round(as.numeric(pseudo_r2_h_01), 4))
pseudo_r2_m_01 <- pR2(logit_model_01_m)["McFadden"]
pseudo_r2_m_01 <- ifelse(is.null(pseudo_r2_m_01) || is.na(pseudo_r2_m_01), "N/A", round(as.numeric(pseudo_r2_m_01), 4))
# Calculate BIC for both logistic models
bic_value_h_01 <- BIC(logit_model_01_h)
bic_value_m_01 <- BIC(logit_model_01_m)
# Calculate robust standard errors for the logistic models
robust_se_h_01 <- sqrt(diag(vcovHC(logit_model_01_h, type = "HC1")))
robust_se_m_01 <- sqrt(diag(vcovHC(logit_model_01_m, type = "HC1")))
# Calculate R-squared, Adjusted R-squared, and RMSE for the OLS model (total_egg)
r_squared_t_01 <- summary(ols_model_01_t)$r.squared
adj_r_squared_t_01 <- summary(ols_model_01_t)$adj.r.squared
rmse_t_01 <- sqrt(mean(residuals(ols_model_01_t)^2))
# Calculate BIC for the OLS model
bic_value_t_01 <- BIC(ols_model_01_t)
# Calculate robust standard errors for the OLS model
robust_se_t_01 <- sqrt(diag(vcovHC(ols_model_01_t, type = "HC1")))
# Display summary of both logistic models and the OLS model using stargazer
logit_models_done_01 <- stargazer(logit_model_01_h, logit_model_01_m, ols_model_01_t,
covariate.labels = c("Percieved infection", "Missed school days", ""),
type = "text",
digit.separator = "",
no.space = TRUE,
column.sep.width = "3pt",
dep.var.labels = c("S. haematobium", "S. mansoni", "S. haematobium + S. mansoni egg count"),
omit.stat = c("f", "adj.rsq"),
se = list(robust_se_h_01, robust_se_m_01, robust_se_t_01),
add.lines = list(
c("Pseudo $R^2$", pseudo_r2_h, pseudo_r2_m, "N/A"),  # For OLS (not applicable)
c("BIC", round(bic_value_h_01, 2), round(bic_value_m_01, 2), round(bic_value_t_01, 2)),
c("R-squared", "", "", round(r_squared_t_01, 4)),
c("Adjusted R-squared", "", "", round(adj_r_squared_t_01, 4)),
c("RMSE", "", "", round(rmse_t_01, 4))
)
)
############################ Bivariate Logistic Regression #####################################
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/NSF-Senegal/Latex"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/NSF-Senegal/Latex"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
## Selected covariates at the village level:
#view(matched_only_df)
# Specify the formula for logistic regression
formula_01_h <- sh_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_m <- sm_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_t <- total_egg ~ health_5_3_2_ + health_5_4_ + total_time
# Run logistic regressions for S. haematobium and S. mansoni
logit_model_01_h <- glm(formula_01_h, data = matched_only_df, family = binomial)
logit_model_01_m <- glm(formula_01_m, data = matched_only_df, family = binomial)
# Run OLS regression for Total Egg Count
ols_model_01_t <- lm(formula_01_t, data = matched_only_df)
# Calculate McFadden's Pseudo R^2 for the logistic models
pseudo_r2_h_01 <- pR2(logit_model_01_h)["McFadden"]
pseudo_r2_h_01 <- ifelse(is.null(pseudo_r2_h_01) || is.na(pseudo_r2_h_01), "N/A", round(as.numeric(pseudo_r2_h_01), 4))
pseudo_r2_m_01 <- pR2(logit_model_01_m)["McFadden"]
pseudo_r2_m_01 <- ifelse(is.null(pseudo_r2_m_01) || is.na(pseudo_r2_m_01), "N/A", round(as.numeric(pseudo_r2_m_01), 4))
# Calculate BIC for both logistic models
bic_value_h_01 <- BIC(logit_model_01_h)
bic_value_m_01 <- BIC(logit_model_01_m)
# Calculate robust standard errors for the logistic models
robust_se_h_01 <- sqrt(diag(vcovHC(logit_model_01_h, type = "HC1")))
robust_se_m_01 <- sqrt(diag(vcovHC(logit_model_01_m, type = "HC1")))
# Calculate R-squared, Adjusted R-squared, and RMSE for the OLS model (total_egg)
r_squared_t_01 <- summary(ols_model_01_t)$r.squared
adj_r_squared_t_01 <- summary(ols_model_01_t)$adj.r.squared
rmse_t_01 <- sqrt(mean(residuals(ols_model_01_t)^2))
# Calculate BIC for the OLS model
bic_value_t_01 <- BIC(ols_model_01_t)
# Calculate robust standard errors for the OLS model
robust_se_t_01 <- sqrt(diag(vcovHC(ols_model_01_t, type = "HC1")))
# Display summary of both logistic models and the OLS model using stargazer
logit_models_done_01 <- stargazer(logit_model_01_h, logit_model_01_m, ols_model_01_t,
covariate.labels = c("Percieved infection", "Missed school days", ""),
type = "latex",
digit.separator = "",
no.space = TRUE,
column.sep.width = "3pt",
dep.var.labels = c("S. haematobium", "S. mansoni", "S. haematobium + S. mansoni egg count"),
omit.stat = c("f", "adj.rsq"),
se = list(robust_se_h_01, robust_se_m_01, robust_se_t_01),
add.lines = list(
c("Pseudo $R^2$", pseudo_r2_h, pseudo_r2_m, "N/A"),  # For OLS (not applicable)
c("BIC", round(bic_value_h_01, 2), round(bic_value_m_01, 2), round(bic_value_t_01, 2)),
c("R-squared", "", "", round(r_squared_t_01, 4)),
c("Adjusted R-squared", "", "", round(adj_r_squared_t_01, 4)),
c("RMSE", "", "", round(rmse_t_01, 4))
)
)
#cat(logit_models_done_01, sep = '\n', file = 'logit_modeles_01_table.tex')
#out = "logit_model_01_table.tex"
## Confusion matrix
# This code is evaluating the classification performance of a logistic regression model (logit_model_01_h) by:
#
# 1) Generating predicted probabilities of the target variable.
# 2) Using thresholds (from 0 to 1) to classify predictions as 1 (positive) or 0 (negative).
# 3) Creating confusion matrices at each threshold to calculate false negative rates (FNR) and false positive rates (FPR).
# 4) Computing a combined error metric (FNR + FPR) for each threshold to find the optimal threshold for minimizing prediction errors.
# A confusion matrix compares the predicted classifications (predictions) to the actual outcomes (matched_only_df$sh_inf):
# True Positives (TP): Correctly predicted infected.
# True Negatives (TN): Correctly predicted not infected.
# False Positives (FP): Predicted infected but not infected.
# False Negatives (FN): Predicted not infected but actually infected.
# False Negative Rate (FNR): Proportion of actual positives classified as negatives.
# False Positive Rate (FPR): Proportion of actual negatives classified as positives.
# generate predicted probabilities
predicted_probs <- predict(logit_model_01_h, type = "response")
# define thresholds
thresholds <- seq(0, 1, by = 0.1)
# iterate over thresholds and calculate errors
errors <- sapply(thresholds, function(t) {
predictions <- ifelse(predicted_probs > t, 1, 0)
# Create a complete confusion matrix
confusion_matrix <- table(
factor(predictions, levels = c(0, 1)),
factor(matched_only_df$sh_inf, levels = c(0, 1))
)
# Avoid subscript out of bounds by checking if the matrix has both rows/columns
if (all(dim(confusion_matrix) == c(2, 2))) {
fnr <- confusion_matrix[2, 1] / sum(confusion_matrix[, 1])  # FN / (FN + TP)
fpr <- confusion_matrix[1, 2] / sum(confusion_matrix[, 2])  # FP / (FP + TN)
} else {
# If any row/column is missing, set FNR/FPR to NA or a default value
fnr <- NA
fpr <- NA
}
return(fnr + fpr)
})
## Confusion matrix
# This code is evaluating the classification performance of a logistic regression model (logit_model_01_h) by:
#
# 1) Generating predicted probabilities of the target variable.
# 2) Using thresholds (from 0 to 1) to classify predictions as 1 (positive) or 0 (negative).
# 3) Creating confusion matrices at each threshold to calculate false negative rates (FNR) and false positive rates (FPR).
# 4) Computing a combined error metric (FNR + FPR) for each threshold to find the optimal threshold for minimizing prediction errors.
# A confusion matrix compares the predicted classifications (predictions) to the actual outcomes (matched_only_df$sh_inf):
# True Positives (TP): Correctly predicted infected.
# True Negatives (TN): Correctly predicted not infected.
# False Positives (FP): Predicted infected but not infected.
# False Negatives (FN): Predicted not infected but actually infected.
# False Negative Rate (FNR): Proportion of actual positives classified as negatives.
# False Positive Rate (FPR): Proportion of actual negatives classified as positives.
# generate predicted probabilities
predicted_probs <- predict(logit_model_01_h, type = "response")
# define thresholds
thresholds <- seq(0, 1, by = 0.1)
# iterate over thresholds and calculate errors
errors <- sapply(thresholds, function(t) {
predictions <- ifelse(predicted_probs > t, 1, 0)
# Create a complete confusion matrix
confusion_matrix <- table(
factor(predictions, levels = c(0, 1)),
factor(matched_only_df$sh_inf, levels = c(0, 1))
)
# Avoid subscript out of bounds by checking if the matrix has both rows/columns
if (all(dim(confusion_matrix) == c(2, 2))) {
fnr <- confusion_matrix[2, 1] / sum(confusion_matrix[, 1])  # FN / (FN + TP)
fpr <- confusion_matrix[1, 2] / sum(confusion_matrix[, 2])  # FP / (FP + TN)
} else {
# If any row/column is missing, set FNR/FPR to NA or a default value
fnr <- NA
fpr <- NA
}
return(fnr + fpr)
})
length(predictions)       # Predicted values
############################ Bivariate Logistic Regression #####################################
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/NSF-Senegal/Latex"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/NSF-Senegal/Latex"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(total_time), 0, total_time))
## Selected covariates at the village level:
#view(matched_only_df)
# Specify the formula for logistic regression
formula_01_h <- sh_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_m <- sm_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_t <- total_egg ~ health_5_3_2_ + health_5_4_ + total_time
# Run logistic regressions for S. haematobium and S. mansoni
logit_model_01_h <- glm(formula_01_h, data = matched_only_df, family = binomial)
logit_model_01_m <- glm(formula_01_m, data = matched_only_df, family = binomial)
# Run OLS regression for Total Egg Count
ols_model_01_t <- lm(formula_01_t, data = matched_only_df)
# Calculate McFadden's Pseudo R^2 for the logistic models
pseudo_r2_h_01 <- pR2(logit_model_01_h)["McFadden"]
pseudo_r2_h_01 <- ifelse(is.null(pseudo_r2_h_01) || is.na(pseudo_r2_h_01), "N/A", round(as.numeric(pseudo_r2_h_01), 4))
pseudo_r2_m_01 <- pR2(logit_model_01_m)["McFadden"]
pseudo_r2_m_01 <- ifelse(is.null(pseudo_r2_m_01) || is.na(pseudo_r2_m_01), "N/A", round(as.numeric(pseudo_r2_m_01), 4))
# Calculate BIC for both logistic models
bic_value_h_01 <- BIC(logit_model_01_h)
bic_value_m_01 <- BIC(logit_model_01_m)
# Calculate robust standard errors for the logistic models
robust_se_h_01 <- sqrt(diag(vcovHC(logit_model_01_h, type = "HC1")))
robust_se_m_01 <- sqrt(diag(vcovHC(logit_model_01_m, type = "HC1")))
# Calculate R-squared, Adjusted R-squared, and RMSE for the OLS model (total_egg)
r_squared_t_01 <- summary(ols_model_01_t)$r.squared
adj_r_squared_t_01 <- summary(ols_model_01_t)$adj.r.squared
rmse_t_01 <- sqrt(mean(residuals(ols_model_01_t)^2))
# Calculate BIC for the OLS model
bic_value_t_01 <- BIC(ols_model_01_t)
# Calculate robust standard errors for the OLS model
robust_se_t_01 <- sqrt(diag(vcovHC(ols_model_01_t, type = "HC1")))
# Display summary of both logistic models and the OLS model using stargazer
logit_models_done_01 <- stargazer(logit_model_01_h, logit_model_01_m, ols_model_01_t,
covariate.labels = c("Percieved infection", "Missed school days", ""),
type = "latex",
digit.separator = "",
no.space = TRUE,
column.sep.width = "3pt",
dep.var.labels = c("S. haematobium", "S. mansoni", "S. haematobium + S. mansoni egg count"),
omit.stat = c("f", "adj.rsq"),
se = list(robust_se_h_01, robust_se_m_01, robust_se_t_01),
add.lines = list(
c("Pseudo $R^2$", pseudo_r2_h, pseudo_r2_m, "N/A"),  # For OLS (not applicable)
c("BIC", round(bic_value_h_01, 2), round(bic_value_m_01, 2), round(bic_value_t_01, 2)),
c("R-squared", "", "", round(r_squared_t_01, 4)),
c("Adjusted R-squared", "", "", round(adj_r_squared_t_01, 4)),
c("RMSE", "", "", round(rmse_t_01, 4))
)
)
#cat(logit_models_done_01, sep = '\n', file = 'logit_modeles_01_table.tex')
#out = "logit_model_01_table.tex"
## Confusion matrix
# This code is evaluating the classification performance of a logistic regression model (logit_model_01_h) by:
#
# 1) Generating predicted probabilities of the target variable.
# 2) Using thresholds (from 0 to 1) to classify predictions as 1 (positive) or 0 (negative).
# 3) Creating confusion matrices at each threshold to calculate false negative rates (FNR) and false positive rates (FPR).
# 4) Computing a combined error metric (FNR + FPR) for each threshold to find the optimal threshold for minimizing prediction errors.
# A confusion matrix compares the predicted classifications (predictions) to the actual outcomes (matched_only_df$sh_inf):
# True Positives (TP): Correctly predicted infected.
# True Negatives (TN): Correctly predicted not infected.
# False Positives (FP): Predicted infected but not infected.
# False Negatives (FN): Predicted not infected but actually infected.
# False Negative Rate (FNR): Proportion of actual positives classified as negatives.
# False Positive Rate (FPR): Proportion of actual negatives classified as positives.
# generate predicted probabilities
predicted_probs <- predict(logit_model_01_h, type = "response")
# define thresholds
thresholds <- seq(0, 1, by = 0.1)
# iterate over thresholds and calculate errors
errors <- sapply(thresholds, function(t) {
predictions <- ifelse(predicted_probs > t, 1, 0)
# Create a complete confusion matrix
confusion_matrix <- table(
factor(predictions, levels = c(0, 1)),
factor(matched_only_df$sh_inf, levels = c(0, 1))
)
# Avoid subscript out of bounds by checking if the matrix has both rows/columns
if (all(dim(confusion_matrix) == c(2, 2))) {
fnr <- confusion_matrix[2, 1] / sum(confusion_matrix[, 1])  # FN / (FN + TP)
fpr <- confusion_matrix[1, 2] / sum(confusion_matrix[, 2])  # FP / (FP + TN)
} else {
# If any row/column is missing, set FNR/FPR to NA or a default value
fnr <- NA
fpr <- NA
}
return(fnr + fpr)
})
view(matched_only_df)
#turn NAs into zeros
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_),
total_time = ifelse(is.na(total_time), 0, total_time))
view(matched_only_df)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
view(matched_only_df)
#turn NAs into zeros
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
matched_only_df <- matched_only_df %>%
mutate(
total_time = ifelse(is.na(total_time), 0, total_time))
view(matched_only_df)
#turn NAs into zeros
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = ifelse(is.na(hh_31_), 0, hh_31_),
hh_33_ = ifelse(is.na(hh_33_), 0, hh_33_),
health_5_4_ = ifelse(is.na(health_5_4_), 0, health_5_4_),
health_5_3_2_ = ifelse(is.na(health_5_3_2_), 0, health_5_3_2_)
)
#Create total egg count:
matched_only_df <- matched_only_df %>%
mutate(
total_egg = sm_egg_count + sh_egg_count
)
#Scale watercontact variable
# create total time variable. Replace "h" with ":" and calculate total time
matched_only_df$total_time <- as.numeric(difftime(
as.POSIXct(gsub("h", ":", matched_only_df$Endsamplingtime), format = "%H:%M"),
as.POSIXct(gsub("h", ":", matched_only_df$BegeningTimesampling), format = "%H:%M"),
units = "mins"
))
#Create scaled variable:
matched_only_df$Humanwatercontact <- as.numeric(matched_only_df$Humanwatercontact)
matched_only_df <- matched_only_df %>%
mutate(scaled = Humanwatercontact / total_time)
matched_only_df <- matched_only_df %>%
mutate(
total_time = ifelse(is.na(total_time), 0, total_time),
scaled = ifelse(is.na(scaled), 0, scaled))
view(matched_only_df)
## Confusion matrix
# This code is evaluating the classification performance of a logistic regression model (logit_model_01_h) by:
#
# 1) Generating predicted probabilities of the target variable.
# 2) Using thresholds (from 0 to 1) to classify predictions as 1 (positive) or 0 (negative).
# 3) Creating confusion matrices at each threshold to calculate false negative rates (FNR) and false positive rates (FPR).
# 4) Computing a combined error metric (FNR + FPR) for each threshold to find the optimal threshold for minimizing prediction errors.
# A confusion matrix compares the predicted classifications (predictions) to the actual outcomes (matched_only_df$sh_inf):
# True Positives (TP): Correctly predicted infected.
# True Negatives (TN): Correctly predicted not infected.
# False Positives (FP): Predicted infected but not infected.
# False Negatives (FN): Predicted not infected but actually infected.
# False Negative Rate (FNR): Proportion of actual positives classified as negatives.
# False Positive Rate (FPR): Proportion of actual negatives classified as positives.
# generate predicted probabilities
predicted_probs <- predict(logit_model_01_h, type = "response")
# define thresholds
thresholds <- seq(0, 1, by = 0.1)
# iterate over thresholds and calculate errors
errors <- sapply(thresholds, function(t) {
predictions <- ifelse(predicted_probs > t, 1, 0)
# Create a complete confusion matrix
confusion_matrix <- table(
factor(predictions, levels = c(0, 1)),
factor(matched_only_df$sh_inf, levels = c(0, 1))
)
# Avoid subscript out of bounds by checking if the matrix has both rows/columns
if (all(dim(confusion_matrix) == c(2, 2))) {
fnr <- confusion_matrix[2, 1] / sum(confusion_matrix[, 1])  # FN / (FN + TP)
fpr <- confusion_matrix[1, 2] / sum(confusion_matrix[, 2])  # FP / (FP + TN)
} else {
# If any row/column is missing, set FNR/FPR to NA or a default value
fnr <- NA
fpr <- NA
}
return(fnr + fpr)
})
############################ Bivariate Logistic Regression #####################################
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/NSF-Senegal/Latex"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/NSF-Senegal/Latex"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
## Selected covariates at the village level:
#view(matched_only_df)
# Specify the formula for logistic regression
formula_01_h <- sh_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_m <- sm_inf ~ health_5_3_2_ + health_5_4_ + total_time
formula_01_t <- total_egg ~ health_5_3_2_ + health_5_4_ + total_time
# Run logistic regressions for S. haematobium and S. mansoni
logit_model_01_h <- glm(formula_01_h, data = matched_only_df, family = binomial)
logit_model_01_m <- glm(formula_01_m, data = matched_only_df, family = binomial)
# Run OLS regression for Total Egg Count
ols_model_01_t <- lm(formula_01_t, data = matched_only_df)
# Calculate McFadden's Pseudo R^2 for the logistic models
pseudo_r2_h_01 <- pR2(logit_model_01_h)["McFadden"]
pseudo_r2_h_01 <- ifelse(is.null(pseudo_r2_h_01) || is.na(pseudo_r2_h_01), "N/A", round(as.numeric(pseudo_r2_h_01), 4))
pseudo_r2_m_01 <- pR2(logit_model_01_m)["McFadden"]
pseudo_r2_m_01 <- ifelse(is.null(pseudo_r2_m_01) || is.na(pseudo_r2_m_01), "N/A", round(as.numeric(pseudo_r2_m_01), 4))
# Calculate BIC for both logistic models
bic_value_h_01 <- BIC(logit_model_01_h)
bic_value_m_01 <- BIC(logit_model_01_m)
# Calculate robust standard errors for the logistic models
robust_se_h_01 <- sqrt(diag(vcovHC(logit_model_01_h, type = "HC1")))
robust_se_m_01 <- sqrt(diag(vcovHC(logit_model_01_m, type = "HC1")))
# Calculate R-squared, Adjusted R-squared, and RMSE for the OLS model (total_egg)
r_squared_t_01 <- summary(ols_model_01_t)$r.squared
adj_r_squared_t_01 <- summary(ols_model_01_t)$adj.r.squared
rmse_t_01 <- sqrt(mean(residuals(ols_model_01_t)^2))
# Calculate BIC for the OLS model
bic_value_t_01 <- BIC(ols_model_01_t)
# Calculate robust standard errors for the OLS model
robust_se_t_01 <- sqrt(diag(vcovHC(ols_model_01_t, type = "HC1")))
# Display summary of both logistic models and the OLS model using stargazer
logit_models_done_01 <- stargazer(logit_model_01_h, logit_model_01_m, ols_model_01_t,
covariate.labels = c("Percieved infection", "Missed school days", ""),
type = "latex",
digit.separator = "",
no.space = TRUE,
column.sep.width = "3pt",
dep.var.labels = c("S. haematobium", "S. mansoni", "S. haematobium + S. mansoni egg count"),
omit.stat = c("f", "adj.rsq"),
se = list(robust_se_h_01, robust_se_m_01, robust_se_t_01),
add.lines = list(
c("Pseudo $R^2$", pseudo_r2_h, pseudo_r2_m, "N/A"),  # For OLS (not applicable)
c("BIC", round(bic_value_h_01, 2), round(bic_value_m_01, 2), round(bic_value_t_01, 2)),
c("R-squared", "", "", round(r_squared_t_01, 4)),
c("Adjusted R-squared", "", "", round(adj_r_squared_t_01, 4)),
c("RMSE", "", "", round(rmse_t_01, 4))
)
)
#cat(logit_models_done_01, sep = '\n', file = 'logit_modeles_01_table.tex')
#out = "logit_model_01_table.tex"
## Confusion matrix
# This code is evaluating the classification performance of a logistic regression model (logit_model_01_h) by:
#
# 1) Generating predicted probabilities of the target variable.
# 2) Using thresholds (from 0 to 1) to classify predictions as 1 (positive) or 0 (negative).
# 3) Creating confusion matrices at each threshold to calculate false negative rates (FNR) and false positive rates (FPR).
# 4) Computing a combined error metric (FNR + FPR) for each threshold to find the optimal threshold for minimizing prediction errors.
# A confusion matrix compares the predicted classifications (predictions) to the actual outcomes (matched_only_df$sh_inf):
# True Positives (TP): Correctly predicted infected.
# True Negatives (TN): Correctly predicted not infected.
# False Positives (FP): Predicted infected but not infected.
# False Negatives (FN): Predicted not infected but actually infected.
# False Negative Rate (FNR): Proportion of actual positives classified as negatives.
# False Positive Rate (FPR): Proportion of actual negatives classified as positives.
# generate predicted probabilities
predicted_probs <- predict(logit_model_01_h, type = "response")
# define thresholds
thresholds <- seq(0, 1, by = 0.1)
# iterate over thresholds and calculate errors
errors <- sapply(thresholds, function(t) {
predictions <- ifelse(predicted_probs > t, 1, 0)
# Create a complete confusion matrix
confusion_matrix <- table(
factor(predictions, levels = c(0, 1)),
factor(matched_only_df$sh_inf, levels = c(0, 1))
)
# Avoid subscript out of bounds by checking if the matrix has both rows/columns
if (all(dim(confusion_matrix) == c(2, 2))) {
fnr <- confusion_matrix[2, 1] / sum(confusion_matrix[, 1])  # FN / (FN + TP)
fpr <- confusion_matrix[1, 2] / sum(confusion_matrix[, 2])  # FP / (FP + TN)
} else {
# If any row/column is missing, set FNR/FPR to NA or a default value
fnr <- NA
fpr <- NA
}
return(fnr + fpr)
})
# identify the optimal threshold
optimal_threshold <- thresholds[which.min(errors)]
# validate results
predictions_optimal <- ifelse(predicted_probs > optimal_threshold, 1, 0)
confusion_matrix_optimal_h_01 <- table(Predicted = predictions_optimal, Actual = matched_only_df$sh_inf)
latex_confusion <- xtable(confusion_matrix_optimal_h_01,
caption = "Confusion Matrix",
label = "tab:confusion_matrix_optimal_h_01")
cat("Optimal Threshold:", optimal_threshold, "\n")
print(confusion_matrix_optimal)
