---
title: "Parasitological Analysis"
format:
  html:
    self-contained: true
    html-table-processing: none
    toc: false
    code-fold: false
    theme: default
execute:
  echo: true
---


## Analysis Overview
##### Data source: NSF-Senegal project, 
 - Baseline & Midline CRDES survey data
 - Baseline & Midline EPLS & UCAD parasitological data
 - Baseline & Midline Notre Dame Ecological Data


This analysis proceeds in **three key steps** for each of the primary outcome variables of interest:

1. **Variable Selection using Lasso Regression**  
   We first use Lasso regression to identify the most predictive covariates for each outcome. This helps reduce dimensionality and guard against overfitting.

2. **Prediction Modeling with Logistic Regression**  
   Using the covariates selected by Lasso, we fit a logistic regression model on the training dataset to estimate the probability of infection.

3. **Evaluation using Confusion Matrices**  
   We apply the fitted model to the test data and generate confusion matrices to assess predictive performance, including metrics such as sensitivity, specificity, and overall accuracy.

---

## Outcome Variables

We focus on three infection indicators, constructed from parasitological data:

- **`sh_inf`: S. haematobium infection indicator**  
  Equals 1 if egg count from either urine filtration test (`fu_p1` or `fu_p2`) is greater than 0; otherwise 0.  
  *Represents urinary schistosomiasis.*

- **`sm_inf`: S. mansoni infection indicator**  
  Equals 1 if egg count from any of the four stool slides (`p1_kato1_k1_pg`, `p1_kato2_k2_peg`, `p2_kato1_k1_epg`, `p2_kato2_k2_epg`) is greater than 0; otherwise 0.  
  *Represents intestinal schistosomiasis.*

- **`sm_sh_inf`: Infection indicator**  
  Equals 1 if either `sh_inf` or `sm_inf` is equal to 1.  
  *Captures cases of either or both infections.*
  

<!-- INITIATE HERE - load packages -->


```{r, echo=FALSE, message=FALSE, warning=FALSE}

# packages <- c("clusterSEs", "mlogit", "writexl", "dplyr", "readr", "tidyr",
#               "haven", "data.table", "tidyverse", "estimatr", "broom", "kableExtra", "haven", "caret",
#               "sandwich", "lmtest", "stats", "nnet", "car", "aod", "clubSandwich", "glmnet", "multiwayvcov")

packages <- c("dplyr", "readr", "tidyr", "stargazer",
             "tidyverse", "kableExtra", "haven", "detectseparation",
              "sandwich", "lmtest", "stats", "clubSandwich", "glmnet", "multiwayvcov", "hdm")

# install.packages("haven")
# library("haven")
# Install any missing packages
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)

# Load the required packages without printing any output
invisible(lapply(packages, library, character.only = TRUE))


```


<!-- Define project specific paths -->

```{r, echo=FALSE, message=FALSE, warning=FALSE}
proj_paths <- list(
  projects = "C:/Users/Kateri/Box/NSF Senegal",
  alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)

# Choose the correct project root based on availability
proj_root <- if (file.exists(proj_paths$projects)) {
  proj_paths$projects
} else {
  proj_paths$alternative_projects
}

# Define project subpaths manually using file.path for cross-platform safety
proj <- list(
  p1 = file.path(proj_root, "Data_Management", "Output", "Analysis", "Human_Parasitology", "Analysis_Data")
)

# Full path to Stata file
file_path_infection_df <- file.path(proj$p1, "03_mid_base_analysis_df.dta")

# Read the dataset
infection_df <- read_dta(file_path_infection_df)

colnames(infection_df)

```



```{r, echo=FALSE, message=FALSE, warning=FALSE}

analysis_df <- infection_df %>%
  select(-Humanwatercontact, -p2_avg, -q_51, -asset_index, -hh_10_) %>%
  na.omit()

# nrow(analysis_df)
# nrow(infection_df)


```

::: {.panel-tabset}

### Training testing data

Here we create Training and Testing data to perform prediction by subsetting 70% of the data as training observations, and 30% as testing. 

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Total number of observations
n <- nrow(analysis_df)

# Create a vector of shuffled row indices
shuffled_indices <- sample(n)

# Compute the number of training observations (70%)
train_size <- floor(0.7 * n)

# Indices for training and testing
train_indices <- shuffled_indices[1:train_size]
test_indices <- shuffled_indices[(train_size + 1):n]

# Subset the dataframes
train_df <- analysis_df[train_indices, ]
test_df <- analysis_df[test_indices, ]

# Check the sizes
cat("Training set size:", nrow(train_df), "\n")
cat("Testing set size:", nrow(test_df), "\n")

```


### Summary Stats

::: {.panel-tabset}

#### Full Data 

These are the summary statistics I output when I include the full set of data I created in the data cleaning and construction process. This includes all numeric variables, and retains any missings. 

Note the outlier in age - this is due to measurement error (this individual in baseline was reported to be age 3, adn in midline was reported to be 40). 

```{r, echo=FALSE, message=FALSE, warning=FALSE}
      


summary_stats <- function(data, exclude = NULL) {
  # Remove excluded columns
  if (!is.null(exclude)) {
    data <- data[ , !(names(data) %in% exclude)]
  }

  # Keep only numeric columns
  data_numeric <- data[ , sapply(data, is.numeric)]

  # Remove columns where all values are NA
  data_numeric <- data_numeric[ , colSums(!is.na(data_numeric)) > 0, drop = FALSE]

  # Extract variable labels (if present)
  labels <- sapply(data_numeric, function(x) attr(x, "label"))

 # Compute summary statistics
  summary_df <- data.frame(
    Question = labels,
    Variable = names(data_numeric),
    N = sapply(data_numeric, function(x) sum(!is.na(x))),
    Min = round(sapply(data_numeric, function(x) min(x, na.rm = TRUE)), 2),
    Mean = round(sapply(data_numeric, function(x) mean(x, na.rm = TRUE)), 2),
    Max = round(sapply(data_numeric, function(x) max(x, na.rm = TRUE)), 2),
    SD = round(sapply(data_numeric, function(x) sd(x, na.rm = TRUE)), 2),
    row.names = NULL,
    stringsAsFactors = FALSE
  )

  return(summary_df)
}

##on full set of data
 paras_sum_stats <- summary_stats(infection_df, exclude = c("hhid_village", "village_name", "hhid", "individ", "identificant","match_score", "round" ))
 
 
```
 

```{r, echo=FALSE, message=FALSE, warning=FALSE}
 
 kable(paras_sum_stats, format = "html", caption = "Summary Statistics for Infection Data") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%")

        # saveRDS(paras_sum_stats, file = "C:/Users/Kateri/Box/NSF Senegal/Data_Management/Output/Analysis/Human_Parasitology/Tables/paras_sum_stats")
```  



#### Analysis Data

Here are the summary stats for the actual data I use to run the analysis. I firt removed variables with high amounts of missings (Humanwatercontact, p2_avg), and then dropped rows with any missings. I removed and q_51 since we'll be using q_51_W99 (winsorized at the 99th percentile) and asset_index since we'll be using asset_index_std (which is the standarized asset index).

```{r, echo=FALSE, message=FALSE, warning=FALSE}

 paras_sum_stats_ad <- summary_stats(analysis_df, exclude = c("hhid_village", "village_name", "hhid", "individ", "identificant","match_score", "round" ))

 
 kable(paras_sum_stats_ad, format = "html", caption = "Summary Statistics for Analysis Data") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%")
 
   # saveRDS(paras_sum_stats_ad, file = "C:/Users/Kateri/Box/NSF Senegal/Data_Management/Output/Analysis/Human_Parasitology/Tables/paras_sum_stats_ad")

```



:::

### SH_SM_INF Analysis

::: {.panel-tabset}

•	Run Lasso regression to determine which variables show the highest predictive power to help determine covariates. 


```{r}

exclude_vars <- c("hhid_village", "village_name", "hhid", "individ",
                  "identificant", "match_score", "round", "sh_inf", "sm_inf", "sh_egg_count","p1_avg", "sm_egg_count", "total_egg")  # Exclude outcome too


covariates <- setdiff(names(train_df), c(exclude_vars, "sm_sh_inf", "treatment_var"))

x <- data.matrix(train_df[, covariates])
y <- train_df$sm_sh_inf          # binary outcome
d <- data.matrix(train_df[, covariates])    # treatment variable — replace with your treatment variable name!

# --- step 1: lasso logistic for d ~ x ---
cv_d <- cv.glmnet(x, d, family = "binomial")
lasso_d <- glmnet(x, d, family = "binomial", lambda = cv_d$lambda.min)
selected_d <- which(coef(lasso_d)[-1] != 0)  # exclude intercept

# --- step 2: lasso logistic for y ~ x ---
cv_y <- cv.glmnet(x, y, family = "binomial")
lasso_y <- glmnet(x, y, family = "binomial", lambda = cv_y$lambda.min)
selected_y <- which(coef(lasso_y)[-1] != 0)

# --- step 3: union of selected variables ---
selected_union <- sort(unique(c(selected_d, selected_y)))

# --- step 4: final logistic regression: y ~ d + selected x ---
x_selected <- x[, selected_union, drop = FALSE]

final_data <- data.frame(y = y, d = d, x_selected)

final_formula <- as.formula(paste("y ~ d +", paste(colnames(x_selected), collapse = "+")))
final_model <- glm(final_formula, data = final_data, family = binomial())

summary(final_model)


kable(vars, format = "html", caption = "Double Selection Lasso Results") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%")



```



```{r}
# 
colnames(analysis_df)


exclude_vars <- c("hhid_village", "village_name", "hhid", "individ",
                  "identificant", "match_score", "round", "sh_inf", "sh_egg_count","p1_avg", "sm_egg_count", "total_egg")  # Exclude outcome too

# Grab all other column names
covariates <- setdiff(names(analysis_df), exclude_vars)

  # Create predictor matrix
  x <- data.matrix(analysis_df[, sh_covariates])
  y <- analysis_df$sm_sh_inf

#perform k-fold cross-validation to find optimal lambda value
sh1 <- cv.glmnet(x, y, family = "binomial", alpha = 1)

sh1_best_lambda <- sh1$lambda.min

#produce plot of test MSE by lambda value
plot(sh1)


#find coefficients of best model
sh1_best_model <- glmnet(x, y, alpha = 1, lambda = sh1_best_lambda)
coef(sh1_best_model)

#print regression table
print(sh1_best_model)

# Extract coefficients at best lambda
mat <- coef(sh1_best_model, s = sh1_best_lambda)

# Convert to named vector and find non-zero coefficients
vars_raw <- rownames(mat)[mat[, 1] != 0]

# Remove intercept from selected vars
vars <- setdiff(vars_raw, c("(Intercept)")) #confirm the precise variables we're interested in

kable(vars, format = "html", caption = "Best Predictors for inf") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%")

```


#### Prediction - all




```{r, echo=FALSE, message=FALSE, warning=FALSE}

# test_probs <- predict(sh_model, newdata = test_df, type = "response")
# 
# head(test_probs)
# 
# # For example, classify as positive if prob > 0.5
# threshold <- 0.5
# test_pred_class <- ifelse(test_probs > threshold, 1, 0)
# 
# actual <- test_df$sh_inf
# 
# table(Predicted = test_pred_class, Actual = actual)


```

We will:

- **Compute predicted probabilities** for each individual using the model.
- **Threshold Selection**: Start with a 0.5 threshold for classifying individuals as infected (probability > 0.5) or uninfected (probability ≤ 0.5).
- **Confusion Matrix**: Generate a 2x2 confusion matrix comparing predicted versus actual infections (infected vs. non-infected).
  - **False Negative Rate (FNR)**: The proportion of actual infected individuals incorrectly predicted as uninfected.
  - **False Positive Rate (FPR)**: The proportion of uninfected individuals incorrectly predicted as infected.
- **Threshold Iteration**: Incrementally adjust the threshold (e.g., from 0.1 to 0.9) and recalculate the confusion matrix, FNR, and FPR at each step.
- **Optimization**: Identify the threshold that minimizes the combined classification error (FNR + FPR).


```{r, echo=FALSE, message=FALSE, warning=FALSE}
sh_y <- "sh_inf"

sh_vars_survey <- c(
  "hh_age_", "hh_gender_", "hh_10_w99", "hh_12_6_", 
  "hh_37_", "health_5_3_1_", "health_5_3_3_", "health_5_3_6_", 
  "health_5_3_9_", "health_5_5_", "health_5_8_", "health_5_9_", "asset_index_std",
  "living_01_bin", "living_04_bin", "beliefs_01_bin",  
  "q_51_w99"
)

# Build formula string
sh_formula_survey <- paste(sh_y, "~", paste(sh_vars_survey, collapse = " + "))

# Fit logistic regression model
sh_model2 <- glm(as.formula(sh_formula_survey), data = train_df, family = "binomial")
# sh_cse <- vcovCL(sh_model2, cluster = train_df$hhid_village)
# 
# # Apply coeftest with clustered SE
# sh_model_cse <- coeftest(sh_model2, vcov. = sh_cse)

print(sh_model2)

# See summary
#summary(sh_model_cse)


```


The following output are the FPRs and FNRs using the previous regression coefficients. I summarize these all in one confusion matrix. 

```{r, echo=FALSE, message=FALSE, warning=FALSE}

test_probs <- predict(sh_model2, newdata = test_df, type = "response")



### Generalized to function 

evaluate_thresholds <- function(test_probs, actual, thresholds = seq(0.1, 0.9, by = 0.1)) {
  results <- data.frame()
  
  for (threshold in thresholds) {
    pred_class <- ifelse(test_probs > threshold, 1, 0)
    
    TP <- sum(pred_class == 1 & actual == 1)
    TN <- sum(pred_class == 0 & actual == 0)
    FP <- sum(pred_class == 1 & actual == 0)
    FN <- sum(pred_class == 0 & actual == 1)
    
    FPR <- ifelse((FP + TN) > 0, FP / (FP + TN), NA)
    FNR <- ifelse((FN + TP) > 0, FN / (FN + TP), NA)
    Sum_FPR_FNR <- FPR + FNR
    
    results <- rbind(results, data.frame(
      Threshold = threshold,
      TP = TP, TN = TN, FP = FP, FN = FN,
      FPR = round(FPR, 3),
      FNR = round(FNR, 3),
      Sum_FPR_FNR = round(Sum_FPR_FNR, 3)
    ))
  }
  
  # Find threshold that minimizes FPR + FNR
  min_row <- results[which.min(results$Sum_FPR_FNR), ]
  attr(results, "best_threshold") <- min_row$Threshold
  
  return(results)
}
  

results_df <- evaluate_thresholds(test_probs, test_df$sh_inf)
#print(results_df)

# Best threshold (minimizing FPR + FNR)
sh_best_threshold_survey <- attr(results_df, "best_threshold")

kable(results_df, format = "html", caption = "Confusion Matrix for sh_inf at each threshold using only survey covariates") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%")



kable(sh_best_threshold_survey, format = "html", caption = "Survey Covariates Confusion Matrix Best Threshold") %>%
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, position = "left") %>%
  scroll_box(width = "100%")

```


##### Summarize and visualize the probababilities

```{r, echo=FALSE, message=FALSE, warning=FALSE}
### visulalize 

summary(test_probs)
hist(test_probs, breaks = 20, col = "skyblue", main = "Distribution of Predicted Probabilities")




```





:::










