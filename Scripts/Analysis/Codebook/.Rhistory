value <- selected_data[[1]]
summary_stats <- binary_func_l(value)
# Add the prefix (variable name) to the summary
summary_stats$variable <- prefix
return(summary_stats)
})
binary_sum_set_l <- bind_rows(summaries_binary_l)
return(binary_sum_set_l)
}
df<- categ_summary(hh_ethn_c, prefixes_ethnicity)
write.table(df, "clipboard", sep="\t", row.names=FALSE)
print(write.table(df, "clipboard", sep="\t", row.names=FALSE))
df
print(write.table(df, "clipboard", sep="\t", row.names=FALSE))
df
cat(numerical_summary(household_df, prefixes_n1)$Frequency, sep="\n")
cat(df$Frequency, sep="\n")
print(categ_summary(hh_ethn_c, prefixes_ethnicity))
cat(df$Proportion, sep="\n")
# -------------------- KNOWLEDGE 20 --------------------
knowledge_20_d <- knowledge_df %>%
select(-"knowledge_20_o")
prefixes_knowledge_20 <- c("knowledge_20")
# Print combined summary
print(categ_summary(knowledge_20_d, prefixes_knowledge_20))
# -------------------- KNOWLEDGE 18 --------------------
prefixes_knowledge_18 <- c("knowledge_18")
# Summarize knowledge_18
print(almost_binary_summary(knowledge_df, prefixes_knowledge_18))
### knowledge_05
# -------------------- agri_income_13 --------------------
agri_income_13_df <- income_df %>%
select(hhid, matches("^agri_income_13_\\d+_\\d+"), starts_with("speciesname_"), starts_with("animals_sales_")) %>%
mutate(across(starts_with("agri_income_13"),
~ ifelse(. == 1,
as.numeric(sub(".*_(\\d+)_\\d+$", "\\1", cur_column())),
ifelse(. == 0, NA, .)))) %>%
pivot_longer(
cols = starts_with("agri_income_13_"),
names_to = "agri_income_13_type",
names_pattern = "agri_income_13_(.*)",
values_to = "value"
)
agri_income_13_df_l <- agri_income_13_df %>%
mutate(agri_income_13_01 = ifelse(animals_sales_1 == 1, value, NA)) %>%
mutate(agri_income_13_02 = ifelse(animals_sales_2 == 1, value, NA)) %>%
mutate(agri_income_13_03 = ifelse(animals_sales_3 == 1, value, NA)) %>%
mutate(agri_income_13_04 = ifelse(animals_sales_4 == 1, value, NA)) %>%
mutate(agri_income_13_05 = ifelse(animals_sales_5 == 1, value, NA)) %>%
mutate(agri_income_13_06 = ifelse(animals_sales_6 == 1, value, NA)) %>%
mutate(agri_income_13_07 = ifelse(animals_sales_7 == 1, value, NA)) %>%
mutate(agri_income_13_08 = ifelse(animals_sales_8 == 1, value, NA)) %>%
mutate(agri_income_13_09 = ifelse(animals_sales_9 == 1, value, NA)) %>%
select(starts_with("agri_income_"))
prefixes_agri_income_13 <- paste0("agri_income_13_", sprintf("%02d", 1:9))
print(categ_summary_l(agri_income_13_df_l, prefixes_agri_income_13))
# -------------------- agri_income_13 --------------------
agri_income_13_df <- income_df %>%
select(hhid, matches("^agri_income_13_\\d+_\\d+"), starts_with("speciesname_"), starts_with("animals_sales_")) %>%
mutate(across(starts_with("agri_income_13"),
~ ifelse(. == 1,
as.numeric(sub(".*_(\\d+)_\\d+$", "\\1", cur_column())),
ifelse(. == 0, NA, .)))) %>%
pivot_longer(
cols = starts_with("agri_income_13_"),
names_to = "agri_income_13_type",
names_pattern = "agri_income_13_(.*)",
values_to = "value"
)
agri_income_13_df_l <- agri_income_13_df %>%
mutate(agri_income_13_01 = ifelse(animals_sales_1 == 1, value, NA)) %>%
mutate(agri_income_13_02 = ifelse(animals_sales_2 == 1, value, NA)) %>%
mutate(agri_income_13_03 = ifelse(animals_sales_3 == 1, value, NA)) %>%
mutate(agri_income_13_04 = ifelse(animals_sales_4 == 1, value, NA)) %>%
mutate(agri_income_13_05 = ifelse(animals_sales_5 == 1, value, NA)) %>%
mutate(agri_income_13_06 = ifelse(animals_sales_6 == 1, value, NA)) %>%
mutate(agri_income_13_07 = ifelse(animals_sales_7 == 1, value, NA)) %>%
mutate(agri_income_13_08 = ifelse(animals_sales_8 == 1, value, NA)) %>%
mutate(agri_income_13_09 = ifelse(animals_sales_9 == 1, value, NA)) %>%
select(starts_with("agri_income_"))
prefixes_agri_income_13 <- paste0("agri_income_13_", sprintf("%02d", 1:9))
print(categ_summary_l(agri_income_13_df_l, prefixes_agri_income_13))
agri_income_13_df
# -------------------- agri_income_12 --------------------
agri_income_12_df <- income_df %>%
select(hhid, starts_with("agri_income_12"), starts_with("speciesname_"), starts_with("animals_sales_")) %>%
pivot_longer(
cols = starts_with("agri_income_12_"),
names_to = "agri_income_12_type",
names_pattern = "agri_income_12_(.*)",
values_to = "value"
)
agri_income_12_df_l <- agri_income_12_df %>%
mutate(agri_income_12_01 = ifelse(animals_sales_1 == 1, value, NA)) %>%
mutate(agri_income_12_02 = ifelse(animals_sales_2 == 1, value, NA)) %>%
mutate(agri_income_12_03 = ifelse(animals_sales_3 == 1, value, NA)) %>%
mutate(agri_income_12_04 = ifelse(animals_sales_4 == 1, value, NA)) %>%
mutate(agri_income_12_05 = ifelse(animals_sales_5 == 1, value, NA)) %>%
mutate(agri_income_12_06 = ifelse(animals_sales_6 == 1, value, NA)) %>%
mutate(agri_income_12_07 = ifelse(animals_sales_7 == 1, value, NA)) %>%
mutate(agri_income_12_08 = ifelse(animals_sales_8 == 1, value, NA)) %>%
mutate(agri_income_12_09 = ifelse(animals_sales_9 == 1, value, NA)) %>%
select(starts_with("agri_income_"))
prefixes_agri_income_12 <- paste0("agri_income_12_", sprintf("%02d", 1:9))
print(numerical_summary_l(agri_income_12_df_l, prefixes_agri_income_12))
# -------------------- agri_income_13_o --------------------
agri_income_13_df_o <- income_df %>%
select(hhid, matches("^agri_income_13_o_\\d+"), starts_with("speciesname_"), starts_with("animals_sales_")) %>%
mutate(across(starts_with("agri_income_13_o"),
~ ifelse(. == 1,
as.numeric(sub(".*_(\\d+)$", "\\1", cur_column())),
ifelse(. == 0, NA, .)))) %>%
pivot_longer(
cols = starts_with("agri_income_13_o_"),
names_to = "agri_income_13_o_type",
values_to = "value"
)
agri_income_13_df_l_o <- agri_income_13_df_o %>%
mutate(final_agri_income_13_o = ifelse(animals_sales_o == 1, value, NA))
prefixes_agri_income_13_o <- c("agri_income_13_o")
print(categ_summary_l(agri_income_13_df_l_o, prefixes_agri_income_13_o))
df <- categ_summary(df, prefix)
agri_income_13_df_o
# -------------------- agri_income_14 --------------------
agri_income_14_df <- income_df %>%
select(hhid, starts_with("agri_income_14"), starts_with("speciesname_"), starts_with("animals_sales_")) %>%
pivot_longer(
cols = starts_with("agri_income_14_"),
names_to = "agri_income_14_type",
names_pattern = "agri_income_14_(.*)",
values_to = "value"
)
agri_income_14_df_l <- agri_income_14_df %>%
mutate(agri_income_14_01 = ifelse(animals_sales_1 == 1, value, NA)) %>%
mutate(agri_income_14_02 = ifelse(animals_sales_2 == 1, value, NA)) %>%
mutate(agri_income_14_03 = ifelse(animals_sales_3 == 1, value, NA)) %>%
mutate(agri_income_14_04 = ifelse(animals_sales_4 == 1, value, NA)) %>%
mutate(agri_income_14_05 = ifelse(animals_sales_5 == 1, value, NA)) %>%
mutate(agri_income_14_06 = ifelse(animals_sales_6 == 1, value, NA)) %>%
mutate(agri_income_14_07 = ifelse(animals_sales_7 == 1, value, NA)) %>%
mutate(agri_income_14_08 = ifelse(animals_sales_8 == 1, value, NA)) %>%
mutate(agri_income_14_09 = ifelse(animals_sales_9 == 1, value, NA)) %>%
select(starts_with("agri_income_"))
prefixes_agri_income_14 <- paste0("agri_income_14_", sprintf("%02d", 1:9))
print(numerical_summary_l(agri_income_14_df_l, prefixes_agri_income_14))
# -------------------- agri_income_22 --------------------
prefixes_agri_income_22 <- c("agri_income_22")
print(numerical_summary_l(income_df, prefixes_agri_income_22))
df <- categ_summary(hh_rel_c, prefixes_hh_rel)
cat(df$Frequency, sep="\n")
cat(df$Proportion, sep="\n")
cat(df$Frequency, sep="\n")
# -------------------- EDUCATION LEVEL --------------------
hh_edu_lvl_c <- household_df %>%
select(-matches("^hh_education_level_o"))
prefixes_edu_lvl <- c("hh_education_level_")
print(categ_summary(hh_edu_lvl_c, prefixes_edu_lvl))
df <- categ_summary(hh_edu_lvl_c, prefixes_edu_lvl)
cat(df$Frequency, sep="\n")
cat(df$Proportion, sep="\n")
df <- categ_summary(hh_activ_c2, prefixes_main_act_o)
# -------------------- MAIN ACTIVITY --------------------
hh_activ_c <- household_df %>%
select(-matches("^hh_main_activity_o"))
prefixes_main_act <- c("hh_main_activity_")
print(categ_summary(hh_activ_c, prefixes_main_act))
df <- categ_summary(hh_activ_c, prefixes_main_act)
cat(df$Frequency, sep="\n")
cat(df$Proportion, sep="\n")
# Handle "other" main activity variables
hh_activ_c2 <- household_df %>%
select(matches("^hh_main_activity_o")) %>%
mutate(across(starts_with("hh_main_activity_o"), as.character))
prefixes_main_act_o <- c("hh_main_activity_o")
print(categ_summary(hh_activ_c2, prefixes_main_act_o))
df <- categ_summary(hh_activ_c2, prefixes_main_act_o)
cat(df$Frequency, sep="\n")
cat(df$Proportion, sep="\n")
df <- categ_summary(hh_activ_c2, prefixes_main_act_o)
cat(df$Frequency, sep="\n")
cat(df$Proportion, sep="\n")
df <- categ_summary(hh_activ_c, prefixes_main_act)
cat(df$Frequency, sep="\n")
cat(df$Proportion, sep="\n")
# List of required packages
packages <- c("officer", "r2rtf", "dplyr", "ggplot2", "kwb.utils",
"haven", "data.table", "rtf", "tidyverse", "estimatr", "broom")
# Install missing packages
install_missing <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(install_missing)) install.packages(install_missing)
# Load libraries
lapply(packages, library, character.only = TRUE)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/admmi/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/_CRDES_CleanData/Midline/Deidentified"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/_CRDES_CleanData/Midline/Deidentified"
))
}
file_path_hh <- file.path(proj$p1, "Complete_Midline_Household_Roster.dta")
household_df <- read_dta(file_path_hh)
file_path_know <- file.path(proj$p1, "Complete_Midline_Knowledge.dta")
knowledge_df <- read_dta(file_path_know)
file_path_health <- file.path(proj$p1, "Complete_Midline_Health.dta")
health_df <- read_dta(file_path_health)
file_path_agri <- file.path(proj$p1, "Complete_Midline_Agriculture.dta")
agriculture_df <- read_dta(file_path_agri)
file_path_prod <- file.path(proj$p1, "Complete_Midline_Production.dta")
production_df <- read_dta(file_path_prod)
file_path_cop <- file.path(proj$p1, "Complete_Midline_Lean_Season.dta")
coping_df <- read_dta(file_path_cop)
file_path_income <- file.path(proj$p1, "Complete_Midline_Income.dta")
income_df <- read_dta(file_path_income)
file_path_standard <- file.path(proj$p1, "Complete_Midline_Standard_Of_Living.dta")
standard_df <- read_dta(file_path_standard)
file_path_beliefs <- file.path(proj$p1, "Complete_Midline_Beliefs.dta")
beliefs_df <- read_dta(file_path_beliefs)
# Donation Game not at midline
#file_path_game <- file.path(proj$p1, "Complete_Midline_Public_Goods_Game.dta")
# donation_df <- read_dta(file_path_game)
file_path_enumerator <- file.path(proj$p1, "Complete_Midline_Enumerator_Observations.dta")
enumerator_df <- read_dta(file_path_enumerator)
file_path_community <- file.path(proj$p1, "Complete_Midline_Community.dta")
community_df <- read_dta(file_path_community)
#====================================================================
#This function is used to summarize categorical variables with indices
#====================================================================
categ_func <- function(value) {
# N = Total number of non-empty, non-NA observations (including -9s but excluding true NAs/empty cells)
N <- sum(!is.na(value) & value != "")
# Remove NAs and invalid values (-9 in this example)
valid_value <- value[!is.na(value) & value != -9]
# Calculate frequency and proportion for valid responses
freq_table <- table(valid_value)
proportions <- round(freq_table / length(valid_value), 2)
# Calculate the proportion of -9s and NAs
prop_na <- round(sum(value == -9, na.rm = TRUE) / N, 2)
#prop_na <- round(sum(value == -9 | is.na(value) | value == ".", na.rm = TRUE) / N, 2)
# Create a data frame with the summary
categorical_data <- data.frame(
Value = names(freq_table),
N = N,  # Total number of observations
Frequency = as.vector(freq_table),  # Frequency of valid responses
Proportion = as.vector(proportions),  # Proportion of valid responses
prop_na = prop_na  # Proportion of -9s/NAs
)
return(categorical_data)
}
categ_summary <- function(data, prefixes) {
summaries <- lapply(prefixes, function(prefix) {
variable_data <- data %>%
select(starts_with(prefix)) %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
# Pass the 'value' column to categ_func
summary_categ <- categ_func(variable_data$value)
summary_categ$Variable <- prefix  # Assign the prefix as the variable name
return(summary_categ)
})
categ_sum_set <- bind_rows(summaries)
return(categ_sum_set)
}
# Function to calculate summary statistics for a single categorical vector
categ_func_l <- function(value_l) {
# N = Total number of non-empty, non-NA observations (including -9s but excluding true NAs/empty cells)
N <- sum(!is.na(value_l) & value_l != "")
# Remove NAs and invalid values (-9 in this example)
valid_value_l <- value_l[!is.na(value_l) & value_l != -9]
# Calculate frequency and proportion for valid responses
freq_table_l <- table(valid_value_l)
proportions_l <- round(freq_table_l / length(valid_value_l), 2)
# Calculate the proportion of -9s and NAs
prop_na_l <- round(sum(value_l == -9, na.rm = TRUE) / N, 2)
# Create a data frame with the summary
categorical_data_l <- data.frame(
Value = names(freq_table_l),
N = N,  # Total number of observations
Frequency = as.vector(freq_table_l),  # Frequency of valid responses
Proportion = as.vector(proportions_l),  # Proportion of valid responses
prop_na = prop_na_l  # Proportion of -9s/NAs
)
return(categorical_data_l)
}
# Function to summarize multiple categorical variables by prefix
categ_summary_l <- function(data_l, prefixes_l) {
summaries_l <- lapply(prefixes_l, function(prefix_l) {
variable_data_l <- data_l %>%
select(starts_with(prefix_l))
# Pull the 'value' column and pass to categ_func_l
value_l <- variable_data_l[[1]]
summary_categ_l <- categ_func_l(value_l)
summary_categ_l$Variable_l <- prefix_l  # Assign the prefix as the variable name
return(summary_categ_l)
})
categ_sum_set_l <- bind_rows(summaries_l)
return(categ_sum_set_l)
}
#====================================================================
#This function is used to summarize numerical variables with indices
#====================================================================
numerical_summary_func <- function(midline_data, prefix) {
midline_data %>%
select(starts_with(prefix)) %>%
pivot_longer(cols = starts_with(prefix), names_to = "id", values_to = "value", names_prefix = paste0(prefix, "_")) %>%
summarise(N = round(sum(!is.na(value)), 2),
min = round(min(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
mean = round(mean(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
max = sprintf("%.2f", max(ifelse(value == -9, NA, value), na.rm = TRUE),2),
sd = round(sd(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2)) %>%
mutate(variable = prefix)
}
numerical_summary <- function(midline_data, prefixes) {
summaries <- lapply(prefixes, function(prefix) {
numerical_summary_func(midline_data, prefix)
})
numerical_sum_set <- bind_rows(summaries)
return(numerical_sum_set)
}
#======================================================================
#This function is used to summarize numerical variables WITHOUT indices
#======================================================================
numerical_summary_func_l <- function(value) {
# Calculate summary statistics for numeric variables
numerical_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),
min = round(min(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
mean = round(mean(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
#max = round(max(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
max = sprintf("%.2f", max(ifelse(value == -9, NA, value), na.rm = TRUE),2),
sd = round(sd(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2)
)
return(numerical_stats_l)
}
# Function to summarize multiple sets of numeric variables by prefix
numerical_summary_l <- function(midline_data, prefixes) {
# Loop over each prefix
summaries_numerical_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
numerical_data_l <- midline_data %>%
select(starts_with(prefix))
# Pull the column values and pass to numerical_summary_func_l
value <- numerical_data_l[[1]]
numerical_summary_stats <- numerical_summary_func_l(value)
# Add the prefix (variable name) to the summary
numerical_summary_stats$variable <- prefix
return(numerical_summary_stats)
})
# Combine the summaries into a single data frame
numerical_sum_set_l <- bind_rows(summaries_numerical_l)
return(numerical_sum_set_l)
}
#====================================================================
#This function is used to summarize variables with indices
# that take a value of 0, 1, and 2. We handle the 2s my summarizing their proportions
#====================================================================
almost_binary_func <- function(midline_data, prefix) {
almost_binary_data <- midline_data %>%
select(starts_with(prefix)) %>%
pivot_longer(cols = starts_with(prefix),
names_to = "id",
values_to = "value",
names_prefix = paste0(prefix, "_"))
# Calculate N (including 0s, 1s, and 2s), mean, and sd for 0s and 1s
binary_stats <- almost_binary_data %>%
filter(value %in% c(0, 1, 2)) %>%
summarise(N = round(sum(!is.na(value)), 2),  # N includes 0s, 1s, and 2s
mean = round(mean(ifelse(value == -9 | value == 2, NA, value), na.rm = TRUE), 2),  # Exclude 2s for mean
sd = round(sd(ifelse(value == -9 | value == 2, NA, value), na.rm = TRUE), 2),  # Exclude 2s for SD
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2))
# Calculate proportion of 2s
proportion_dont_know <- almost_binary_data %>%
summarise(proportion_dont_know = round(mean(value == 2, na.rm = TRUE), 2)) %>%
mutate(variable = prefix)
# Combine results
combined_stats <- cbind(binary_stats, proportion_dont_know)
combined_stats$variable <- prefix  # Add prefix as a variable
return(combined_stats)
}
# Function to summarize multiple sets of variables
almost_binary_summary <- function(midline_data, prefixes) {
summaries <- lapply(prefixes, function(prefix) {
almost_binary_func(midline_data, prefix)
})
almost_binary_sum_set <- bind_rows(summaries)
return(almost_binary_sum_set)
}
#====================================================================
#This function is used to summarize variables WITHOUT indices
# that take a value of 0, 1, and 2. We handle the 2s my summarizing their proportions
#====================================================================
# Function to calculate summary statistics for a single vector (variable)
almost_binary_func_l <- function(value) {
# Ensure we're working with values 0, 1, and 2 only
value <- value[value %in% c(0, 1, 2, -9)]
# Calculate summary statistics for 0s and 1s (exclude -9 and 2 for mean and SD)
almost_binary_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),  # N includes 0s, 1s, and 2s
mean = round(mean(ifelse(value == -9 | value == 2, NA, value), na.rm = TRUE), 2),  # Exclude 2s and -9 for mean
sd = round(sd(ifelse(value == -9 | value == 2, NA, value), na.rm = TRUE), 2),  # Exclude 2s and -9 for SD
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2)  # Proportion of NAs (-9)
)
# Calculate proportion of 2s
proportion_dont_know_l <- data.frame(
proportion_dont_know_l = round(mean(value == 2, na.rm = TRUE), 2)  # Proportion of "Don't know" (2)
)
# Combine results
almost_binary_combined_stats_l <- cbind(almost_binary_stats_l, proportion_dont_know_l)
return(almost_binary_combined_stats_l)
}
# Function to summarize multiple sets of variables by prefix
almost_binary_summary_l <- function(midline_data, prefixes) {
# Loop over each prefix
summaries_almost_binary_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
almost_binary_data_l <- midline_data %>%
select(starts_with(prefix))
# Ensure only one column is selected for each prefix
#Pull the column values and pass to almost_binary_func_l
value <- almost_binary_data_l[[1]]
almost_binary_summary_stats_l <- almost_binary_func_l(value)
# Add the prefix (variable name) to the summary
almost_binary_summary_stats_l$variable <- prefix
return(almost_binary_summary_stats_l)
})
# Combine all summaries into a single data frame
almost_binary_sum_set_l <- bind_rows(summaries_almost_binary_l)
return(almost_binary_sum_set_l)
}
#====================================================================
#This function is used to summarize BINARY variables WITH indices
#====================================================================
binary_func <- function(midline_data, prefix) {
# Pivot longer to create the 'value' column
binary_data <- midline_data %>%
select(starts_with(prefix)) %>%
pivot_longer(cols = everything(),
names_to = "id",
values_to = "value")
# Check if 'value' column exists
#print(head(binary_data))  # Print the first few rows to verify
# Adjust 2 -> 0 and 1 -> 1
binary_data <- binary_data %>%
mutate(value = ifelse(value == 2, 0,
ifelse(value == 1, 1, value)))
# Calculate mean, sd, and N for 0s and 1s
binary_stats <- binary_data %>%
summarise(N = round(sum(!is.na(value)), 2),
#summarise(N = round(sum(!is.na(ifelse(value == -9, NA, value))), 2),
mean = round(mean(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
sd = round(sd(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2))
binary_stats$variable <- prefix  # Add prefix as a variable
return(binary_stats)
}
# Function to summarize multiple sets of variables
binary_summary <- function(midline_data, prefixes) {
summaries_binary <- lapply(prefixes, function(prefix) {
binary_func(midline_data, prefix)
})
binary_sum_set <- bind_rows(summaries_binary)
return(binary_sum_set)
}
#====================================================================
#This function is used to summarize BINARY variables WITHOUT indices
#====================================================================
# Function to calculate summary statistics for a single vector (variable)
binary_func_l <- function(value) {
# Calculate summary statistics for 0s and 1s
binary_stats_l <- data.frame(
N = round(sum(!is.na(value)), 2),
mean = round(mean(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
sd = round(sd(ifelse(value == -9, NA, value), na.rm = TRUE), 2),
prop_na = round(sum(value == -9, na.rm = TRUE) / sum(!is.na(value)), 2)
)
return(binary_stats_l)
}
binary_summary_l <- function(midline_data, prefixes) {
# Loop over each prefix
summaries_binary_l <- lapply(prefixes, function(prefix) {
# Select the column that matches the prefix
selected_data <- midline_data %>%
select(starts_with(prefix))
# Pull the column values and pass to binary_func_l
value <- selected_data[[1]]
summary_stats <- binary_func_l(value)
# Add the prefix (variable name) to the summary
summary_stats$variable <- prefix
return(summary_stats)
})
binary_sum_set_l <- bind_rows(summaries_binary_l)
return(binary_sum_set_l)
}
# -------------------- agri_income_43 --------------------
prefixes_agri_income_43 <- c("agri_income_43")
print(numerical_summary(income_df, prefixes_agri_income_43))
# -------------------- agri_income_42 --------------------
prefixes_agri_income_42 <- c("agri_income_42")
print(numerical_summary(income_df, prefixes_agri_income_42))
# -------------------- agri_income_40 --------------------
prefixes_agri_income_40 <- c("agri_income_40")
print(almost_binary_summary_l(income_df, prefixes_agri_income_40))
