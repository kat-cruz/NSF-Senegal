colnames(output_alm_bin)
# Create the gt table
output_alm_bin_gt <- gt(output_alm_bin) %>%
tab_header(
title = "Binary Summary Statistics with 'I don't Know'"
)
gtsave(output_alm_bin_gt, "almost_binary_summary_stats.tex")
output_alm_bin_gt
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
# Define the prefixes
prefixes_categ <- c("hh_19_", "hh_31_", "hh_33_", "living_01", "living_03", "living_04")
# Recode the values for the variables
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = recode(
hh_31_,
`1` = "Graduated, studies completed",
`2` = "Moving to the next class",
`3` = "Failure, repetition",
`4` = "Failure, dismissal",
`5` = "Dropping out during the year"
),
hh_33_ = recode(
hh_33_,
`1` = "Lower",
`2` = "About the same",
`3` = "Superior"
),
living_01 = recode(
living_01,
`1` = "Interior tap",
`2` = "Public tap",
`3` = "Neighborâ€™s tap",
`4` = "Protected well",
`5` = "Unprotected well",
`6` = "Drill hole",
`7` = "Tanker service",
`8` = "Water seller",
`9` = "Source",
`10` = "Stream",
`99` = "Other"
),
living_03 = recode(
living_03,
`1` = "Bleach/Aqua tabs",
`2` = "Boil",
`3` = "Filtration",
`99` = "Other (to be specified)"
),
living_04 = recode(
living_04,
`0` = "None/outside",
`1` = "Flush with sewer",
`2` = "Toilet flush with septic tank",
`3` = "Bucket",
`4` = "Covered pit latrines",
`5` = "Uncovered pit latrines",
`6` = "Improved latrines",
`99` = "Others"
),
hh_19_ = recode(
hh_19_,
`1` = "Lake",
`2` = "Pond",
`3` = "River",
`4` = "Irrigation channel",
`99` = "Other, give details"
)
)
# Generate categorical summary
output_categ <- as.data.frame(categ_summary_l(matched_only_df, prefixes_categ))
rownames(output_categ) <- NULL
# # Variable labels mapping
# variable_labels <- c(
#   "hh_19_" = "Source of water",
#   "hh_31_" = "Result achieved in academic year",
#   "hh_33_" = "Performance in class",
#   "living_01" = "Source of drinking water",
#   "living_03" = "How is water treated",
#   "living_04" = "Main type of toilet used"
# )
# # Rename variables using the labels
# Rename variables in the dataframe
output_categ <- output_categ %>%
mutate(Variable = recode(Variable,
"hh_19_" = "Source of water",
"hh_31_" = "Result achieved in academic year",
"hh_33_" = "Performance in class",
"living_01" = "Source of drinking water",
"living_03" = "How is water treated",
"living_04" = "Main type of toilet used"
))
output_categ <- output_categ %>%
rename(
`Missing` = prop_na
)
# Create the gt table
output_categ_gt <- gt(output_categ) %>%
tab_header(
title = "Categorical Variable Summary Statistics"
)
output_categ_gt
gtsave(output_categ_gt, "categ_summary_stats.tex")
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
#view(matched_only_df)
# Generate predicted probabilities for each model
predicted_probs_h_01 <- predict(logit_model_01_h, type = "response")
predicted_probs_m_01 <- predict(logit_model_01_m, type = "response")
predicted_probs_t_01 <- predict(ols_model_01_t, type = "response")  # Assuming binary output from OLS
# Define thresholds
thresholds_01 <- seq(0, 1, by = 0.1)
# Define a threshold for Total_egg (you can adjust this based on your data)
threshold_egg <- 5  # Example threshold - Create a binary version of the Total_egg variable
binary_total_egg <- ifelse(model_01_data$total_egg > threshold_egg, 1, 0)
# Function to compute confusion matrix and errors for a given model
compute_confusion_01 <- function(predicted_probs_01, actual_values_01, thresholds_01) {
errors_01 <- sapply(thresholds_01, function(t_01) {
predictions_01 <- ifelse(predicted_probs_01 > t_01, 1, 0)
# Convert both to factors with the same levels
confusion_matrix_01 <- table(
factor(predictions_01, levels = c(0, 1)),
factor(actual_values_01, levels = c(0, 1))
)
# Avoid subscript out of bounds by checking if the matrix has both rows/columns
if (all(dim(confusion_matrix_01) == c(2, 2))) {
fnr_01 <- confusion_matrix_01[2, 1] / sum(confusion_matrix_01[, 1])  # FN / (FN + TP)
fpr_01 <- confusion_matrix_01[1, 2] / sum(confusion_matrix_01[, 2])  # FP / (FP + TN)
} else {
fnr_01 <- NA
fpr_01 <- NA
}
return(fnr_01 + fpr_01)
})
optimal_threshold_01 <- thresholds_01[which.min(errors_01)]
# Generate confusion matrix at optimal threshold
predictions_optimal_01 <- ifelse(predicted_probs_01 > optimal_threshold_01, 1, 0)
confusion_matrix_optimal_01 <- table(
Predicted_01 = predictions_optimal_01,
Actual_01 = actual_values_01
)
return(list(confusion_matrix_optimal_01 = confusion_matrix_optimal_01, optimal_threshold_01 = optimal_threshold_01))
}
# Apply the function to each model
results_h_01 <- compute_confusion_01(predicted_probs_h_01, model_01_data$sh_inf, thresholds_01)
results_m_01 <- compute_confusion_01(predicted_probs_m_01, model_01_data$sm_inf, thresholds_01)
results_t_01 <- compute_confusion_01(predicted_probs_t_01, binary_total_egg, thresholds_01)
# Combine confusion matrices into a single LaTeX table
combined_matrix_01 <- rbind(
cbind(Model_01 = "Logit Model H", as.matrix(results_h_01$confusion_matrix_optimal_01)),
cbind(Model_01 = "Logit Model M", as.matrix(results_m_01$confusion_matrix_optimal_01)),
cbind(Model_01 = "OLS Model T", as.matrix(results_t_01$confusion_matrix_optimal_01))
)
# Add row and column names for clarity
# rownames(combined_matrix_01) <- c(
#   "Logit H", "Logit H",  # These will correspond to the rows for Logit H model
#   "Logit M", "Logit M",  # These will correspond to the rows for Logit M model
#   "OLS T", "OLS T"  # These will correspond to the rows for OLS T model
# )
colnames(combined_matrix_01) <- c("Model:", "Predicted: Class 0", "Predicted: Class 1")
# Output to LaTeX
latex_combined_01 <- xtable(combined_matrix_01,
caption = "Combined Confusion Matrices for Three Models",
label = "tab:combined_confusion_matrices_01")
print(latex_combined_01, include.rownames = FALSE, include.colnames = TRUE)
# Print optimal thresholds for each model
cat("Optimal Thresholds:\n")
cat("Logit Model H:", results_h_01$optimal_threshold_01, "\n")
cat("Logit Model M:", results_m_01$optimal_threshold_01, "\n")
cat("OLS Model T:", results_t_01$optimal_threshold_01, "\n")
cat(latex_combined_01, sep = '\n', file = 'confusion_matrices_01.tex')
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
#view(matched_only_df)
# Generate predicted probabilities for each model
predicted_probs_h_01 <- predict(logit_model_01_h, type = "response")
predicted_probs_m_01 <- predict(logit_model_01_m, type = "response")
predicted_probs_t_01 <- predict(ols_model_01_t, type = "response")  # Assuming binary output from OLS
# Define thresholds
thresholds_01 <- seq(0, 1, by = 0.1)
# Define a threshold for Total_egg (you can adjust this based on your data)
threshold_egg <- 5  # Example threshold - Create a binary version of the Total_egg variable
binary_total_egg <- ifelse(model_01_data$total_egg > threshold_egg, 1, 0)
# Function to compute confusion matrix and errors for a given model
compute_confusion_01 <- function(predicted_probs_01, actual_values_01, thresholds_01) {
errors_01 <- sapply(thresholds_01, function(t_01) {
predictions_01 <- ifelse(predicted_probs_01 > t_01, 1, 0)
# Convert both to factors with the same levels
confusion_matrix_01 <- table(
factor(predictions_01, levels = c(0, 1)),
factor(actual_values_01, levels = c(0, 1))
)
# Avoid subscript out of bounds by checking if the matrix has both rows/columns
if (all(dim(confusion_matrix_01) == c(2, 2))) {
fnr_01 <- confusion_matrix_01[2, 1] / sum(confusion_matrix_01[, 1])  # FN / (FN + TP)
fpr_01 <- confusion_matrix_01[1, 2] / sum(confusion_matrix_01[, 2])  # FP / (FP + TN)
} else {
fnr_01 <- NA
fpr_01 <- NA
}
return(fnr_01 + fpr_01)
})
optimal_threshold_01 <- thresholds_01[which.min(errors_01)]
# Generate confusion matrix at optimal threshold
predictions_optimal_01 <- ifelse(predicted_probs_01 > optimal_threshold_01, 1, 0)
confusion_matrix_optimal_01 <- table(
Predicted_01 = predictions_optimal_01,
Actual_01 = actual_values_01
)
return(list(confusion_matrix_optimal_01 = confusion_matrix_optimal_01, optimal_threshold_01 = optimal_threshold_01))
}
# Apply the function to each model
results_h_01 <- compute_confusion_01(predicted_probs_h_01, model_01_data$sh_inf, thresholds_01)
results_m_01 <- compute_confusion_01(predicted_probs_m_01, model_01_data$sm_inf, thresholds_01)
results_t_01 <- compute_confusion_01(predicted_probs_t_01, binary_total_egg, thresholds_01)
# Combine confusion matrices into a single LaTeX table
combined_matrix_01 <- rbind(
cbind(Model_01 = "Logit Model H", as.matrix(results_h_01$confusion_matrix_optimal_01)),
cbind(Model_01 = "Logit Model M", as.matrix(results_m_01$confusion_matrix_optimal_01)),
cbind(Model_01 = "OLS Model T", as.matrix(results_t_01$confusion_matrix_optimal_01))
)
# Add row and column names for clarity
# rownames(combined_matrix_01) <- c(
#   "Logit H", "Logit H",  # These will correspond to the rows for Logit H model
#   "Logit M", "Logit M",  # These will correspond to the rows for Logit M model
#   "OLS T", "OLS T"  # These will correspond to the rows for OLS T model
# )
colnames(combined_matrix_01) <- c("Model:", "Predicted: Class 0", "Predicted: Class 1")
# Output to LaTeX
latex_combined_01 <- xtable(combined_matrix_01,
caption = "Combined Confusion Matrices for Three Models",
label = "tab:combined_confusion_matrices_01")
print(latex_combined_01, include.rownames = FALSE, include.colnames = TRUE, file = 'confusion_matrices_01.tex')
# Print optimal thresholds for each model
cat("Optimal Thresholds:\n")
cat("Logit Model H:", results_h_01$optimal_threshold_01, "\n")
cat("Logit Model M:", results_m_01$optimal_threshold_01, "\n")
cat("OLS Model T:", results_t_01$optimal_threshold_01, "\n")
#cat(latex_combined_01, sep = '\n', file = 'confusion_matrices_01.tex')
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
# Define the prefixes
prefixes_categ <- c("hh_19_", "hh_31_", "hh_33_", "living_01", "living_03", "living_04")
# Recode the values for the variables
matched_only_df <- matched_only_df %>%
mutate(
hh_31_ = recode(
hh_31_,
`1` = "Graduated, studies completed",
`2` = "Moving to the next class",
`3` = "Failure, repetition",
`4` = "Failure, dismissal",
`5` = "Dropping out during the year"
),
hh_33_ = recode(
hh_33_,
`1` = "Lower",
`2` = "About the same",
`3` = "Superior"
),
living_01 = recode(
living_01,
`1` = "Interior tap",
`2` = "Public tap",
`3` = "Neighborâ€™s tap",
`4` = "Protected well",
`5` = "Unprotected well",
`6` = "Drill hole",
`7` = "Tanker service",
`8` = "Water seller",
`9` = "Source",
`10` = "Stream",
`99` = "Other"
),
living_03 = recode(
living_03,
`1` = "Bleach/Aqua tabs",
`2` = "Boil",
`3` = "Filtration",
`99` = "Other (to be specified)"
),
living_04 = recode(
living_04,
`0` = "None/outside",
`1` = "Flush with sewer",
`2` = "Toilet flush with septic tank",
`3` = "Bucket",
`4` = "Covered pit latrines",
`5` = "Uncovered pit latrines",
`6` = "Improved latrines",
`99` = "Others"
),
hh_19_ = recode(
hh_19_,
`1` = "Lake",
`2` = "Pond",
`3` = "River",
`4` = "Irrigation channel",
`99` = "Other, give details"
)
)
# Generate categorical summary
output_categ <- as.data.frame(categ_summary_l(matched_only_df, prefixes_categ))
rownames(output_categ) <- NULL
# # Variable labels mapping
# variable_labels <- c(
#   "hh_19_" = "Source of water",
#   "hh_31_" = "Result achieved in academic year",
#   "hh_33_" = "Performance in class",
#   "living_01" = "Source of drinking water",
#   "living_03" = "How is water treated",
#   "living_04" = "Main type of toilet used"
# )
# # Rename variables using the labels
# Rename variables in the dataframe
output_categ <- output_categ %>%
mutate(Variable = recode(Variable,
"hh_19_" = "Source of water",
"hh_31_" = "Result achieved in academic year",
"hh_33_" = "Performance in class",
"living_01" = "Source of drinking water",
"living_03" = "How is water treated",
"living_04" = "Main type of toilet used"
))
# output_categ <- output_categ %>%
#   rename(
#     `Missing` = prop_na
#   )
output_categ <- output_categ %>%
select(-prop_na)
# Create the gt table
output_categ_gt <- gt(output_categ) %>%
tab_header(
title = "Categorical Variable Summary Statistics"
)
output_categ_gt
gtsave(output_categ_gt, "categ_summary_stats.tex")
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
prefixes_binary <- c("hh_gender_", "health_5_3_2_", "health_5_5_", "health_5_6_", "health_5_8_","health_5_9_", "hh_12_1_", "hh_12_2_", "hh_12_3_", "hh_12_4_", "hh_12_5_", "hh_12_6_", "hh_12_7_",  "hh_12_8_")
output_bin <- binary_summary_l(matched_only_df, prefixes_binary)
output_bin <- output_bin %>%
mutate(Variable = recode(Variable,
"hh_gender_" = "Gender",
"health_5_3_2_" = "Had Bilharzia past 12 months",
"health_5_5_" = "Received medication for Schisto past 12 months",
"health_5_6_" = "Ever diagnosed with schisto",
"health_5_8_" = "Blood in urine past 12 months?",
"health_5_9_" = "Blood in stool past 12 months?",
"hh_12_1_" = "Fetched water for HH",
"hh_12_1_" = "Fetched water for HH",
"hh_12_2_" = "Gave water to livestock",
"hh_12_3_" = "Fetched water for agriculture",
"hh_12_4_" = "Washed clothes",
"hh_12_5_" = "Did the dishes",
"hh_12_6_" = "Harvested aquatic vegetation",
"hh_12_7_" = "Swam/bathed",
"hh_12_8_" = "Played"
))
# output_bin <- output_bin %>%
#   rename(
#     `Missing` = prop_na
#   )
output_bin <- output_bin %>%
select(-prop_na)
# Create the gt table
output_bin_gt <- gt(output_bin) %>%
tab_header(
title = "Binary Variable Summary Statistics"
)
gtsave(output_bin_gt, "binary_summary_stats_table.tex")
output_bin_gt
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
prefixes_almost_binary <- c("health_5_3_2_", "health_5_5_", "health_5_6_", "health_5_8_", "health_5_9_")
output_alm_bin <- almost_binary_summary_l(matched_only_df, prefixes_almost_binary)
output_alm_bin <- output_alm_bin %>%
mutate(Variable = recode(Variable,
"health_5_3_2_" = "Had Bilharzia past 12 months",
"health_5_5_" = "Received medication for Schisto past 12 months",
"health_5_6_" = "Ever diagnosed with schisto",
"health_5_8_" = "Blood in urine past 12 months?",
"health_5_9_" = "Blood in stool past 12 months?")
)
output_alm_bin <- output_alm_bin %>%
rename(
`Missing` = Prop_na,
`Don't know` = proportion_dont_know
)
output_alm_bin <- output_alm_bin %>%
select(-Missing)
colnames(output_alm_bin)
# Create the gt table
output_alm_bin_gt <- gt(output_alm_bin) %>%
tab_header(
title = "Binary Summary Statistics with 'I don't Know'"
)
gtsave(output_alm_bin_gt, "almost_binary_summary_stats.tex")
output_alm_bin_gt
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
prefixes_numerical <- c("wealthindex", "health_5_4_", "hh_age_")
output_num <- numerical_summary_l(matched_only_df, prefixes_numerical)
output_num <- output_num %>%
mutate(Variable = recode(Variable,
"wealthindex" = "Wealth index",
"hh_age_" = "Age",
"health_5_4_" = "Number of school days missed",
"health_5_8_" = "Blood in urine past 12 months?",
"health_5_9_" = "Blood in stool past 12 months?")
)
# output_num <- output_num %>%
#   rename(
#     `Missing` = prop_na
#   )
output_num <- output_num %>%
select(-prop_na)
# Create the gt table
output_num_gt <- gt(output_num) %>%
tab_header(
title = "Continuous Variable Summary Statistics"
)
gtsave(output_num_gt, "continuous_summary_stats.tex")
output_num_gt
#Village level co-variates
# Define possible paths
path1 <- "C:/Users/km978/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
path2 <- "C:/Users/Kateri/Downloads/SenegalGIT/Latex_Output/Parasitological_Predictive_Analysis"
# set the working directory
if (dir.exists(path1)) {
setwd(path1)
} else if (dir.exists(path2)) {
setwd(path2)
}
# Ensure data is summarized at the village level for accuracy
village_level_data <- matched_only_df %>%
select(village_id, q_18, q_19, q_23, q_24, q_35_check, q_39, schisto_indicator) %>%
distinct(village_id, .keep_all = TRUE)
prefixes_binary_vil <- c("q_18", "q_19", "q_23", "q_24", "q_35_check", "q_39", "schisto_indicator")
output_bin_vil <- binary_summary_l(village_level_data, prefixes_binary_vil)
output_bin_vil <- output_bin_vil %>%
mutate(Variable = recode(Variable,
"q_18" = "Educational facilities",
"q_19" = "Health facilities",
"q_23" = "Running drinking water for drinking",
"q_24" = "Tap water system",
"q_35_check" = "Deworming treatment carried out?",
"q_39" = "Ongoing projects to reduce bilharzia?",
"schisto_indicator" =  "Snails found with schisto"
))
#
# output_bin_vil <- output_bin_vil %>%
#   rename(
#     `Missing` = prop_na
#   )
output_bin_vil <- output_bin_vil %>%
select(-prop_na)
# Create the gt table
output_bin_vil_gt <- gt(output_bin_vil) %>%
tab_header(
title = "Village-level Binary Summary Statistics"
)
gtsave(output_bin_vil_gt, "binary_vil_summary_stats.tex")
output_bin_vil_gt
