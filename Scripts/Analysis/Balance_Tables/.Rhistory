# Define a vector of required packages
packages <- c("clusterSEs", "mlogit", "writexl", "dplyr", "readr", "tidyr",
"haven", "data.table", "tidyverse", "estimatr", "broom", "kableExtra",
"sandwich", "lmtest", "stats", "nnet", "car", "aod", "clubSandwich")
# Install any missing packages
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)
# Load the required packages
lapply(packages, library, character.only = TRUE)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data_PAP.dta")
balance_df_raw <- read_dta(file_path_balance_tables_df)
balance_df_raw
file_path_asset_index_df <- file.path(proj$p1, "PCA_asset_index_var.dta")
asset_df_raw <- read_dta(file_path_asset_index_df)
asset_df_raw
# Adding a single categorical variable for household training categories - this is for computing summary stats since I'm keeping the trained_hh variable
# joint_df <- balance_df %>%
#   mutate(
#     group = str_sub(hhid, 3, 4),
#     treatment_group = case_when(
#       group %in% c("0A", "0B") ~ "Control",
#       group %in% c("1A", "1B") ~ "Treatment1",
#       group %in% c("2A", "2B") ~ "Treatment2",
#       group %in% c("3A", "3B") ~ "Treatment3",
#          )
#   ) %>% select(-group)
#
# names(joint_df)
summary_df <- balance_df_raw %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control"
)
) %>% select(-group)
long_data_sum <- summary_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
long_data_sum <- long_data_sum %>%
rename(group = treatment_group)
# Adding a single categorical variable for household training categories - this is for running regressions to avoid multicollinearity with trained_hh
balance_df <- balance_df_raw %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group, ensuring "Local Control" is prioritized
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control",  # Moved to the top
group %in% c("3A", "3B") ~ "Treatment3"
)
) %>% select(-group, -trained_hh)
balance_df
# Define footnotes as a data frame
footnotes <- data.frame(
Notes = c(
"LR chi2( 123 ) = ",
"Prob > chi2 = ",
"Number of obs = 1,928",
"Reported statistics are regression coefficients, with p-values in parentheses and false discovery rate (FDR)-adjusted q-values in brackets.",
"Standard errors are clustered at the village level.",
"The means for the Control group are presented in the 'Control Mean' column, with standard errors in parentheses.",
"P-values indicate statistical significance: * denotes significance at the 5% level (p ≤ 0.05), and ** denotes significance at the 1% level (p ≤ 0.01).",
"+ Binary variables were derived from Likert scale responses based on their distribution.",
"† Responses marked as 'I Don't Know' (coded as 2) have been recoded as missing values."
)
)
# Save final table and footnotes in the same Excel file
write_xlsx(list(
"Baseline Balance Table" = final_table,
"Footnotes" = footnotes
), "balance_tablev_jointf_6.xlsx")
# Define a vector of required packages
packages <- c("clusterSEs", "mlogit", "writexl", "dplyr", "readr", "tidyr",
"haven", "data.table", "tidyverse", "estimatr", "broom", "kableExtra",
"sandwich", "lmtest", "stats", "nnet", "car", "aod", "clubSandwich")
# Install any missing packages
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)
# Load the required packages
lapply(packages, library, character.only = TRUE)
# Example summary stats (assuming asset_df_raw is your dataframe)
summary_stats <- asset_df_raw %>%
summarise(
asset_index_mean = mean(asset_index, na.rm = TRUE),
asset_index_sd = sd(asset_index, na.rm = TRUE),
asset_index_min = min(asset_index, na.rm = TRUE),
asset_index_max = max(asset_index, na.rm = TRUE),
asset_index_std_mean = mean(asset_index_std, na.rm = TRUE),
asset_index_std_sd = sd(asset_index_std, na.rm = TRUE),
asset_index_std_min = min(asset_index_std, na.rm = TRUE),
asset_index_std_max = max(asset_index_std, na.rm = TRUE)
)
# Description of how the index was created (included in the note)
index_description <- "
<p style='font-family: Arial, sans-serif;'><strong><u>Note on Asset Index Creation:</u></strong><br><br>
<b>Summary of Variable Creation & Analysis:</b><br>
<b>Variable Creation:</b><br>
<ul>
<li><strong>Living Condition Variables:</strong> Binary variables were created for the following:</li>
<ul>
<li><strong>Water Source (living_01):</strong> Indoor tap, Public tap, or Neighbor's tap (coded as 1).</li>
<li><strong>Water Treatment (living_02):</strong> Household water treated (1 for Yes).</li>
<li><strong>Toilet Type (living_04):</strong> Flush toilet with sewer or septic tank (coded as 1).</li>
<li><strong>Cooking Fuel (living_05):</strong> Gas, Electricity, Petrol/oil/ethanol, Animal waste/dung, or Solar (coded as 1).</li>
<li><strong>Lighting (living_06):</strong> Electric generator or Solar (coded as 1).</li>
</ul>
<li><strong>Asset Index Creation:</strong> A Total Livestock Unit (TLU) variable was created based on the type and number of livestock species (Cattle, Sheep, Goats, etc.).</li>
<li><strong>Ownership and Agricultural Activities:</strong> Binary variables were created for household ownership of dwelling (agri_6_5_bin) and certain agricultural activities (agri_6_23_bin).</li>
<li><strong>Data Standardization:</strong> Continuous variables TLU and rooms per member were standardized using z-scores.</li>
<li><strong>Principal Component Analysis (PCA):</strong> PCA was performed on the binary living conditions variables, the asset-related variables, and standardized continuous variables (TLU and rooms_per_member). The first principal component (PC1) was extracted as the asset index, representing household wealth or socioeconomic status.</li>
<li><strong>Normalization:</strong> The asset index (asset_index) was standardized (z-score transformation) to create the variable asset_index_std.</li>
</ul>
<b>Final Variables:</b><br>
<ul>
<li>living_01_bin, living_02_bin, living_05_bin, living_06_bin, agri_6_5_bin, agri_6_23_bin, TLU, rooms_per_member, asset_index, asset_index_std</li>
</ul>
</p>
"
# Combine summary statistics into a table
output_table <- tibble(
Variable = c("Asset Index", "Asset Index Standardized"),
Mean = c(summary_stats$asset_index_mean, summary_stats$asset_index_std_mean),
SD = c(summary_stats$asset_index_sd, summary_stats$asset_index_std_sd),
Min = c(summary_stats$asset_index_min, summary_stats$asset_index_std_min),
Max = c(summary_stats$asset_index_max, summary_stats$asset_index_std_max)
)
output_table
# Create HTML output with table and note (in standard font)
html_output <- kable(output_table, "html", caption = "Summary Statistics for Asset Index Variables") %>%
kable_styling() %>%
add_header_above(c("Variable Summary" = 5)) %>%
row_spec(0, bold = TRUE)
# Combine the description and the table for the HTML output
html_content <- paste0(
"<html><head><style>body {font-family: Arial, sans-serif;}</style></head><body>",
as.character(html_output),
"<br>",
index_description,
"</body></html>"
)
html_content <- paste0(
html_content
html_content
html_output <- kable(output_table, "html", caption = "Summary Statistics for Asset Index Variables") %>%
kable_styling() %>%
add_header_above(c("Variable Summary" = 5)) %>%
row_spec(0, bold = TRUE)
# Combine the description and the table for the HTML output
html_content <- paste0(
"<html><head><style>body {font-family: Arial, sans-serif;}</style></head><body>",
as.character(html_output),
"<br>",
index_description,
"</body></html>"
)
html_content
# Define a vector of required packages
packages <- c("clusterSEs", "mlogit", "writexl", "dplyr", "readr", "tidyr",
"haven", "data.table", "tidyverse", "estimatr", "broom", "kableExtra",
"sandwich", "lmtest", "stats", "nnet", "car", "aod", "clubSandwich")
# Install any missing packages
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)
# Load the required packages
lapply(packages, library, character.only = TRUE)
# Define the file paths
proj_paths <- list(
projects = "C:/Users/Kateri/Box/NSF Senegal",
alternative_projects = "C:/Users/km978/Box/NSF Senegal"
)
# Check if the Kateri path exists and resolve the project path accordingly
if (file.exists(proj_paths$projects)) {
proj <- kwb.utils::resolve(list(
projects = proj_paths$projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
} else {
proj <- kwb.utils::resolve(list(
projects = proj_paths$alternative_projects,
p1 = "<projects>/Data_Management/Output/Analysis/Balance_Tables"
))
}
file_path_balance_tables_df <- file.path(proj$p1, "baseline_balance_tables_data_PAP.dta")
balance_df_raw <- read_dta(file_path_balance_tables_df)
balance_df_raw
file_path_asset_index_df <- file.path(proj$p1, "PCA_asset_index_var.dta")
asset_df_raw <- read_dta(file_path_asset_index_df)
asset_df_raw
# Adding a single categorical variable for household training categories - this is for computing summary stats since I'm keeping the trained_hh variable
# joint_df <- balance_df %>%
#   mutate(
#     group = str_sub(hhid, 3, 4),
#     treatment_group = case_when(
#       group %in% c("0A", "0B") ~ "Control",
#       group %in% c("1A", "1B") ~ "Treatment1",
#       group %in% c("2A", "2B") ~ "Treatment2",
#       group %in% c("3A", "3B") ~ "Treatment3",
#          )
#   ) %>% select(-group)
#
# names(joint_df)
summary_df <- balance_df_raw %>%
mutate(
group = str_sub(hhid, 3, 4),
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
group %in% c("3A", "3B") ~ "Treatment3",
#group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control"
)
) %>% select(-group)
long_data_sum <- summary_df %>%
pivot_longer(
cols = -c(hhid, hhid_village, treatment_group),  # Keep hhid and group as is, pivot all other columns
names_to = "variable",    # Create a column named "variable" for former column names
values_to = "value"       # Store values in a column named "value"
)
long_data_sum <- long_data_sum %>%
rename(group = treatment_group)
# Adding a single categorical variable for household training categories - this is for running regressions to avoid multicollinearity with trained_hh
balance_df <- balance_df_raw %>%
mutate(
# Extract the two middle characters (e.g., 2A) from hhid
group = str_sub(hhid, 3, 4),
# Assign treatment group, ensuring "Local Control" is prioritized
treatment_group = case_when(
group %in% c("0A", "0B") ~ "Control",
group %in% c("1A", "1B") ~ "Treatment1",
group %in% c("2A", "2B") ~ "Treatment2",
#group %in% c("1A", "1B", "2A", "2B", "3A", "3B") & trained_hh == 0 ~ "Local Control",  # Moved to the top
group %in% c("3A", "3B") ~ "Treatment3"
)
) %>% select(-group, -trained_hh)
balance_df
compute_summary_stats <- function(df) {
df %>%
mutate(variable = factor(variable, levels = unique(variable))) %>%  # Preserve variable order
group_by(group, variable) %>%
summarise(
mean_value = round(mean(value, na.rm = TRUE), 2),
sd_value = round(sd(value, na.rm = TRUE), 2),
N = sum(!is.na(value)),  # Count of non-missing values
.groups = "drop"
) %>%
pivot_longer(cols = c(mean_value, sd_value, N), names_to = "stat_type", values_to = "stat_value") %>%
mutate(stat_type = case_when(
stat_type == "mean_value" ~ "Mean",
stat_type == "sd_value" ~ "SD",
stat_type == "N" ~ "N"
)) %>%
mutate(stat_type = factor(stat_type, levels = c("Mean", "SD", "N"))) %>%  # Set order of statistics
arrange(variable, stat_type) %>%
pivot_wider(names_from = group, values_from = stat_value) %>%
select(variable, stat_type, everything())  # Ensure variable and stat_type come first
}
summary_table1 <- compute_summary_stats(long_data_sum)
# View output
print(summary_table1)
summary_table2 <- summary_table1 %>%
# Apply two decimal places for numeric columns (Control, Treatment1, etc.)
mutate(across(where(is.numeric), ~ format(.x, nsmall = 2))) %>%
# Convert everything to character type (for proper formatting)
mutate(across(everything(), as.character)) %>%
# Add parentheses for SD values (only if stat_type is SD)
mutate(across(
Control:Treatment3,  # Apply only to numeric columns
~ ifelse(stat_type == "SD", paste0("(", trimws(.), ")"), .)  # Add parentheses for SD values
)) %>%
# Select necessary columns: variable, N_values, and treatment columns
select(variable, everything()) %>%
mutate(
variable = ifelse(stat_type %in% c("SD", "N"), "", variable),
stat_type = ifelse(stat_type %in% c("SD", "N"), "", stat_type)
) %>%
select(-stat_type, -`NA`)
summary_table2
summary_table3 <- summary_table2 %>%
mutate(Question = case_when(
variable == "hhid_village" ~ "Village ID",
variable == "hhid" ~ "Household ID",
variable == "trained_hh" ~ "Trained household",
variable == "hh_age_h" ~ "Household head age",
variable == "hh_education_level_bin_h" ~ "Indicator for household head with secondary education or higher (1=Yes, 0=No)",
variable == "hh_education_skills_5_h" ~ "Indicator that household head is literate (1=Yes, 0=No)",
variable == "hh_gender_h" ~ "Household head gender (1=Male, 0=Female)",
variable == "hh_numero" ~ "Household size",
variable == "hh_03_" ~ "Indicator for those who worked in domestic agricultural activities in the past 12 months (1=Yes, 0=No) †",
variable == "hh_10_" ~ "Average weekly hours spent within 1 meter of surface water source, in the past 12 months.",
variable == "hh_12_6_" ~ "Indicator for those who harvested aquatic vegetation, among those who spent time near a water source in the past 12 months. (1=Yes, 0=No)",
variable == "hh_16_" ~ "Average weekly hours spent producing, purchasing, or applying fertilizer in the past 12 months (among those near a water source).",
variable == "hh_15_2" ~ "Indicator for making fertilizer (compost) among those who spent time near a water source (1=Yes, 0=No)",
variable == "hh_26_" ~ "Indicator if currently enrolled in formal school (1=Yes, 0=No, asked about children) †",
variable == "hh_27_" ~ "Indicator if attended non-formal school or training? (1=Yes, 0=No, asked about children) †",
variable == "hh_29_01" ~ "Indicator for primary level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_02" ~ "Indicator for secondary middle level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_03" ~ "Indicator for secondary higher level education (1=Yes, 0=No, asked about children)",
variable == "hh_29_04" ~ "Indicator for upper secondary education (1=Yes, 0=No, asked about children)",
variable == "hh_31_bin" ~ "Indicator if student completed studies or moved to next class for 2022/2023 (1=Yes, 0=No, asked about children)",
variable == "hh_37_" ~ "Indicator if missed >1 consecutive week of school due to illness in the past 12 months (1=Yes, 0=No, asked about children) †",
variable == "hh_38_" ~ "Number of attended school days in the past week (asked about children)",
variable == "living_01_bin" ~ "Indicator for selected tap water as main drinking source (1=Yes, 0=No)",
variable == "game_A_total" ~ "Total paid for Game A (CFA)",
variable == "game_B_total" ~ "Total paid for Game B (CFA)",
variable == "TLU" ~ "Tropical livestock units",
variable == "agri_6_15" ~ "Number of cultivated plots",
variable == "agri_6_32_bin" ~ "Indicator if used any organic fertilizer (1=Yes, 0=No)",
variable == "agri_6_36_bin" ~ "Indicator if used any inorganic/chemical fertilizer (1=Yes, 0=No)",
variable == "total_land_ha" ~ "Total land cultivated (hectares)",
variable == "agri_6_34_comp_any" ~ "Used any compost on any parcel (1=Yes, 0=No) †",
variable == "agri_income_01" ~ "Indicator if engaged in paid agricultural work in last 12 months (1=Yes, 0=No) †",
variable == "agri_income_05" ~ "Amount received for agricultural work (FCFA), among those who responded yes to working in agriculture",
variable == "beliefs_01_bin" ~ "Probability of contracting bilharzia (1=Strongly agree/Agree) +",
variable == "beliefs_02_bin" ~ "Probability of household member contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_03_bin" ~ "Probability of a child contracting bilharzia (1=Yes, 0=No) +",
variable == "beliefs_04_bin" ~ "Agree: Village land should belong to community (1=Yes, 0=No) +",
variable == "beliefs_05_bin" ~ "Agree: Village water sources should belong to community (1=Yes, 0=No) +",
variable == "beliefs_06_bin" ~ "Agree: Right to products from own land (1=Yes, 0=No) +",
variable == "beliefs_07_bin" ~ "Agree: Right to products from community land worked on (1=Yes, 0=No) +",
variable == "beliefs_08_bin" ~ "Agree: Right to products from community water sources fished in (1=Yes, 0=No) +",
variable == "beliefs_09_bin" ~ "Agree: Right to products from community water sources harvested from (1=Yes, 0=No) +",
variable == "health_5_3_bin" ~ "Indicator for bilharzia or diarrhea in the past 12 months (1=Yes, 0=No, among those reporting illness)",
variable == "health_5_6_" ~ "Indicator for Diagnosed with schistosomiasis (1=Yes, 0=No) †",
variable == "num_water_access_points" ~ "Number of village water access points",
variable == "q_51" ~ "Distance to nearest healthcare center (km) [village level]",
variable == "target_village" ~ "Indicator if auction village (1=Yes, 0=No)",
TRUE ~ variable  # Default case
))
summary_table3
summary_table_complete <- summary_table3 %>% select(Question, everything()) %>%
rename(Variable = variable,
`Private Treatment` = Treatment1,
`Public Treatment` = Treatment2,
`Private and Public Treatment` = Treatment3)
summary_table_complete
#%>%   filter(variable != "target_village")
